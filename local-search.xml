<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>spring6</title>
    <link href="/2023/03/09/yuque/spring6/"/>
    <url>/2023/03/09/yuque/spring6/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring6"><a href="#Spring6" class="headerlink" title="Spring6"></a>Spring6</h1><p><img src="/images%5Cspring6%5Cimage-20221209110043449.png#alt=image-20221209110043449"></p><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><h3 id="1-1、Spring-是什么？"><a href="#1-1、Spring-是什么？" class="headerlink" title="1.1、Spring 是什么？"></a>1.1、Spring 是什么？</h3><p>Spring 是一款主流的 Java EE 轻量级开源框架 ，Spring 由“Spring 之父”Rod Johnson 提出并创立，其目的是用于简化 Java 企业级应用的开发难度和开发周期。Spring 的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何 Java 应用都可以从 Spring 中受益。Spring 框架除了自己提供功能外，还提供整合其他技术和框架的能力。</p><p>Spring 自诞生以来备受青睐，一直被广大开发人员作为 Java 企业级应用程序开发的首选。时至今日，Spring 俨然成为了 Java EE 代名词，成为了构建 Java EE 应用的事实标准。</p><p>自 2004 年 4 月，Spring 1.0 版本正式发布以来，Spring 已经步入到了第 6 个大版本，也就是 Spring 6。本课程采用 Spring 当前最新发布的正式版本<strong>6.0.2</strong>。</p><p><img src="/images%5Cspring6%5Cimage-20221201102513199.png#alt=image-20221216223135162"></p><h3 id="1-2、Spring-的狭义和广义"><a href="#1-2、Spring-的狭义和广义" class="headerlink" title="1.2、Spring 的狭义和广义"></a>1.2、Spring 的狭义和广义</h3><p>在不同的语境中，Spring 所代表的含义是不同的。下面我们就分别从“广义”和“狭义”两个角度，对 Spring 进行介绍。</p><p><strong>广义的 Spring：Spring 技术栈</strong></p><p>广义上的 Spring 泛指以 Spring Framework 为核心的 Spring 技术栈。</p><p>经过十多年的发展，Spring 已经不再是一个单纯的应用框架，而是逐渐发展成为一个由多个不同子项目（模块）组成的成熟技术，例如 Spring Framework、Spring MVC、SpringBoot、Spring Cloud、Spring Data、Spring Security 等，其中 Spring Framework 是其他子项目的基础。</p><p>这些子项目涵盖了从企业级应用开发到云计算等各方面的内容，能够帮助开发人员解决软件发展过程中不断产生的各种实际问题，给开发人员带来了更好的开发体验。</p><p><strong>狭义的 Spring：Spring Framework</strong></p><p>狭义的 Spring 特指 Spring Framework，通常我们将它称为 Spring 框架。</p><p>Spring 框架是一个分层的、面向切面的 Java 应用程序的一站式轻量级解决方案，它是 Spring 技术栈的核心和基础，是为了解决企业级应用开发的复杂性而创建的。</p><p>Spring 有两个最核心模块： IoC 和 AOP。</p><p><strong>IoC</strong>：Inverse of Control 的简写，译为“控制反转”，指把创建对象过程交给 Spring 进行管理。</p><p><strong>AOP</strong>：Aspect Oriented Programming 的简写，译为“面向切面编程”。AOP 用来封装多个类的公共行为，将那些与业务无关，却为业务模块所共同调用的逻辑封装起来，减少系统的重复代码，降低模块间的耦合度。另外，AOP 还解决一些系统层面上的问题，比如日志、事务、权限等。</p><h3 id="1-3、Spring-Framework-特点"><a href="#1-3、Spring-Framework-特点" class="headerlink" title="1.3、Spring Framework 特点"></a>1.3、Spring Framework 特点</h3><ul><li><p>非侵入式：使用 Spring Framework 开发应用程序时，Spring 对应用程序本身的结构影响非常小。对领域模型可以做到零污染；对功能性组件也只需要使用几个简单的注解进行标记，完全不会破坏原有结构，反而能将组件结构进一步简化。这就使得基于 Spring Framework 开发应用程序时结构清晰、简洁优雅。</p></li><li><p>控制反转：IoC——Inversion of Control，翻转资源获取方向。把自己创建资源、向环境索取资源变成环境将资源准备好，我们享受资源注入。</p></li><li><p>面向切面编程：AOP——Aspect Oriented Programming，在不修改源代码的基础上增强代码功能。</p></li><li><p>容器：Spring IoC 是一个容器，因为它包含并且管理组件对象的生命周期。组件享受到了容器化的管理，替程序员屏蔽了组件创建过程中的大量细节，极大的降低了使用门槛，大幅度提高了开发效率。</p></li><li><p>组件化：Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用 XML 和 Java 注解组合这些对象。这使得我们可以基于一个个功能明确、边界清晰的组件有条不紊的搭建超大型复杂应用系统。</p></li><li><p>一站式：在 IoC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库。而且 Spring 旗下的项目已经覆盖了广泛领域，很多方面的功能性需求可以在 Spring Framework 的基础上全部使用 Spring 来实现。</p></li></ul><h3 id="1-4、Spring-模块组成"><a href="#1-4、Spring-模块组成" class="headerlink" title="1.4、Spring 模块组成"></a>1.4、Spring 模块组成</h3><p>官网地址：<a href="https://spring.io/">https://spring.io/</a></p><p><img src="/images%5Cspring6%5Cimage-20221207142746771.png#alt=image-20221207142746771"></p><p><img src="/images/spring6/2097896352.png#alt=image-2097896352"></p><p>上图中包含了 Spring 框架的所有模块，这些模块可以满足一切企业级应用开发的需求，在开发过程中可以根据需求有选择性地使用所需要的模块。下面分别对这些模块的作用进行简单介绍。</p><p><strong>①Spring Core（核心容器）</strong></p><p>spring core 提供了 IOC,DI,Bean 配置装载创建的核心实现。核心概念： Beans、BeanFactory、BeanDefinitions、ApplicationContext。</p><ul><li><p>spring-core ：IOC 和 DI 的基本实现</p></li><li><p>spring-beans：BeanFactory 和 Bean 的装配管理(BeanFactory)</p></li><li><p>spring-context：Spring context 上下文，即 IOC 容器(AppliactionContext)</p></li><li><p>spring-expression：spring 表达式语言</p></li></ul><p><strong>②Spring AOP</strong></p><ul><li>spring-aop：面向切面编程的应用模块，整合 ASM，CGLib，JDK Proxy</li><li>spring-aspects：集成 AspectJ，AOP 应用框架</li><li>spring-instrument：动态 Class Loading 模块</li></ul><p><strong>③Spring Data Access</strong></p><ul><li>spring-jdbc：spring 对 JDBC 的封装，用于简化 jdbc 操作</li><li>spring-orm：java 对象与数据库数据的映射框架</li><li>spring-oxm：对象与 xml 文件的映射框架</li><li>spring-jms： Spring 对 Java Message Service(java 消息服务)的封装，用于服务之间相互通信</li><li>spring-tx：spring jdbc 事务管理</li></ul><p><strong>④Spring Web</strong></p><ul><li>spring-web：最基础的 web 支持，建立于 spring-context 之上，通过 servlet 或 listener 来初始化 IOC 容器</li><li>spring-webmvc：实现 web mvc</li><li>spring-websocket：与前端的全双工通信协议</li><li>spring-webflux：Spring 5.0 提供的，用于取代传统 java servlet，非阻塞式 Reactive Web 框架，异步，非阻塞，事件驱动的服务</li></ul><p><strong>⑤Spring Message</strong></p><ul><li>Spring-messaging：spring 4.0 提供的，为 Spring 集成一些基础的报文传送服务</li></ul><p><strong>⑥Spring test</strong></p><ul><li>spring-test：集成测试支持，主要是对 junit 的封装</li></ul><h3 id="1-5、Spring6-特点"><a href="#1-5、Spring6-特点" class="headerlink" title="1.5、Spring6 特点"></a>1.5、Spring6 特点</h3><h4 id="1-5-1、版本要求"><a href="#1-5-1、版本要求" class="headerlink" title="1.5.1、版本要求"></a>1.5.1、版本要求</h4><p><strong>（1）Spring6 要求 JDK 最低版本是 JDK17</strong></p><p><img src="/images%5Cspring6%5Cimage-20221201103138194.png#alt=image-20221201103138194"></p><h4 id="1-5-2、本课程软件版本"><a href="#1-5-2、本课程软件版本" class="headerlink" title="1.5.2、本课程软件版本"></a>1.5.2、本课程软件版本</h4><p>（1）IDEA 开发工具：2022.1.2</p><p>（2）JDK：Java17<strong>（Spring6 要求 JDK 最低版本是 Java17）</strong></p><p>（3）Spring：6.0.2</p><h2 id="2、入门"><a href="#2、入门" class="headerlink" title="2、入门"></a>2、入门</h2><h3 id="2-1、环境要求"><a href="#2-1、环境要求" class="headerlink" title="2.1、环境要求"></a>2.1、环境要求</h3><ul><li><p>JDK：Java17+<strong>（Spring6 要求 JDK 最低版本是 Java17）</strong></p></li><li><p>Maven：3.6+</p></li><li><p>Spring：6.0.2</p></li></ul><h3 id="2-2、构建模块"><a href="#2-2、构建模块" class="headerlink" title="2.2、构建模块"></a>2.2、构建模块</h3><p><strong>（1）构建父模块 spring6</strong></p><p>在 idea 中，依次单击 File -&gt; New -&gt; Project -&gt; New Project</p><p><img src="/images%5Cspring6%5Cimage-20221205201741893.png#alt=image-20221205201741893"></p><p>点击“Create”</p><p><img src="/images%5Cspring6%5Cimage-20221205202000198.png#alt=image-20221205202000198"></p><p>删除 src 目录</p><p><strong>（2）构建子模块 spring6-first</strong></p><p><img src="/images%5Cspring6%5Cimage-20221205202117383.png#alt=image-20221205202117383"></p><p>点击 Create 完成</p><p><img src="/images%5Cspring6%5Cimage-20221205202154225.png#alt=image-20221205202154225"></p><h3 id="2-3、程序开发"><a href="#2-3、程序开发" class="headerlink" title="2.3、程序开发"></a>2.3、程序开发</h3><h4 id="2-3-1、引入依赖"><a href="#2-3-1、引入依赖" class="headerlink" title="2.3.1、引入依赖"></a>2.3.1、引入依赖</h4><p><a href="https://spring.io/projects/spring-framework#learn">https://spring.io/projects/spring-framework#learn</a></p><p><strong>添加依赖：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--spring context依赖--&gt;</span><br>    <span class="hljs-comment">&lt;!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--junit5测试--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>查看依赖：</strong></p><p><img src="/images%5Cspring6%5Cimage-20221201105416558.png#alt=image-20221201105416558"></p><h4 id="2-3-2、创建-java-类"><a href="#2-3-2、创建-java-类" class="headerlink" title="2.3.2、创建 java 类"></a>2.3.2、创建 java 类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.bean;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;helloworld&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3-3、创建配置文件"><a href="#2-3-3、创建配置文件" class="headerlink" title="2.3.3、创建配置文件"></a>2.3.3、创建配置文件</h4><p>在 resources 目录创建一个 Spring 配置文件 beans.xml（配置文件名称可随意命名，如：springs.xm）</p><p><img src="/images/spring6/img007.png#alt=img007"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    配置HelloWorld所对应的bean，即将HelloWorld的对象交给Spring的IOC容器管理</span><br><span class="hljs-comment">    通过bean标签配置IOC容器所管理的bean</span><br><span class="hljs-comment">    属性：</span><br><span class="hljs-comment">        id：设置bean的唯一标识</span><br><span class="hljs-comment">        class：设置bean所对应类型的全类名</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;helloWorld&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.bean.HelloWorld&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-3-4、创建测试类测试"><a href="#2-3-4、创建测试类测试" class="headerlink" title="2.3.4、创建测试类测试"></a>2.3.4、创建测试类测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.bean;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorldTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHelloWorld</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br>        <span class="hljs-type">HelloWorld</span> <span class="hljs-variable">helloworld</span> <span class="hljs-operator">=</span> (HelloWorld) ac.getBean(<span class="hljs-string">&quot;helloWorld&quot;</span>);<br>        helloworld.sayHello();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3-5、运行测试程序"><a href="#2-3-5、运行测试程序" class="headerlink" title="2.3.5、运行测试程序"></a>2.3.5、运行测试程序</h4><p><img src="/images/spring6/image-20221031172354535.png#alt=image-20221031172354535"></p><h3 id="2-4、程序分析"><a href="#2-4、程序分析" class="headerlink" title="2.4、程序分析"></a>2.4、程序分析</h3><p><strong>1. 底层是怎么创建对象的，是通过反射机制调用无参数构造方法吗？</strong></p><p>修改 HelloWorld 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.bean;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HelloWorld</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;无参数构造方法执行&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;helloworld&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/images/spring6/image-20221031181430720.png#alt=image-20221031181430720"></p><p><strong>测试得知：创建对象时确实调用了无参数构造方法。</strong></p><p><strong>2. Spring 是如何创建对象的呢？原理是什么？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// dom4j解析beans.xml文件，从中获取class属性值，类的全类名</span><br> <span class="hljs-comment">// 通过反射机制调用无参数构造方法创建对象</span><br> <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.atguigu.spring6.bean.HelloWorld&quot;</span>);<br> <span class="hljs-comment">//Object obj = clazz.newInstance();</span><br> <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor().newInstance();<br></code></pre></td></tr></table></figure><p><strong>3. 把创建好的对象存储到一个什么样的数据结构当中了呢？</strong></p><p>bean 对象最终存储在 spring 容器中，在 spring 源码底层就是一个 map 集合，存储 bean 的 map 在<strong>DefaultListableBeanFactory</strong>类中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, BeanDefinition&gt; beanDefinitionMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="hljs-number">256</span>);<br></code></pre></td></tr></table></figure><p>Spring 容器加载到 Bean 类时 , 会把这个类的描述信息, 以包名加类名的方式存到 beanDefinitionMap 中,</p><p>Map&lt;String,BeanDefinition&gt; , 其中 String 是 Key , 默认是类名首字母小写 , BeanDefinition , 存的是类的定义(描述信息) , 我们通常叫 BeanDefinition 接口为 : bean 的定义对象。</p><h3 id="2-5、启用-Log4j2-日志框架"><a href="#2-5、启用-Log4j2-日志框架" class="headerlink" title="2.5、启用 Log4j2 日志框架"></a>2.5、启用 Log4j2 日志框架</h3><h4 id="2-5-1、Log4j2-日志概述"><a href="#2-5-1、Log4j2-日志概述" class="headerlink" title="2.5.1、Log4j2 日志概述"></a>2.5.1、Log4j2 日志概述</h4><p>在项目开发中，日志十分的重要，不管是记录运行情况还是定位线上问题，都离不开对日志的分析。日志记录了系统行为的时间、地点、状态等相关信息，能够帮助我们了解并监控系统状态，在发生错误或者接近某种危险状态时能够及时提醒我们处理，同时在系统产生问题时，能够帮助我们快速的定位、诊断并解决问题。</p><p><strong>Apache Log4j2</strong>是一个开源的日志记录组件，使用非常的广泛。在工程中以易用方便代替了 System.out 等打印语句，它是 JAVA 下最流行的日志输入工具。</p><p><strong>Log4j2 主要由几个重要的组件构成：</strong></p><p><strong>（1）日志信息的优先级</strong>，日志信息的优先级从高到低有<strong>TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL</strong></p><p>TRACE：追踪，是最低的日志级别，相当于追踪程序的执行</p><p>DEBUG：调试，一般在开发中，都将其设置为最低的日志级别</p><p>INFO：信息，输出重要的信息，使用较多</p><p>WARN：警告，输出警告的信息</p><p>ERROR：错误，输出错误信息</p><p>FATAL：严重错误</p><p>这些级别分别用来指定这条日志信息的重要程度；级别高的会自动屏蔽级别低的日志，也就是说，设置了 WARN 的日志，则 INFO、DEBUG 的日志级别的日志不会显示</p><p><strong>（2）日志信息的输出目的地</strong>，日志信息的输出目的地指定了日志将打印到<strong>控制台</strong>还是<strong>文件中</strong>；</p><p><strong>（3）日志信息的输出格式</strong>，而输出格式则控制了日志信息的显示内容。</p><h4 id="2-5-2、引入-Log4j2-依赖"><a href="#2-5-2、引入-Log4j2-依赖" class="headerlink" title="2.5.2、引入 Log4j2 依赖"></a>2.5.2、引入 Log4j2 依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--log4j2的依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.19.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.19.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-5-3、加入日志配置文件"><a href="#2-5-3、加入日志配置文件" class="headerlink" title="2.5.3、加入日志配置文件"></a>2.5.3、加入日志配置文件</h4><p>在类的根路径下提供 log4j2.xml 配置文件（文件名固定为：log4j2.xml，文件必须放到类根路径下。）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">loggers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            level指定日志级别，从低到高的优先级：</span><br><span class="hljs-comment">                TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL</span><br><span class="hljs-comment">                trace：追踪，是最低的日志级别，相当于追踪程序的执行</span><br><span class="hljs-comment">                debug：调试，一般在开发中，都将其设置为最低的日志级别</span><br><span class="hljs-comment">                info：信息，输出重要的信息，使用较多</span><br><span class="hljs-comment">                warn：警告，输出警告的信息</span><br><span class="hljs-comment">                error：错误，输出错误信息</span><br><span class="hljs-comment">                fatal：严重错误</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;spring6log&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;RollingFile&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;log&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">loggers</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appenders</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--输出日志信息到控制台--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">console</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;spring6log&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;SYSTEM_OUT&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--控制日志输出的格式--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss SSS&#125; [%t] %-3level %logger&#123;1024&#125; - %msg%n&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">console</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，适合临时测试用--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">File</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;log&quot;</span> <span class="hljs-attr">fileName</span>=<span class="hljs-string">&quot;d:/spring6_log/test.log&quot;</span> <span class="hljs-attr">append</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;%d&#123;HH:mm:ss.SSS&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">File</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 这个会打印出所有的信息，</span><br><span class="hljs-comment">            每次大小超过size，</span><br><span class="hljs-comment">            则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，</span><br><span class="hljs-comment">            作为存档--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">RollingFile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;RollingFile&quot;</span> <span class="hljs-attr">fileName</span>=<span class="hljs-string">&quot;d:/spring6_log/app.log&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">filePattern</span>=<span class="hljs-string">&quot;log/$$&#123;date:yyyy-MM&#125;/app-%d&#123;MM-dd-yyyy&#125;-%i.log.gz&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;%d&#123;yyyy-MM-dd &#x27;at&#x27; HH:mm:ss z&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">SizeBasedTriggeringPolicy</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;50MB&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!-- DefaultRolloverStrategy属性如不设置，</span><br><span class="hljs-comment">            则默认为最多同一文件夹下7个文件，这里设置了20 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">DefaultRolloverStrategy</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;20&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">RollingFile</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appenders</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-5-4、测试"><a href="#2-5-4、测试" class="headerlink" title="2.5.4、测试"></a>2.5.4、测试</h4><p>运行原测试程序</p><p><img src="/images/spring6/image-20221031214305224.png#alt=image-20221031214305224"></p><p>运行原测试程序，多了 spring 打印日志</p><h4 id="2-5-5、使用日志"><a href="#2-5-5、使用日志" class="headerlink" title="2.5.5、使用日志"></a>2.5.5、使用日志</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorldTest</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(HelloWorldTest.class);<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHelloWorld</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br>        <span class="hljs-type">HelloWorld</span> <span class="hljs-variable">helloworld</span> <span class="hljs-operator">=</span> (HelloWorld) ac.getBean(<span class="hljs-string">&quot;helloWorld&quot;</span>);<br>        helloworld.sayHello();<br>        logger.info(<span class="hljs-string">&quot;执行成功&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>控制台：</p><p><img src="/images/spring6/image-20221031214547501.png#alt=image-20221031214547501"></p><h2 id="3、容器：IoC"><a href="#3、容器：IoC" class="headerlink" title="3、容器：IoC"></a>3、容器：IoC</h2><p>IoC 是 Inversion of Control 的简写，译为“控制反转”，它不是一门技术，而是一种设计思想，是一个重要的面向对象编程法则，能够指导我们如何设计出松耦合、更优良的程序。</p><p>Spring 通过 IoC 容器来管理所有 Java 对象的实例化和初始化，控制对象与对象之间的依赖关系。我们将由 IoC 容器管理的 Java 对象称为 Spring Bean，它与使用关键字 new 创建的 Java 对象没有任何区别。</p><p>IoC 容器是 Spring 框架中最重要的核心组件之一，它贯穿了 Spring 从诞生到成长的整个过程。</p><h3 id="3-1、IoC-容器"><a href="#3-1、IoC-容器" class="headerlink" title="3.1、IoC 容器"></a>3.1、IoC 容器</h3><h4 id="3-1-1、控制反转（IoC）"><a href="#3-1-1、控制反转（IoC）" class="headerlink" title="3.1.1、控制反转（IoC）"></a>3.1.1、控制反转（IoC）</h4><ul><li><p>控制反转是一种思想。</p></li><li><p>控制反转是为了降低程序耦合度，提高程序扩展力。</p></li><li><p>控制反转，反转的是什么？</p></li><li><ul><li>将对象的创建权利交出去，交给第三方容器负责。</li><li>将对象和对象之间关系的维护权交出去，交给第三方容器负责。</li></ul></li><li><p>控制反转这种思想如何实现呢？</p></li><li><ul><li>DI（Dependency Injection）：依赖注入</li></ul></li></ul><h4 id="3-1-2、依赖注入"><a href="#3-1-2、依赖注入" class="headerlink" title="3.1.2、依赖注入"></a>3.1.2、依赖注入</h4><p>DI（Dependency Injection）：依赖注入，依赖注入实现了控制反转的思想。</p><p><strong>依赖注入：</strong></p><ul><li><strong>指 Spring 创建对象的过程中，将对象依赖属性通过配置进行注入</strong></li></ul><p>依赖注入常见的实现方式包括两种：</p><ul><li>第一种：set 注入</li><li>第二种：构造注入</li></ul><p>所以结论是：IOC 就是一种控制反转的思想， 而 DI 是对 IoC 的一种具体实现。</p><p><strong>Bean 管理说的是：Bean 对象的创建，以及 Bean 对象中属性的赋值（或者叫做 Bean 对象之间关系的维护）。</strong></p><h4 id="3-1-3、IoC-容器在-Spring-的实现"><a href="#3-1-3、IoC-容器在-Spring-的实现" class="headerlink" title="3.1.3、IoC 容器在 Spring 的实现"></a>3.1.3、IoC 容器在 Spring 的实现</h4><p>Spring 的 IoC 容器就是 IoC 思想的一个落地的产品实现。IoC 容器中管理的组件也叫做 bean。在创建 bean 之前，首先需要创建 IoC 容器。Spring 提供了 IoC 容器的两种实现方式：</p><p><strong>①BeanFactory</strong></p><p>这是 IoC 容器的基本实现，是 Spring 内部使用的接口。面向 Spring 本身，不提供给开发人员使用。</p><p><strong>②ApplicationContext</strong></p><p>BeanFactory 的子接口，提供了更多高级特性。面向 Spring 的使用者，几乎所有场合都使用 ApplicationContext 而不是底层的 BeanFactory。</p><p><strong>③ApplicationContext 的主要实现类</strong></p><p><img src="/images/spring6/img005.png#alt=iamges"></p><table><thead><tr><th>类型名</th><th>简介</th></tr></thead><tbody><tr><td>ClassPathXmlApplicationContext</td><td>通过读取类路径下的 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td>FileSystemXmlApplicationContext</td><td>通过文件系统路径读取 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td>ConfigurableApplicationContext</td><td>ApplicationContext 的子接口，包含一些扩展方法 refresh() 和 close() ，让 ApplicationContext 具有启动、关闭和刷新上下文的能力。</td></tr><tr><td>WebApplicationContext</td><td>专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对象，并将对象引入存入 ServletContext 域中。</td></tr></tbody></table><h3 id="3-2、基于-XML-管理-Bean"><a href="#3-2、基于-XML-管理-Bean" class="headerlink" title="3.2、基于 XML 管理 Bean"></a>3.2、基于 XML 管理 Bean</h3><h4 id="3-2-1、搭建子模块-spring6-ioc-xml"><a href="#3-2-1、搭建子模块-spring6-ioc-xml" class="headerlink" title="3.2.1、搭建子模块 spring6-ioc-xml"></a>3.2.1、搭建子模块 spring6-ioc-xml</h4><p><strong>① 搭建模块</strong></p><p>搭建方式如：spring-first</p><p><strong>② 引入配置文件</strong></p><p>引入 spring-first 模块配置文件：beans.xml、log4j2.xml</p><p><strong>③ 添加依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--spring context依赖--&gt;</span><br>    <span class="hljs-comment">&lt;!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--junit5测试--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--log4j2的依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.19.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.19.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>④ 引入 java 类</strong></p><p>引入 spring-first 模块 java 及 test 目录下实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.bean;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HelloWorld</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;无参数构造方法执行&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;helloworld&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.bean;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorldTest</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(HelloWorldTest.class);<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHelloWorld</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-2、实验一：获取-bean"><a href="#3-2-2、实验一：获取-bean" class="headerlink" title="3.2.2、实验一：获取 bean"></a>3.2.2、实验一：获取 bean</h4><h5 id="①-方式一：根据-id-获取"><a href="#①-方式一：根据-id-获取" class="headerlink" title="① 方式一：根据 id 获取"></a>① 方式一：根据 id 获取</h5><p>由于 id 属性指定了 bean 的唯一标识，所以根据 bean 标签的 id 属性可以精确获取到一个组件对象。上个实验中我们使用的就是这种方式。</p><h5 id="②-方式二：根据类型获取"><a href="#②-方式二：根据类型获取" class="headerlink" title="② 方式二：根据类型获取"></a>② 方式二：根据类型获取</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHelloWorld1</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br>    <span class="hljs-type">HelloWorld</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> ac.getBean(HelloWorld.class);<br>    bean.sayHello();<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="③-方式三：根据-id-和类型"><a href="#③-方式三：根据-id-和类型" class="headerlink" title="③ 方式三：根据 id 和类型"></a>③ 方式三：根据 id 和类型</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHelloWorld2</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br>    <span class="hljs-type">HelloWorld</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> ac.getBean(<span class="hljs-string">&quot;helloworld&quot;</span>, HelloWorld.class);<br>    bean.sayHello();<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="④-注意的地方"><a href="#④-注意的地方" class="headerlink" title="④ 注意的地方"></a>④ 注意的地方</h5><p>当根据类型获取 bean 时，要求 IOC 容器中指定类型的 bean 有且只能有一个</p><p>当 IOC 容器中一共配置了两个：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;helloworldOne&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.bean.HelloWorld&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;helloworldTwo&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.bean.HelloWorld&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>根据类型获取时会抛出异常：</p><blockquote><p>org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type ‘com.atguigu.spring6.bean.HelloWorld’ available: expected single matching bean but found 2: helloworldOne,helloworldTwo</p></blockquote><h5 id="⑤-扩展知识"><a href="#⑤-扩展知识" class="headerlink" title="⑤ 扩展知识"></a>⑤ 扩展知识</h5><p>如果组件类实现了接口，根据接口类型可以获取 bean 吗？</p><blockquote><p>可以，前提是 bean 唯一</p></blockquote><p>如果一个接口有多个实现类，这些实现类都配置了 bean，根据接口类型可以获取 bean 吗？</p><blockquote><p>不行，因为 bean 不唯一</p></blockquote><p><strong>结论</strong></p><p>根据类型来获取 bean 时，在满足 bean 唯一性的前提下，其实只是看：『对象 <strong>instanceof</strong> 指定的类型』的返回结果，只要返回的是 true 就可以认定为和类型匹配，能够获取到。</p><p>java 中，instanceof 运算符用于判断前面的对象是否是后面的类，或其子类、实现类的实例。如果是返回 true，否则返回 false。也就是说：用 instanceof 关键字做判断时， instanceof 操作符的左右操作必须有继承或实现关系</p><h4 id="3-2-3、实验二：依赖注入之-setter-注入"><a href="#3-2-3、实验二：依赖注入之-setter-注入" class="headerlink" title="3.2.3、实验二：依赖注入之 setter 注入"></a>3.2.3、实验二：依赖注入之 setter 注入</h4><p><strong>① 创建学生类 Student</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.bean;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-keyword">private</span> String sex;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSex</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSex</span><span class="hljs-params">(String sex)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>② 配置 bean 时为属性赋值</strong></p><p>spring-di.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentOne&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- property标签：通过组件类的setXxx()方法给组件对象设置属性 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- name属性：指定属性名（这个属性名是getXxx()、setXxx()方法定义的，和成员变量无关） --&gt;</span><br>    <span class="hljs-comment">&lt;!-- value属性：指定属性值 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1001&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;张三&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;23&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;男&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>③ 测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDIBySet</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring-di.xml&quot;</span>);<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">studentOne</span> <span class="hljs-operator">=</span> ac.getBean(<span class="hljs-string">&quot;studentOne&quot;</span>, Student.class);<br>    System.out.println(studentOne);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-4、实验三：依赖注入之构造器注入"><a href="#3-2-4、实验三：依赖注入之构造器注入" class="headerlink" title="3.2.4、实验三：依赖注入之构造器注入"></a>3.2.4、实验三：依赖注入之构造器注入</h4><p><strong>① 在 Student 类中添加有参构造</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(Integer id, String name, Integer age, String sex)</span> &#123;<br>    <span class="hljs-built_in">this</span>.id = id;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sex = sex;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>② 配置 bean</strong></p><p>spring-di.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentTwo&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1002&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;李四&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;33&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：</p></blockquote><blockquote><p>constructor-arg 标签还有两个属性可以进一步描述构造器参数：</p></blockquote><blockquote><ul><li>index 属性：指定参数所在位置的索引（从 0 开始）</li><li>name 属性：指定参数名</li></ul></blockquote><p><strong>③ 测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDIByConstructor</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring-di.xml&quot;</span>);<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">studentOne</span> <span class="hljs-operator">=</span> ac.getBean(<span class="hljs-string">&quot;studentTwo&quot;</span>, Student.class);<br>    System.out.println(studentOne);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-5、实验四：特殊值处理"><a href="#3-2-5、实验四：特殊值处理" class="headerlink" title="3.2.5、实验四：特殊值处理"></a>3.2.5、实验四：特殊值处理</h4><h5 id="①-字面量赋值"><a href="#①-字面量赋值" class="headerlink" title="① 字面量赋值"></a>① 字面量赋值</h5><blockquote><p>什么是字面量？</p></blockquote><blockquote><p>int a &#x3D; 10;</p></blockquote><blockquote><p>声明一个变量 a，初始化为 10，此时 a 就不代表字母 a 了，而是作为一个变量的名字。当我们引用 a 的时候，我们实际上拿到的值是 10。</p></blockquote><blockquote><p>而如果 a 是带引号的：’a’，那么它现在不是一个变量，它就是代表 a 这个字母本身，这就是字面量。所以字面量没有引申含义，就是我们看到的这个数据本身。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 使用value属性给bean的属性赋值时，Spring会把value属性的值看做字面量 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;张三&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h5 id="②null-值"><a href="#②null-值" class="headerlink" title="②null 值"></a>②null 值</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">null</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：</p></blockquote><blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;null&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br>&gt; 以上写法，为name所赋的值是字符串null<br><br><br><br>##### ③xml实体<br><br>```xml<br><span class="hljs-comment">&lt;!-- 小于号在XML文档中用来定义标签的开始，不能随便使用 --&gt;</span><br><span class="hljs-comment">&lt;!-- 解决方案一：使用XML实体来代替 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;expression&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;a &lt; b&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h5 id="④CDATA-节"><a href="#④CDATA-节" class="headerlink" title="④CDATA 节"></a>④CDATA 节</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;expression&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 解决方案二：使用CDATA节 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- CDATA中的C代表Character，是文本、字符的含义，CDATA就表示纯文本数据 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- XML解析器看到CDATA节就知道这里是纯文本，就不会当作XML标签或属性来解析 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 所以CDATA节中写什么符号都随意 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&lt;![CDATA[a &lt; b]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-2-6、实验五：为对象类型属性赋值"><a href="#3-2-6、实验五：为对象类型属性赋值" class="headerlink" title="3.2.6、实验五：为对象类型属性赋值"></a>3.2.6、实验五：为对象类型属性赋值</h4><p><strong>① 创建班级类 Clazz</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.bean<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Clazz</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer clazzId;<br><br>    <span class="hljs-keyword">private</span> String clazzName;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getClazzId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> clazzId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setClazzId</span><span class="hljs-params">(Integer clazzId)</span> &#123;<br>        <span class="hljs-built_in">this</span>.clazzId = clazzId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getClazzName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> clazzName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setClazzName</span><span class="hljs-params">(String clazzName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.clazzName = clazzName;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Clazz&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;clazzId=&quot;</span> + clazzId +<br>                <span class="hljs-string">&quot;, clazzName=&#x27;&quot;</span> + clazzName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Clazz</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Clazz</span><span class="hljs-params">(Integer clazzId, String clazzName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.clazzId = clazzId;<br>        <span class="hljs-built_in">this</span>.clazzName = clazzName;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>② 修改 Student 类</strong></p><p>在 Student 类中添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Clazz clazz;<br><br><span class="hljs-keyword">public</span> Clazz <span class="hljs-title function_">getClazz</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> clazz;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setClazz</span><span class="hljs-params">(Clazz clazz)</span> &#123;<br><span class="hljs-built_in">this</span>.clazz = clazz;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="方式一：引用外部-bean"><a href="#方式一：引用外部-bean" class="headerlink" title="方式一：引用外部 bean"></a>方式一：引用外部 bean</h5><p>配置 Clazz 类型的 bean：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;clazzOne&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.bean.Clazz&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazzId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1111&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazzName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;财源滚滚班&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>为 Student 中的 clazz 属性赋值：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentFour&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1004&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;赵六&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;26&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazz&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;clazzOne&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>错误演示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentFour&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1004&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;赵六&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;26&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazz&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;clazzOne&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>如果错把 ref 属性写成了 value 属性，会抛出异常： Caused by: java.lang.IllegalStateException: Cannot convert value of type ‘java.lang.String’ to required type ‘com.atguigu.spring6.bean.Clazz’ for property ‘clazz’: no matching editors or conversion strategy found</p></blockquote><blockquote><p>意思是不能把 String 类型转换成我们要的 Clazz 类型，说明我们使用 value 属性时，Spring 只把这个属性看做一个普通的字符串，不会认为这是一个 bean 的 id，更不会根据它去找到 bean 来赋值</p></blockquote><h5 id="方式二：内部-bean"><a href="#方式二：内部-bean" class="headerlink" title="方式二：内部 bean"></a>方式二：内部 bean</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentFour&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1004&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;赵六&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;26&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazz&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 在一个bean中再声明一个bean就是内部bean --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 内部bean只能用于给属性赋值，不能在外部通过IOC容器获取，因此可以省略id属性 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;clazzInner&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.bean.Clazz&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazzId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2222&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazzName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;远大前程班&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="方式三：级联属性赋值"><a href="#方式三：级联属性赋值" class="headerlink" title="方式三：级联属性赋值"></a>方式三：级联属性赋值</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentFour&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1004&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;赵六&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;26&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazz&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;clazzOne&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazz.clazzId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3333&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazz.clazzName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;最强王者班&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-2-7、实验六：为数组类型属性赋值"><a href="#3-2-7、实验六：为数组类型属性赋值" class="headerlink" title="3.2.7、实验六：为数组类型属性赋值"></a>3.2.7、实验六：为数组类型属性赋值</h4><p><strong>① 修改 Student 类</strong></p><p>在 Student 类中添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> String[] hobbies;<br><br><span class="hljs-keyword">public</span> String[] getHobbies() &#123;<br>    <span class="hljs-keyword">return</span> hobbies;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHobbies</span><span class="hljs-params">(String[] hobbies)</span> &#123;<br>    <span class="hljs-built_in">this</span>.hobbies = hobbies;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>② 配置 bean</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentFour&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring.bean6.Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1004&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;赵六&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;26&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazz&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;clazzOne&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobbies&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>抽烟<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>喝酒<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>烫头<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-2-8、实验七：为集合类型属性赋值"><a href="#3-2-8、实验七：为集合类型属性赋值" class="headerlink" title="3.2.8、实验七：为集合类型属性赋值"></a>3.2.8、实验七：为集合类型属性赋值</h4><h5 id="①-为-List-集合类型属性赋值"><a href="#①-为-List-集合类型属性赋值" class="headerlink" title="① 为 List 集合类型属性赋值"></a>① 为 List 集合类型属性赋值</h5><p>在 Clazz 类中添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> List&lt;Student&gt; students;<br><br><span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title function_">getStudents</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> students;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStudents</span><span class="hljs-params">(List&lt;Student&gt; students)</span> &#123;<br>    <span class="hljs-built_in">this</span>.students = students;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置 bean：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;clazzTwo&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.bean.Clazz&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazzId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;4444&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazzName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Javaee0222&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;students&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;studentOne&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;studentTwo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;studentThree&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>若为 Set 集合类型属性赋值，只需要将其中的 list 标签改为 set 标签即可</p></blockquote><h5 id="②-为-Map-集合类型属性赋值"><a href="#②-为-Map-集合类型属性赋值" class="headerlink" title="② 为 Map 集合类型属性赋值"></a>② 为 Map 集合类型属性赋值</h5><p>创建教师类 Teacher：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.bean;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer teacherId;<br><br>    <span class="hljs-keyword">private</span> String teacherName;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getTeacherId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> teacherId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTeacherId</span><span class="hljs-params">(Integer teacherId)</span> &#123;<br>        <span class="hljs-built_in">this</span>.teacherId = teacherId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getTeacherName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> teacherName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTeacherName</span><span class="hljs-params">(String teacherName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.teacherName = teacherName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Teacher</span><span class="hljs-params">(Integer teacherId, String teacherName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.teacherId = teacherId;<br>        <span class="hljs-built_in">this</span>.teacherName = teacherName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Teacher</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Teacher&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;teacherId=&quot;</span> + teacherId +<br>                <span class="hljs-string">&quot;, teacherName=&#x27;&quot;</span> + teacherName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 Student 类中添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Map&lt;String, Teacher&gt; teacherMap;<br><br><span class="hljs-keyword">public</span> Map&lt;String, Teacher&gt; <span class="hljs-title function_">getTeacherMap</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> teacherMap;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTeacherMap</span><span class="hljs-params">(Map&lt;String, Teacher&gt; teacherMap)</span> &#123;<br>    <span class="hljs-built_in">this</span>.teacherMap = teacherMap;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置 bean：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;teacherOne&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.bean.Teacher&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10010&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;大宝&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;teacherTwo&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.bean.Teacher&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10086&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;二宝&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentFour&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1004&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;赵六&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;26&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazz&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;clazzOne&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobbies&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>抽烟<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>喝酒<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>烫头<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherMap&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>10010<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;teacherOne&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>10086<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;teacherTwo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="③-引用集合类型的-bean"><a href="#③-引用集合类型的-bean" class="headerlink" title="③ 引用集合类型的 bean"></a>③ 引用集合类型的 bean</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--list集合类型的bean--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">util:list</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;students&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;studentOne&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;studentTwo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;studentThree&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">util:list</span>&gt;</span><br><span class="hljs-comment">&lt;!--map集合类型的bean--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">util:map</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;teacherMap&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>10010<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;teacherOne&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>10086<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;teacherTwo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">util:map</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;clazzTwo&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.bean.Clazz&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazzId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;4444&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazzName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Javaee0222&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;students&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;students&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentFour&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1004&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;赵六&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;26&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazz&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;clazzOne&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobbies&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>抽烟<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>喝酒<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>烫头<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherMap&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;teacherMap&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>使用 util:list、util:map 标签必须引入相应的命名空间</p></blockquote><blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br></code></pre></td></tr></table></figure></blockquote><?xml version="1.0" encoding="UTF-8"?><p><beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:util="http://www.springframework.org/schema/util"       xsi:schemaLocation="http://www.springframework.org/schema/util       http://www.springframework.org/schema/util/spring-util.xsd       http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><br><br>#### 3.2.9、实验八：p命名空间<br><br>引入p命名空间<br><br>```xml<br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:util</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/util&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/util</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/util/spring-util.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>引入 p 命名空间后，可以通过以下方式为 bean 的各个属性赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentSix&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.bean.Student&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">p:id</span>=<span class="hljs-string">&quot;1006&quot;</span> <span class="hljs-attr">p:name</span>=<span class="hljs-string">&quot;小明&quot;</span> <span class="hljs-attr">p:clazz-ref</span>=<span class="hljs-string">&quot;clazzOne&quot;</span> <span class="hljs-attr">p:teacherMap-ref</span>=<span class="hljs-string">&quot;teacherMap&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-2-10、实验九：引入外部属性文件"><a href="#3-2-10、实验九：引入外部属性文件" class="headerlink" title="3.2.10、实验九：引入外部属性文件"></a>3.2.10、实验九：引入外部属性文件</h4><p><strong>① 加入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 数据源 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.15<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>② 创建外部属性文件</strong></p><p><img src="/images/spring6/img010.png#alt=images"></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">jdbc.user</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">jdbc.password</span>=<span class="hljs-string">atguigu</span><br><span class="hljs-attr">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC</span><br><span class="hljs-attr">jdbc.driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br></code></pre></td></tr></table></figure><p><strong>③ 引入属性文件</strong></p><p>引入 context 名称空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 引入外部属性文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>注意：在使用 <a href="">context:property-placeholder</a> 元素加载外包配置文件功能前，首先需要在 XML 配置的一级标签   中添加 context 相关的约束。</p><p><strong>④ 配置 bean</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>⑤ 测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDataSource</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring-datasource.xml&quot;</span>);<br>    <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> ac.getBean(DataSource.class);<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br>    System.out.println(connection);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-11、实验十：bean-的作用域"><a href="#3-2-11、实验十：bean-的作用域" class="headerlink" title="3.2.11、实验十：bean 的作用域"></a>3.2.11、实验十：bean 的作用域</h4><p><strong>① 概念</strong></p><p>在 Spring 中可以通过配置 bean 标签的 scope 属性来指定 bean 的作用域范围，各取值含义参加下表：</p><table><thead><tr><th>取值</th><th>含义</th><th>创建对象的时机</th></tr></thead><tbody><tr><td>singleton（默认）</td><td>在 IOC 容器中，这个 bean 的对象始终为单实例</td><td>IOC 容器初始化时</td></tr><tr><td>prototype</td><td>这个 bean 在 IOC 容器中有多个实例</td><td>获取 bean 时</td></tr></tbody></table><p>如果是在 WebApplicationContext 环境下还会有另外几个作用域（但不常用）：</p><table><thead><tr><th>取值</th><th>含义</th></tr></thead><tbody><tr><td>request</td><td>在一个请求范围内有效</td></tr><tr><td>session</td><td>在一个会话范围内有效</td></tr></tbody></table><p><strong>② 创建类 User</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.bean;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(Integer id, String username, String password, Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.username = username;<br>        <span class="hljs-built_in">this</span>.password = password;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>③ 配置 bean</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- scope属性：取值singleton（默认值），bean在IOC容器中只有一个实例，IOC容器初始化时创建对象 --&gt;</span><br><span class="hljs-comment">&lt;!-- scope属性：取值prototype，bean在IOC容器中可以有多个实例，getBean()时创建对象 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.bean.User&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>④ 测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBeanScope</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring-scope.xml&quot;</span>);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> ac.getBean(User.class);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> ac.getBean(User.class);<br>    System.out.println(user1==user2);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-12、实验十一：bean-生命周期"><a href="#3-2-12、实验十一：bean-生命周期" class="headerlink" title="3.2.12、实验十一：bean 生命周期"></a>3.2.12、实验十一：bean 生命周期</h4><p><strong>① 具体的生命周期过程</strong></p><ul><li><p>bean 对象创建（调用无参构造器）</p></li><li><p>给 bean 对象设置属性</p></li><li><p>bean 的后置处理器（初始化之前）</p></li><li><p>bean 对象初始化（需在配置 bean 时指定初始化方法）</p></li><li><p>bean 的后置处理器（初始化之后）</p></li><li><p>bean 对象就绪可以使用</p></li><li><p>bean 对象销毁（需在配置 bean 时指定销毁方法）</p></li><li><p>IOC 容器关闭</p></li></ul><p><strong>② 修改类 User</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;生命周期：1、创建对象&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(Integer id, String username, String password, Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.username = username;<br>        <span class="hljs-built_in">this</span>.password = password;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;生命周期：2、依赖注入&quot;</span>);<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initMethod</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;生命周期：3、初始化&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroyMethod</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;生命周期：5、销毁&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意其中的 initMethod()和 destroyMethod()，可以通过配置 bean 指定为初始化和销毁的方法</p></blockquote><p><strong>③ 配置 bean</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 使用init-method属性指定初始化方法 --&gt;</span><br><span class="hljs-comment">&lt;!-- 使用destroy-method属性指定销毁方法 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.bean.User&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;initMethod&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;destroyMethod&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1001&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;admin&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;23&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>④ 测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLife</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring-lifecycle.xml&quot;</span>);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> ac.getBean(User.class);<br>    System.out.println(<span class="hljs-string">&quot;生命周期：4、通过IOC容器获取bean并使用&quot;</span>);<br>    ac.close();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>⑤bean 的后置处理器</strong></p><p>bean 的后置处理器会在生命周期的初始化前后添加额外的操作，需要实现 BeanPostProcessor 接口，且配置到 IOC 容器中，需要注意的是，bean 后置处理器不是单独针对某一个 bean 生效，而是针对 IOC 容器中所有 bean 都会执行</p><p>创建 bean 的后置处理器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.process;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.BeansException;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBeanProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanPostProcessor</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        System.out.println(<span class="hljs-string">&quot;☆☆☆&quot;</span> + beanName + <span class="hljs-string">&quot; = &quot;</span> + bean);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessAfterInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        System.out.println(<span class="hljs-string">&quot;★★★&quot;</span> + beanName + <span class="hljs-string">&quot; = &quot;</span> + bean);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 IOC 容器中配置后置处理器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- bean的后置处理器要放入IOC容器才能生效 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myBeanProcessor&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.process.MyBeanProcessor&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-2-13、实验十二：FactoryBean"><a href="#3-2-13、实验十二：FactoryBean" class="headerlink" title="3.2.13、实验十二：FactoryBean"></a>3.2.13、实验十二：FactoryBean</h4><p><strong>① 简介</strong></p><p>FactoryBean 是 Spring 提供的一种整合第三方框架的常用机制。和普通的 bean 不同，配置一个 FactoryBean 类型的 bean，在获取 bean 的时候得到的并不是 class 属性中配置的这个类的对象，而是 getObject()方法的返回值。通过这种机制，Spring 可以帮我们把复杂组件创建的详细过程和繁琐细节都屏蔽起来，只把最简洁的使用界面展示给我们。</p><p>将来我们整合 Mybatis 时，Spring 就是通过 FactoryBean 机制来帮我们创建 SqlSessionFactory 对象的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Copyright 2002-2020 the original author or authors.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="hljs-comment"> * you may not use this file except in compliance with the License.</span><br><span class="hljs-comment"> * You may obtain a copy of the License at</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *      https://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment"> * See the License for the specific language governing permissions and</span><br><span class="hljs-comment"> * limitations under the License.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">package</span> org.springframework.beans.factory;<br><br><span class="hljs-keyword">import</span> org.springframework.lang.Nullable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Interface to be implemented by objects used within a &#123;<span class="hljs-doctag">@link</span> BeanFactory&#125; which</span><br><span class="hljs-comment"> * are themselves factories for individual objects. If a bean implements this</span><br><span class="hljs-comment"> * interface, it is used as a factory for an object to expose, not directly as a</span><br><span class="hljs-comment"> * bean instance that will be exposed itself.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;&lt;b&gt;NB: A bean that implements this interface cannot be used as a normal bean.&lt;/b&gt;</span><br><span class="hljs-comment"> * A FactoryBean is defined in a bean style, but the object exposed for bean</span><br><span class="hljs-comment"> * references (&#123;<span class="hljs-doctag">@link</span> #getObject()&#125;) is always the object that it creates.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;FactoryBeans can support singletons and prototypes, and can either create</span><br><span class="hljs-comment"> * objects lazily on demand or eagerly on startup. The &#123;<span class="hljs-doctag">@link</span> SmartFactoryBean&#125;</span><br><span class="hljs-comment"> * interface allows for exposing more fine-grained behavioral metadata.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;This interface is heavily used within the framework itself, for example for</span><br><span class="hljs-comment"> * the AOP &#123;<span class="hljs-doctag">@link</span> org.springframework.aop.framework.ProxyFactoryBean&#125; or the</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> org.springframework.jndi.JndiObjectFactoryBean&#125;. It can be used for</span><br><span class="hljs-comment"> * custom components as well; however, this is only common for infrastructure code.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;&lt;b&gt;&#123;<span class="hljs-doctag">@code</span> FactoryBean&#125; is a programmatic contract. Implementations are not</span><br><span class="hljs-comment"> * supposed to rely on annotation-driven injection or other reflective facilities.&lt;/b&gt;</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> #getObjectType()&#125; &#123;<span class="hljs-doctag">@link</span> #getObject()&#125; invocations may arrive early in the</span><br><span class="hljs-comment"> * bootstrap process, even ahead of any post-processor setup. If you need access to</span><br><span class="hljs-comment"> * other beans, implement &#123;<span class="hljs-doctag">@link</span> BeanFactoryAware&#125; and obtain them programmatically.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;&lt;b&gt;The container is only responsible for managing the lifecycle of the FactoryBean</span><br><span class="hljs-comment"> * instance, not the lifecycle of the objects created by the FactoryBean.&lt;/b&gt; Therefore,</span><br><span class="hljs-comment"> * a destroy method on an exposed bean object (such as &#123;<span class="hljs-doctag">@link</span> java.io.Closeable#close()&#125;</span><br><span class="hljs-comment"> * will &lt;i&gt;not&lt;/i&gt; be called automatically. Instead, a FactoryBean should implement</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> DisposableBean&#125; and delegate any such close call to the underlying object.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;Finally, FactoryBean objects participate in the containing BeanFactory&#x27;s</span><br><span class="hljs-comment"> * synchronization of bean creation. There is usually no need for internal</span><br><span class="hljs-comment"> * synchronization other than for purposes of lazy initialization within the</span><br><span class="hljs-comment"> * FactoryBean itself (or the like).</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Rod Johnson</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Juergen Hoeller</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 08.03.2003</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt; the bean type</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> org.springframework.beans.factory.BeanFactory</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> org.springframework.aop.framework.ProxyFactoryBean</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> org.springframework.jndi.JndiObjectFactoryBean</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">FactoryBean</span>&lt;T&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The name of an attribute that can be</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> org.springframework.core.AttributeAccessor#setAttribute set&#125; on a</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> org.springframework.beans.factory.config.BeanDefinition&#125; so that</span><br><span class="hljs-comment">     * factory beans can signal their object type when it can&#x27;t be deduced from</span><br><span class="hljs-comment">     * the factory bean class.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 5.2</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">OBJECT_TYPE_ATTRIBUTE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;factoryBeanObjectType&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Return an instance (possibly shared or independent) of the object</span><br><span class="hljs-comment">     * managed by this factory.</span><br><span class="hljs-comment">     * &lt;p&gt;As with a &#123;<span class="hljs-doctag">@link</span> BeanFactory&#125;, this allows support for both the</span><br><span class="hljs-comment">     * Singleton and Prototype design pattern.</span><br><span class="hljs-comment">     * &lt;p&gt;If this FactoryBean is not fully initialized yet at the time of</span><br><span class="hljs-comment">     * the call (for example because it is involved in a circular reference),</span><br><span class="hljs-comment">     * throw a corresponding &#123;<span class="hljs-doctag">@link</span> FactoryBeanNotInitializedException&#125;.</span><br><span class="hljs-comment">     * &lt;p&gt;As of Spring 2.0, FactoryBeans are allowed to return &#123;<span class="hljs-doctag">@code</span> null&#125;</span><br><span class="hljs-comment">     * objects. The factory will consider this as normal value to be used; it</span><br><span class="hljs-comment">     * will not throw a FactoryBeanNotInitializedException in this case anymore.</span><br><span class="hljs-comment">     * FactoryBean implementations are encouraged to throw</span><br><span class="hljs-comment">     * FactoryBeanNotInitializedException themselves now, as appropriate.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> an instance of the bean (can be &#123;<span class="hljs-doctag">@code</span> null&#125;)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception in case of creation errors</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> FactoryBeanNotInitializedException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Nullable</span><br>    T <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Return the type of object that this FactoryBean creates,</span><br><span class="hljs-comment">     * or &#123;<span class="hljs-doctag">@code</span> null&#125; if not known in advance.</span><br><span class="hljs-comment">     * &lt;p&gt;This allows one to check for specific types of beans without</span><br><span class="hljs-comment">     * instantiating objects, for example on autowiring.</span><br><span class="hljs-comment">     * &lt;p&gt;In the case of implementations that are creating a singleton object,</span><br><span class="hljs-comment">     * this method should try to avoid singleton creation as far as possible;</span><br><span class="hljs-comment">     * it should rather estimate the type in advance.</span><br><span class="hljs-comment">     * For prototypes, returning a meaningful type here is advisable too.</span><br><span class="hljs-comment">     * &lt;p&gt;This method can be called &lt;i&gt;before&lt;/i&gt; this FactoryBean has</span><br><span class="hljs-comment">     * been fully initialized. It must not rely on state created during</span><br><span class="hljs-comment">     * initialization; of course, it can still use such state if available.</span><br><span class="hljs-comment">     * &lt;p&gt;&lt;b&gt;<span class="hljs-doctag">NOTE:</span>&lt;/b&gt; Autowiring will simply ignore FactoryBeans that return</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> null&#125; here. Therefore it is highly recommended to implement</span><br><span class="hljs-comment">     * this method properly, using the current state of the FactoryBean.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the type of object that this FactoryBean creates,</span><br><span class="hljs-comment">     * or &#123;<span class="hljs-doctag">@code</span> null&#125; if not known at the time of the call</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> ListableBeanFactory#getBeansOfType</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Nullable</span><br>    Class&lt;?&gt; getObjectType();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Is the object managed by this factory a singleton? That is,</span><br><span class="hljs-comment">     * will &#123;<span class="hljs-doctag">@link</span> #getObject()&#125; always return the same object</span><br><span class="hljs-comment">     * (a reference that can be cached)?</span><br><span class="hljs-comment">     * &lt;p&gt;&lt;b&gt;<span class="hljs-doctag">NOTE:</span>&lt;/b&gt; If a FactoryBean indicates to hold a singleton object,</span><br><span class="hljs-comment">     * the object returned from &#123;<span class="hljs-doctag">@code</span> getObject()&#125; might get cached</span><br><span class="hljs-comment">     * by the owning BeanFactory. Hence, do not return &#123;<span class="hljs-doctag">@code</span> true&#125;</span><br><span class="hljs-comment">     * unless the FactoryBean always exposes the same reference.</span><br><span class="hljs-comment">     * &lt;p&gt;The singleton status of the FactoryBean itself will generally</span><br><span class="hljs-comment">     * be provided by the owning BeanFactory; usually, it has to be</span><br><span class="hljs-comment">     * defined as singleton there.</span><br><span class="hljs-comment">     * &lt;p&gt;&lt;b&gt;<span class="hljs-doctag">NOTE:</span>&lt;/b&gt; This method returning &#123;<span class="hljs-doctag">@code</span> false&#125; does not</span><br><span class="hljs-comment">     * necessarily indicate that returned objects are independent instances.</span><br><span class="hljs-comment">     * An implementation of the extended &#123;<span class="hljs-doctag">@link</span> SmartFactoryBean&#125; interface</span><br><span class="hljs-comment">     * may explicitly indicate independent instances through its</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> SmartFactoryBean#isPrototype()&#125; method. Plain &#123;<span class="hljs-doctag">@link</span> FactoryBean&#125;</span><br><span class="hljs-comment">     * implementations which do not implement this extended interface are</span><br><span class="hljs-comment">     * simply assumed to always return independent instances if the</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> isSingleton()&#125; implementation returns &#123;<span class="hljs-doctag">@code</span> false&#125;.</span><br><span class="hljs-comment">     * &lt;p&gt;The default implementation returns &#123;<span class="hljs-doctag">@code</span> true&#125;, since a</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> FactoryBean&#125; typically manages a singleton instance.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> whether the exposed object is a singleton</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> #getObject()</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> SmartFactoryBean#isPrototype()</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">default</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSingleton</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>② 创建类 UserFactoryBean</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.bean;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserFactoryBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;User&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class="hljs-keyword">return</span> User.class;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>③ 配置 bean</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.bean.UserFactoryBean&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>④ 测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUserFactoryBean</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//获取IOC容器</span><br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring-factorybean.xml&quot;</span>);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) ac.getBean(<span class="hljs-string">&quot;user&quot;</span>);<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-14、实验十三：基于-xml-自动装配"><a href="#3-2-14、实验十三：基于-xml-自动装配" class="headerlink" title="3.2.14、实验十三：基于 xml 自动装配"></a>3.2.14、实验十三：基于 xml 自动装配</h4><blockquote><p>自动装配：</p></blockquote><blockquote><p>根据指定的策略，在 IOC 容器中匹配某一个 bean，自动为指定的 bean 中所依赖的类类型或接口类型属性赋值</p></blockquote><p><strong>① 场景模拟</strong></p><p>创建类 UserController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.autowire.controller<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserService</span><span class="hljs-params">(UserService userService)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userService = userService;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">()</span>&#123;<br>        userService.saveUser();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>创建接口 UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.autowire.service<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>创建类 UserServiceImpl 实现接口 UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.autowire.service.impl<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">()</span> &#123;<br>        userDao.saveUser();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>创建接口 UserDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.autowire.dao<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>创建类 UserDaoImpl 实现接口 UserDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.autowire.dao.impl<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;保存成功&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>② 配置 bean</strong></p><blockquote><p>使用 bean 标签的 autowire 属性设置自动装配效果</p></blockquote><blockquote><p>自动装配方式：byType</p></blockquote><blockquote><p>byType：根据类型匹配 IOC 容器中的某个兼容类型的 bean，为属性自动赋值</p></blockquote><blockquote><p>若在 IOC 中，没有任何一个兼容类型的 bean 能够为属性赋值，则该属性不装配，即值为默认值 null</p></blockquote><blockquote><p>若在 IOC 中，有多个兼容类型的 bean 能够为属性赋值，则抛出异常 NoUniqueBeanDefinitionException</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userController&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.autowire.controller.UserController&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.autowire.service.impl.UserServiceImpl&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.autowire.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>自动装配方式：byName</p></blockquote><blockquote><p>byName：将自动装配的属性的属性名，作为 bean 的 id 在 IOC 容器中匹配相对应的 bean 进行赋值</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userController&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.autowire.controller.UserController&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.autowire.service.impl.UserServiceImpl&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userServiceImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.autowire.service.impl.UserServiceImpl&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.autowire.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDaoImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.autowire.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>③ 测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAutoWireByXML</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;autowire-xml.xml&quot;</span>);<br>    <span class="hljs-type">UserController</span> <span class="hljs-variable">userController</span> <span class="hljs-operator">=</span> ac.getBean(UserController.class);<br>    userController.saveUser();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3、基于注解管理-Bean（☆）"><a href="#3-3、基于注解管理-Bean（☆）" class="headerlink" title="3.3、基于注解管理 Bean（☆）"></a>3.3、基于注解管理 Bean（☆）</h3><p>从 Java 5 开始，Java 增加了对注解（Annotation）的支持，它是代码中的一种特殊标记，可以在编译、类加载和运行时被读取，执行相应的处理。开发人员可以通过注解在不改变原有代码和逻辑的情况下，在源代码中嵌入补充信息。</p><p>Spring 从 2.5 版本开始提供了对注解技术的全面支持，我们可以使用注解来实现自动装配，简化 Spring 的 XML 配置。</p><p>Spring 通过注解实现自动装配的步骤如下：</p><ol><li>引入依赖</li><li>开启组件扫描</li><li>使用注解定义 Bean</li><li>依赖注入</li></ol><h4 id="3-3-1、搭建子模块-spring6-ioc-annotation"><a href="#3-3-1、搭建子模块-spring6-ioc-annotation" class="headerlink" title="3.3.1、搭建子模块 spring6-ioc-annotation"></a>3.3.1、搭建子模块 spring6-ioc-annotation</h4><p><strong>① 搭建模块</strong></p><p>搭建方式如：spring6-ioc-xml</p><p><strong>② 引入配置文件</strong></p><p>引入 spring-ioc-xml 模块日志 log4j2.xml</p><p><strong>③ 添加依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--spring context依赖--&gt;</span><br>    <span class="hljs-comment">&lt;!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--junit5测试--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--log4j2的依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.19.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.19.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-3-2、开启组件扫描"><a href="#3-3-2、开启组件扫描" class="headerlink" title="3.3.2、开启组件扫描"></a>3.3.2、开启组件扫描</h4><p>Spring 默认不使用注解装配 Bean，因此我们需要在 Spring 的 XML 配置中，通过 <a href="">context:component-scan</a> 元素开启 Spring Beans 的自动扫描功能。开启此功能后，Spring 会自动从扫描指定的包（base-package 属性设置）及其子包下的所有类，如果类上使用了 <a href="/Component">@Component </a> 注解，就将该类装配到容器中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">    http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--开启组件扫描功能--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.spring6&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：在使用 <a href="">context:component-scan</a> 元素开启自动扫描功能前，首先需要在 XML 配置的一级标签   中添加 context 相关的约束。</p><p><strong>情况一：最基本的扫描方式</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.spring6&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>情况二：指定要排除的组件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.spring6&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- context:exclude-filter标签：指定排除规则 --&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment"> type：设置排除或包含的依据</span><br><span class="hljs-comment">type=&quot;annotation&quot;，根据注解排除，expression中设置要排除的注解的全类名</span><br><span class="hljs-comment">type=&quot;assignable&quot;，根据类型排除，expression中设置要排除的类型的全类名</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;context:exclude-filter type=&quot;assignable&quot; expression=&quot;com.atguigu.spring6.controller.UserController&quot;/&gt;--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>情况三：仅扫描指定组件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu&quot;</span> <span class="hljs-attr">use-default-filters</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- context:include-filter标签：指定在原有扫描规则的基础上追加的规则 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- use-default-filters属性：取值false表示关闭默认扫描规则 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 此时必须设置use-default-filters=&quot;false&quot;，因为默认规则即扫描指定包下所有类 --&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment"> type：设置排除或包含的依据</span><br><span class="hljs-comment">type=&quot;annotation&quot;，根据注解排除，expression中设置要排除的注解的全类名</span><br><span class="hljs-comment">type=&quot;assignable&quot;，根据类型排除，expression中设置要排除的类型的全类名</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:include-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--&lt;context:include-filter type=&quot;assignable&quot; expression=&quot;com.atguigu.spring6.controller.UserController&quot;/&gt;--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-3-3、使用注解定义-Bean"><a href="#3-3-3、使用注解定义-Bean" class="headerlink" title="3.3.3、使用注解定义 Bean"></a>3.3.3、使用注解定义 Bean</h4><p>Spring 提供了以下多个注解，这些注解可以直接标注在 Java 类上，将它们定义成 Spring Bean。</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td><a href="/Component">@Component </a></td><td>该注解用于描述 Spring 中的 Bean，它是一个泛化的概念，仅仅表示容器中的一个组件（Bean），并且可以作用在应用的任何层次，例如 Service 层、Dao 层等。   使用时只需将该注解标注在相应类上即可。</td></tr><tr><td><a href="/Repository">@Repository </a></td><td>该注解用于将数据访问层（Dao 层）的类标识为 Spring 中的 Bean，其功能与 <a href="/Component">@Component </a> 相同。</td></tr><tr><td><a href="/Service">@Service </a></td><td>该注解通常作用在业务层（Service 层），用于将业务层的类标识为 Spring 中的 Bean，其功能与 <a href="/Component">@Component </a> 相同。</td></tr><tr><td><a href="/Controller">@Controller </a></td><td>该注解通常作用在控制层（如 SpringMVC 的 Controller），用于将控制层的类标识为 Spring 中的 Bean，其功能与 <a href="/Component">@Component </a> 相同。</td></tr></tbody></table><h4 id="3-3-4、实验一：-Autowired-注入"><a href="#3-3-4、实验一：-Autowired-注入" class="headerlink" title="3.3.4、实验一：@Autowired 注入"></a>3.3.4、实验一：@Autowired 注入</h4><p>单独使用@Autowired 注解，<strong>默认根据类型装配</strong>。【默认是 byType】</p><p>查看源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.beans.factory.annotation;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.Documented;<br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-meta">@Target(&#123;ElementType.CONSTRUCTOR, ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD, ElementType.ANNOTATION_TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Autowired &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">required</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>源码中有两处需要注意：</p><ul><li><p>第一处：该注解可以标注在哪里？</p></li><li><ul><li>构造方法上</li><li>方法上</li><li>形参上</li><li>属性上</li><li>注解上</li></ul></li><li><p>第二处：该注解有一个 required 属性，默认值是 true，表示在注入的时候要求被注入的 Bean 必须是存在的，如果不存在则报错。如果 required 属性设置为 false，表示注入的 Bean 存在或者不存在都没关系，存在的话就注入，不存在的话，也不报错。</p></li></ul><h5 id="①-场景一：属性注入"><a href="#①-场景一：属性注入" class="headerlink" title="① 场景一：属性注入"></a>① 场景一：属性注入</h5><p>创建 UserDao 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.dao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建 UserDaoImpl 实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.dao.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.spring6.dao.UserDao;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Dao层执行结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建 UserService 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建 UserServiceImpl 实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.service.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.spring6.dao.UserDao;<br><span class="hljs-keyword">import</span> com.atguigu.spring6.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span> &#123;<br>        userDao.print();<br>        System.out.println(<span class="hljs-string">&quot;Service层执行结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建 UserController 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.controller;<br><br><span class="hljs-keyword">import</span> com.atguigu.spring6.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span> &#123;<br>        userService.out();<br>        System.out.println(<span class="hljs-string">&quot;Controller层执行结束。&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试一</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.bean;<br><br><span class="hljs-keyword">import</span> com.atguigu.spring6.controller.UserController;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserTest</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(UserTest.class);<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAnnotation</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;Beans.xml&quot;</span>);<br>        <span class="hljs-type">UserController</span> <span class="hljs-variable">userController</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;userController&quot;</span>, UserController.class);<br>        userController.out();<br>        logger.info(<span class="hljs-string">&quot;执行成功&quot;</span>);<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试结果：</p><p><img src="/images/spring6/image-20221101153556681.png#alt=image-20221101153556681"></p><p>以上构造方法和 setter 方法都没有提供，经过测试，仍然可以注入成功。</p><h5 id="②-场景二：set-注入"><a href="#②-场景二：set-注入" class="headerlink" title="② 场景二：set 注入"></a>② 场景二：set 注入</h5><p>修改 UserServiceImpl 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.service.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.spring6.dao.UserDao;<br><span class="hljs-keyword">import</span> com.atguigu.spring6.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span> &#123;<br>        userDao.print();<br>        System.out.println(<span class="hljs-string">&quot;Service层执行结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改 UserController 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.controller;<br><br><span class="hljs-keyword">import</span> com.atguigu.spring6.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserService</span><span class="hljs-params">(UserService userService)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userService = userService;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span> &#123;<br>        userService.out();<br>        System.out.println(<span class="hljs-string">&quot;Controller层执行结束。&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试：成功调用</p><h5 id="③-场景三：构造方法注入"><a href="#③-场景三：构造方法注入" class="headerlink" title="③ 场景三：构造方法注入"></a>③ 场景三：构造方法注入</h5><p>修改 UserServiceImpl 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.service.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.spring6.dao.UserDao;<br><span class="hljs-keyword">import</span> com.atguigu.spring6.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserServiceImpl</span><span class="hljs-params">(UserDao userDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span> &#123;<br>        userDao.print();<br>        System.out.println(<span class="hljs-string">&quot;Service层执行结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改 UserController 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.controller;<br><br><span class="hljs-keyword">import</span> com.atguigu.spring6.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserController</span><span class="hljs-params">(UserService userService)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userService = userService;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span> &#123;<br>        userService.out();<br>        System.out.println(<span class="hljs-string">&quot;Controller层执行结束。&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试：成功调用</p><h5 id="④-场景四：形参上注入"><a href="#④-场景四：形参上注入" class="headerlink" title="④ 场景四：形参上注入"></a>④ 场景四：形参上注入</h5><p>修改 UserServiceImpl 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.service.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.spring6.dao.UserDao;<br><span class="hljs-keyword">import</span> com.atguigu.spring6.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserServiceImpl</span><span class="hljs-params">(<span class="hljs-meta">@Autowired</span> UserDao userDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span> &#123;<br>        userDao.print();<br>        System.out.println(<span class="hljs-string">&quot;Service层执行结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改 UserController 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.controller;<br><br><span class="hljs-keyword">import</span> com.atguigu.spring6.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserController</span><span class="hljs-params">(<span class="hljs-meta">@Autowired</span> UserService userService)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userService = userService;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span> &#123;<br>        userService.out();<br>        System.out.println(<span class="hljs-string">&quot;Controller层执行结束。&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试：成功调用</p><h5 id="⑤-场景五：只有一个构造函数，无注解"><a href="#⑤-场景五：只有一个构造函数，无注解" class="headerlink" title="⑤ 场景五：只有一个构造函数，无注解"></a>⑤ 场景五：只有一个构造函数，无注解</h5><p>修改 UserServiceImpl 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.service.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.spring6.dao.UserDao;<br><span class="hljs-keyword">import</span> com.atguigu.spring6.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserServiceImpl</span><span class="hljs-params">(UserDao userDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span> &#123;<br>        userDao.print();<br>        System.out.println(<span class="hljs-string">&quot;Service层执行结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试通过</p><p><strong>当有参数的构造方法只有一个时，@Autowired 注解可以省略。</strong></p><p>说明：有多个构造方法时呢？大家可以测试（再添加一个无参构造函数），测试报错</p><h5 id="⑥-场景六：-Autowired-注解和-Qualifier-注解联合"><a href="#⑥-场景六：-Autowired-注解和-Qualifier-注解联合" class="headerlink" title="⑥ 场景六：@Autowired 注解和@Qualifier 注解联合"></a>⑥ 场景六：@Autowired 注解和@Qualifier 注解联合</h5><p>添加 dao 层实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.dao.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.spring6.dao.UserDao;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoRedisImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Redis Dao层执行结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：测试异常</p><p>错误信息中说：不能装配，UserDao 这个 Bean 的数量等于 2</p><p>怎么解决这个问题呢？<strong>当然要 byName，根据名称进行装配了。</strong></p><p>修改 UserServiceImpl 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.service.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.spring6.dao.UserDao;<br><span class="hljs-keyword">import</span> com.atguigu.spring6.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(&quot;userDaoImpl&quot;)</span> <span class="hljs-comment">// 指定bean的名字</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span> &#123;<br>        userDao.print();<br>        System.out.println(<span class="hljs-string">&quot;Service层执行结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结</strong></p><ul><li>@Autowired 注解可以出现在：属性上、构造方法上、构造方法的参数上、setter 方法上。</li><li>当带参数的构造方法只有一个，@Autowired 注解可以省略。（）</li><li>@Autowired 注解默认根据类型注入。如果要根据名称注入的话，需要配合@Qualifier 注解一起使用。</li></ul><h4 id="3-3-5、实验二：-Resource-注入"><a href="#3-3-5、实验二：-Resource-注入" class="headerlink" title="3.3.5、实验二：@Resource 注入"></a>3.3.5、实验二：@Resource 注入</h4><p>@Resource 注解也可以完成属性注入。那它和@Autowired 注解有什么区别？</p><ul><li>@Resource 注解是 JDK 扩展包中的，也就是说属于 JDK 的一部分。所以该注解是标准注解，更加具有通用性。(JSR-250 标准中制定的注解类型。JSR 是 Java 规范提案。)</li><li>@Autowired 注解是 Spring 框架自己的。</li><li><strong>@Resource 注解默认根据名称装配 byName，未指定 name 时，使用属性名作为 name。通过 name 找不到的话会自动启动通过类型 byType 装配。</strong></li><li><strong>@Autowired 注解默认根据类型装配 byType，如果想根据名称装配，需要配合@Qualifier 注解一起用。</strong></li><li>@Resource 注解用在属性上、setter 方法上。</li><li>@Autowired 注解用在属性上、setter 方法上、构造方法上、构造方法参数上。</li></ul><p>@Resource 注解属于 JDK 扩展包，所以不在 JDK 当中，需要额外引入以下依赖：【<strong>如果是 JDK8 的话不需要额外引入依赖。高于 JDK11 或低于 JDK8 需要引入以下依赖。</strong>】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>jakarta.annotation<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jakarta.annotation-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jakarta.annotation;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Repeatable;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE, ElementType.FIELD, ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Repeatable(Resources.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Resource &#123;<br>    String <span class="hljs-title function_">name</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    String <span class="hljs-title function_">lookup</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    Class&lt;?&gt; type() <span class="hljs-keyword">default</span> Object.class;<br><br>    Resource.AuthenticationType <span class="hljs-title function_">authenticationType</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> Resource.AuthenticationType.CONTAINER;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">shareable</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">true</span>;<br><br>    String <span class="hljs-title function_">mappedName</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    String <span class="hljs-title function_">description</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">AuthenticationType</span> &#123;<br>        CONTAINER,<br>        APPLICATION;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-title function_">AuthenticationType</span><span class="hljs-params">()</span> &#123;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="①-场景一：根据-name-注入"><a href="#①-场景一：根据-name-注入" class="headerlink" title="① 场景一：根据 name 注入"></a>① 场景一：根据 name 注入</h5><p>修改 UserDaoImpl 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.dao.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.spring6.dao.UserDao;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-meta">@Repository(&quot;myUserDao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Dao层执行结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改 UserServiceImpl 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.service.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.spring6.dao.UserDao;<br><span class="hljs-keyword">import</span> com.atguigu.spring6.service.UserService;<br><span class="hljs-keyword">import</span> jakarta.annotation.Resource;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-meta">@Resource(name = &quot;myUserDao&quot;)</span><br>    <span class="hljs-keyword">private</span> UserDao myUserDao;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span> &#123;<br>        myUserDao.print();<br>        System.out.println(<span class="hljs-string">&quot;Service层执行结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试通过</p><h5 id="②-场景二：name-未知注入"><a href="#②-场景二：name-未知注入" class="headerlink" title="② 场景二：name 未知注入"></a>② 场景二：name 未知注入</h5><p>修改 UserDaoImpl 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.dao.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.spring6.dao.UserDao;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-meta">@Repository(&quot;myUserDao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Dao层执行结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改 UserServiceImpl 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.service.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.spring6.dao.UserDao;<br><span class="hljs-keyword">import</span> com.atguigu.spring6.service.UserService;<br><span class="hljs-keyword">import</span> jakarta.annotation.Resource;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserDao myUserDao;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span> &#123;<br>        myUserDao.print();<br>        System.out.println(<span class="hljs-string">&quot;Service层执行结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试通过</p><p>当@Resource 注解使用时没有指定 name 的时候，还是根据 name 进行查找，这个 name 是属性名。</p><h5 id="③-场景三-其他情况"><a href="#③-场景三-其他情况" class="headerlink" title="③ 场景三 其他情况"></a>③ 场景三 其他情况</h5><p>修改 UserServiceImpl 类，userDao1 属性名不存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.service.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.spring6.dao.UserDao;<br><span class="hljs-keyword">import</span> com.atguigu.spring6.service.UserService;<br><span class="hljs-keyword">import</span> jakarta.annotation.Resource;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserDao userDao1;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span> &#123;<br>        userDao1.print();<br>        System.out.println(<span class="hljs-string">&quot;Service层执行结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试异常</p><p>根据异常信息得知：显然当通过 name 找不到的时候，自然会启动 byType 进行注入，以上的错误是因为 UserDao 接口下有两个实现类导致的。所以根据类型注入就会报错。</p><p>@Resource 的 set 注入可以自行测试</p><p><strong>总结：</strong></p><p>@Resource 注解：默认 byName 注入，没有指定 name 时把属性名当做 name，根据 name 找不到时，才会 byType 注入。byType 注入时，某种类型的 Bean 只能有一个</p><h4 id="3-3-6、Spring-全注解开发"><a href="#3-3-6、Spring-全注解开发" class="headerlink" title="3.3.6、Spring 全注解开发"></a>3.3.6、Spring 全注解开发</h4><p>全注解开发就是不再使用 spring 配置文件了，写一个配置类来代替配置文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-comment">//@ComponentScan(&#123;&quot;com.atguigu.spring6.controller&quot;, &quot;com.atguigu.spring6.service&quot;,&quot;com.atguigu.spring6.dao&quot;&#125;)</span><br><span class="hljs-meta">@ComponentScan(&quot;com.atguigu.spring6&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Spring6Config</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAllAnnotation</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(Spring6Config.class);<br>    <span class="hljs-type">UserController</span> <span class="hljs-variable">userController</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;userController&quot;</span>, UserController.class);<br>    userController.out();<br>    logger.info(<span class="hljs-string">&quot;执行成功&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4、原理-手写-IoC"><a href="#4、原理-手写-IoC" class="headerlink" title="4、原理-手写 IoC"></a>4、原理-手写 IoC</h2><p>我们都知道，Spring 框架的 IOC 是基于 Java 反射机制实现的，下面我们先回顾一下 java 反射。</p><h3 id="4-1、回顾-Java-反射"><a href="#4-1、回顾-Java-反射" class="headerlink" title="4.1、回顾 Java 反射"></a>4.1、回顾 Java 反射</h3><p><code>Java</code>反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为<code>Java</code>语言的反射机制。简单来说，反射机制指的是程序在运行时能够获取自身的信息。</p><p>要想解剖一个类，必须先要<strong>获取到该类的 Class 对象</strong>。而剖析一个类或用反射解决具体的问题就是使用相关 API<strong>（1）java.lang.Class（2）java.lang.reflect</strong>，所以，<strong>Class 对象是反射的根源</strong>。</p><p><strong>自定义类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.reflect;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br><br>    <span class="hljs-comment">//属性</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String color;<br><br>    <span class="hljs-comment">//无参数构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Car</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-comment">//有参数构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Car</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, String color)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.color = color;<br>    &#125;<br><br>    <span class="hljs-comment">//普通方法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;私有方法-run.....&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//get和set方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getColor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> color;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setColor</span><span class="hljs-params">(String color)</span> &#123;<br>        <span class="hljs-built_in">this</span>.color = color;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Car&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, color=&#x27;&quot;</span> + color + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>编写测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.reflect;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCar</span> &#123;<br><br>    <span class="hljs-comment">//1、获取Class对象多种方式</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//1 类名.class</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz1</span> <span class="hljs-operator">=</span> Car.class;<br><br>        <span class="hljs-comment">//2 对象.getClass()</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>().getClass();<br><br>        <span class="hljs-comment">//3 Class.forName(&quot;全路径&quot;)</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz3</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.atguigu.reflect.Car&quot;</span>);<br><br>        <span class="hljs-comment">//实例化</span><br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> (Car)clazz3.getConstructor().newInstance();<br>        System.out.println(car);<br>    &#125;<br><br>    <span class="hljs-comment">//2、获取构造方法</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Car.class;<br>        <span class="hljs-comment">//获取所有构造</span><br>        <span class="hljs-comment">// getConstructors()获取所有public的构造方法</span><br><span class="hljs-comment">//        Constructor[] constructors = clazz.getConstructors();</span><br>        <span class="hljs-comment">// getDeclaredConstructors()获取所有的构造方法public  private</span><br>        Constructor[] constructors = clazz.getDeclaredConstructors();<br>        <span class="hljs-keyword">for</span> (Constructor c:constructors) &#123;<br>            System.out.println(<span class="hljs-string">&quot;方法名称：&quot;</span>+c.getName()+<span class="hljs-string">&quot; 参数个数：&quot;</span>+c.getParameterCount());<br>        &#125;<br><br>        <span class="hljs-comment">//指定有参数构造创建对象</span><br>        <span class="hljs-comment">//1 构造public</span><br><span class="hljs-comment">//        Constructor c1 = clazz.getConstructor(String.class, int.class, String.class);</span><br><span class="hljs-comment">//        Car car1 = (Car)c1.newInstance(&quot;夏利&quot;, 10, &quot;红色&quot;);</span><br><span class="hljs-comment">//        System.out.println(car1);</span><br><br>        <span class="hljs-comment">//2 构造private</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor(String.class, <span class="hljs-type">int</span>.class, String.class);<br>        c2.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car2</span> <span class="hljs-operator">=</span> (Car)c2.newInstance(<span class="hljs-string">&quot;捷达&quot;</span>, <span class="hljs-number">15</span>, <span class="hljs-string">&quot;白色&quot;</span>);<br>        System.out.println(car2);<br>    &#125;<br><br>    <span class="hljs-comment">//3、获取属性</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test03</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Car.class;<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> (Car)clazz.getDeclaredConstructor().newInstance();<br>        <span class="hljs-comment">//获取所有public属性</span><br>        <span class="hljs-comment">//Field[] fields = clazz.getFields();</span><br>        <span class="hljs-comment">//获取所有属性（包含私有属性）</span><br>        Field[] fields = clazz.getDeclaredFields();<br>        <span class="hljs-keyword">for</span> (Field field:fields) &#123;<br>            <span class="hljs-keyword">if</span>(field.getName().equals(<span class="hljs-string">&quot;name&quot;</span>)) &#123;<br>                <span class="hljs-comment">//设置允许访问</span><br>                field.setAccessible(<span class="hljs-literal">true</span>);<br>                field.set(car,<span class="hljs-string">&quot;五菱宏光&quot;</span>);<br>                System.out.println(car);<br>            &#125;<br>            System.out.println(field.getName());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//4、获取方法</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test04</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-string">&quot;奔驰&quot;</span>,<span class="hljs-number">10</span>,<span class="hljs-string">&quot;黑色&quot;</span>);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> car.getClass();<br>        <span class="hljs-comment">//1 public方法</span><br>        Method[] methods = clazz.getMethods();<br>        <span class="hljs-keyword">for</span> (Method m1:methods) &#123;<br>            <span class="hljs-comment">//System.out.println(m1.getName());</span><br>            <span class="hljs-comment">//执行方法 toString</span><br>            <span class="hljs-keyword">if</span>(m1.getName().equals(<span class="hljs-string">&quot;toString&quot;</span>)) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">invoke</span> <span class="hljs-operator">=</span> (String)m1.invoke(car);<br>                <span class="hljs-comment">//System.out.println(&quot;toString执行了：&quot;+invoke);</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//2 private方法</span><br>        Method[] methodsAll = clazz.getDeclaredMethods();<br>        <span class="hljs-keyword">for</span> (Method m:methodsAll) &#123;<br>            <span class="hljs-comment">//执行方法 run</span><br>            <span class="hljs-keyword">if</span>(m.getName().equals(<span class="hljs-string">&quot;run&quot;</span>)) &#123;<br>                m.setAccessible(<span class="hljs-literal">true</span>);<br>                m.invoke(car);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2、实现-Spring-的-IoC"><a href="#4-2、实现-Spring-的-IoC" class="headerlink" title="4.2、实现 Spring 的 IoC"></a>4.2、实现 Spring 的 IoC</h3><p>我们知道，IoC（控制反转）和 DI（依赖注入）是 Spring 里面核心的东西，那么，我们如何自己手写出这样的代码呢？下面我们就一步一步写出 Spring 框架最核心的部分。</p><p><strong>① 搭建子模块</strong></p><p>搭建模块：guigu-spring，搭建方式如其他 spring 子模块</p><p><strong>② 准备测试需要的 bean</strong></p><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--junit5测试--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>创建 UserDao 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.test.dao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建 UserDaoImpl 实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.test.dao.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.spring.dao.UserDao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Dao层执行结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建 UserService 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.test.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建 UserServiceImpl 实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring.test.service.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.spring.core.annotation.Bean;<br><span class="hljs-keyword">import</span> com.atguigu.spring.service.UserService;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br><span class="hljs-comment">//    private UserDao userDao;</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//userDao.print();</span><br>        System.out.println(<span class="hljs-string">&quot;Service层执行结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>③ 定义注解</strong></p><p>我们通过注解的形式加载 bean 与实现依赖注入</p><p>bean 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring.core.annotation;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Bean &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>依赖注入注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring.core.annotation;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-meta">@Target(&#123;ElementType.FIELD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Di &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>说明：上面两个注解可以随意取名</p><p><strong>④ 定义 bean 容器接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring.core;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ApplicationContext</span> &#123;<br><br>    Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(Class clazz)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>⑤ 编写注解 bean 容器接口实现</strong></p><p>AnnotationApplicationContext 基于注解扫描 bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring.core;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationApplicationContext</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationContext</span> &#123;<br><br>    <span class="hljs-comment">//存储bean的容器</span><br>    <span class="hljs-keyword">private</span> HashMap&lt;Class, Object&gt; beanFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(Class clazz)</span> &#123;<br>        <span class="hljs-keyword">return</span> beanFactory.get(clazz);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据包扫描加载bean</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> basePackage</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AnnotationApplicationContext</span><span class="hljs-params">(String basePackage)</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>⑥ 编写扫描 bean 逻辑</strong></p><p>我们通过构造方法传入包的 base 路径，扫描被@Bean 注解的 java 对象，完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring.core;<br><br><span class="hljs-keyword">import</span> com.atguigu.spring.core.annotation.Bean;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationApplicationContext</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationContext</span> &#123;<br><br>    <span class="hljs-comment">//存储bean的容器</span><br>    <span class="hljs-keyword">private</span> HashMap&lt;Class, Object&gt; beanFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String rootPath;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(Class clazz)</span> &#123;<br>        <span class="hljs-keyword">return</span> beanFactory.get(clazz);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据包扫描加载bean</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> basePackage</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AnnotationApplicationContext</span><span class="hljs-params">(String basePackage)</span> &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">packageDirName</span> <span class="hljs-operator">=</span> basePackage.replaceAll(<span class="hljs-string">&quot;\\.&quot;</span>, <span class="hljs-string">&quot;\\\\&quot;</span>);<br>            Enumeration&lt;URL&gt; dirs =Thread.currentThread().getContextClassLoader().getResources(packageDirName);<br>            <span class="hljs-keyword">while</span> (dirs.hasMoreElements()) &#123;<br>                <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> dirs.nextElement();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> URLDecoder.decode(url.getFile(),<span class="hljs-string">&quot;utf-8&quot;</span>);<br>                rootPath = filePath.substring(<span class="hljs-number">0</span>, filePath.length()-packageDirName.length());<br>                loadBean(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath));<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadBean</span><span class="hljs-params">(File fileParent)</span> &#123;<br>        <span class="hljs-keyword">if</span> (fileParent.isDirectory()) &#123;<br>            File[] childrenFiles = fileParent.listFiles();<br>            <span class="hljs-keyword">if</span>(childrenFiles == <span class="hljs-literal">null</span> || childrenFiles.length == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (File child : childrenFiles) &#123;<br>                <span class="hljs-keyword">if</span> (child.isDirectory()) &#123;<br>                    <span class="hljs-comment">//如果是个文件夹就继续调用该方法,使用了递归</span><br>                    loadBean(child);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//通过文件路径转变成全类名,第一步把绝对路径部分去掉</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">pathWithClass</span> <span class="hljs-operator">=</span> child.getAbsolutePath().substring(rootPath.length() - <span class="hljs-number">1</span>);<br>                    <span class="hljs-comment">//选中class文件</span><br>                    <span class="hljs-keyword">if</span> (pathWithClass.contains(<span class="hljs-string">&quot;.class&quot;</span>)) &#123;<br>                        <span class="hljs-comment">//    com.xinzhi.dao.UserDao</span><br>                        <span class="hljs-comment">//去掉.class后缀，并且把 \ 替换成 .</span><br>                        <span class="hljs-type">String</span> <span class="hljs-variable">fullName</span> <span class="hljs-operator">=</span> pathWithClass.replaceAll(<span class="hljs-string">&quot;\\\\&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>).replace(<span class="hljs-string">&quot;.class&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            Class&lt;?&gt; aClass = Class.forName(fullName);<br>                            <span class="hljs-comment">//把非接口的类实例化放在map中</span><br>                            <span class="hljs-keyword">if</span>(!aClass.isInterface())&#123;<br>                                <span class="hljs-type">Bean</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> aClass.getAnnotation(Bean.class);<br>                                <span class="hljs-keyword">if</span>(annotation != <span class="hljs-literal">null</span>)&#123;<br>                                    <span class="hljs-type">Object</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> aClass.newInstance();<br>                                    <span class="hljs-comment">//判断一下有没有接口</span><br>                                    <span class="hljs-keyword">if</span>(aClass.getInterfaces().length &gt; <span class="hljs-number">0</span>) &#123;<br>                                        <span class="hljs-comment">//如果有接口把接口的class当成key，实例对象当成value</span><br>                                        System.out.println(<span class="hljs-string">&quot;正在加载【&quot;</span>+ aClass.getInterfaces()[<span class="hljs-number">0</span>] +<span class="hljs-string">&quot;】,实例对象是：&quot;</span> + instance.getClass().getName());<br>                                        beanFactory.put(aClass.getInterfaces()[<span class="hljs-number">0</span>], instance);<br>                                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                                        <span class="hljs-comment">//如果有接口把自己的class当成key，实例对象当成value</span><br>                                        System.out.println(<span class="hljs-string">&quot;正在加载【&quot;</span>+ aClass.getName() +<span class="hljs-string">&quot;】,实例对象是：&quot;</span> + instance.getClass().getName());<br>                                        beanFactory.put(aClass, instance);<br>                                    &#125;<br>                                &#125;<br>                            &#125;<br>                        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | IllegalAccessException | InstantiationException e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>⑦java 类标识 Bean 注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span><br></code></pre></td></tr></table></figure><p><strong>⑧ 测试 Bean 加载</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring;<br><br><span class="hljs-keyword">import</span> com.atguigu.spring.core.AnnotationApplicationContext;<br><span class="hljs-keyword">import</span> com.atguigu.spring.core.ApplicationContext;<br><span class="hljs-keyword">import</span> com.atguigu.spring.test.service.UserService;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringIocTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testIoc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationApplicationContext</span>(<span class="hljs-string">&quot;com.atguigu.spring.test&quot;</span>);<br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> (UserService)applicationContext.getBean(UserService.class);<br>        userService.out();<br>        System.out.println(<span class="hljs-string">&quot;run success&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>控制台打印测试</p><p><strong>⑨ 依赖注入</strong></p><p>只要 userDao.print();调用成功，说明就注入成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring.test.service.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.spring.core.annotation.Bean;<br><span class="hljs-keyword">import</span> com.atguigu.spring.core.annotation.Di;<br><span class="hljs-keyword">import</span> com.atguigu.spring.dao.UserDao;<br><span class="hljs-keyword">import</span> com.atguigu.spring.service.UserService;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-meta">@Di</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span> &#123;<br>        userDao.print();<br>        System.out.println(<span class="hljs-string">&quot;Service层执行结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行第八步：报错了，说明当前 userDao 是个空对象</p><p><strong>⑩ 依赖注入实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring.core;<br><br><span class="hljs-keyword">import</span> com.atguigu.spring.core.annotation.Bean;<br><span class="hljs-keyword">import</span> com.atguigu.spring.core.annotation.Di;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationApplicationContext</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationContext</span> &#123;<br><br>    <span class="hljs-comment">//存储bean的容器</span><br>    <span class="hljs-keyword">private</span> HashMap&lt;Class, Object&gt; beanFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String rootPath;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(Class clazz)</span> &#123;<br>        <span class="hljs-keyword">return</span> beanFactory.get(clazz);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据包扫描加载bean</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> basePackage</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AnnotationApplicationContext</span><span class="hljs-params">(String basePackage)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">packageDirName</span> <span class="hljs-operator">=</span> basePackage.replaceAll(<span class="hljs-string">&quot;\\.&quot;</span>, <span class="hljs-string">&quot;\\\\&quot;</span>);<br>            Enumeration&lt;URL&gt; dirs =Thread.currentThread().getContextClassLoader().getResources(packageDirName);<br>            <span class="hljs-keyword">while</span> (dirs.hasMoreElements()) &#123;<br>                <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> dirs.nextElement();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> URLDecoder.decode(url.getFile(),<span class="hljs-string">&quot;utf-8&quot;</span>);<br>                rootPath = filePath.substring(<span class="hljs-number">0</span>, filePath.length()-packageDirName.length());<br>                loadBean(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath));<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>        <span class="hljs-comment">//依赖注入</span><br>        loadDi();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadBean</span><span class="hljs-params">(File fileParent)</span> &#123;<br>        <span class="hljs-keyword">if</span> (fileParent.isDirectory()) &#123;<br>            File[] childrenFiles = fileParent.listFiles();<br>            <span class="hljs-keyword">if</span>(childrenFiles == <span class="hljs-literal">null</span> || childrenFiles.length == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (File child : childrenFiles) &#123;<br>                <span class="hljs-keyword">if</span> (child.isDirectory()) &#123;<br>                    <span class="hljs-comment">//如果是个文件夹就继续调用该方法,使用了递归</span><br>                    loadBean(child);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//通过文件路径转变成全类名,第一步把绝对路径部分去掉</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">pathWithClass</span> <span class="hljs-operator">=</span> child.getAbsolutePath().substring(rootPath.length() - <span class="hljs-number">1</span>);<br>                    <span class="hljs-comment">//选中class文件</span><br>                    <span class="hljs-keyword">if</span> (pathWithClass.contains(<span class="hljs-string">&quot;.class&quot;</span>)) &#123;<br>                        <span class="hljs-comment">//    com.xinzhi.dao.UserDao</span><br>                        <span class="hljs-comment">//去掉.class后缀，并且把 \ 替换成 .</span><br>                        <span class="hljs-type">String</span> <span class="hljs-variable">fullName</span> <span class="hljs-operator">=</span> pathWithClass.replaceAll(<span class="hljs-string">&quot;\\\\&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>).replace(<span class="hljs-string">&quot;.class&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            Class&lt;?&gt; aClass = Class.forName(fullName);<br>                            <span class="hljs-comment">//把非接口的类实例化放在map中</span><br>                            <span class="hljs-keyword">if</span>(!aClass.isInterface())&#123;<br>                                <span class="hljs-type">Bean</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> aClass.getAnnotation(Bean.class);<br>                                <span class="hljs-keyword">if</span>(annotation != <span class="hljs-literal">null</span>)&#123;<br>                                    <span class="hljs-type">Object</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> aClass.newInstance();<br>                                    <span class="hljs-comment">//判断一下有没有接口</span><br>                                    <span class="hljs-keyword">if</span>(aClass.getInterfaces().length &gt; <span class="hljs-number">0</span>) &#123;<br>                                        <span class="hljs-comment">//如果有接口把接口的class当成key，实例对象当成value</span><br>                                        System.out.println(<span class="hljs-string">&quot;正在加载【&quot;</span>+ aClass.getInterfaces()[<span class="hljs-number">0</span>] +<span class="hljs-string">&quot;】,实例对象是：&quot;</span> + instance.getClass().getName());<br>                                        beanFactory.put(aClass.getInterfaces()[<span class="hljs-number">0</span>], instance);<br>                                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                                        <span class="hljs-comment">//如果有接口把自己的class当成key，实例对象当成value</span><br>                                        System.out.println(<span class="hljs-string">&quot;正在加载【&quot;</span>+ aClass.getName() +<span class="hljs-string">&quot;】,实例对象是：&quot;</span> + instance.getClass().getName());<br>                                        beanFactory.put(aClass, instance);<br>                                    &#125;<br>                                &#125;<br>                            &#125;<br>                        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | IllegalAccessException | InstantiationException e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadDi</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span>(Map.Entry&lt;Class,Object&gt; entry : beanFactory.entrySet())&#123;<br>            <span class="hljs-comment">//就是咱们放在容器的对象</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> entry.getValue();<br>            Class&lt;?&gt; aClass = obj.getClass();<br>            Field[] declaredFields = aClass.getDeclaredFields();<br>            <span class="hljs-keyword">for</span> (Field field : declaredFields)&#123;<br>                <span class="hljs-type">Di</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> field.getAnnotation(Di.class);<br>                <span class="hljs-keyword">if</span>( annotation != <span class="hljs-literal">null</span> )&#123;<br>                    field.setAccessible(<span class="hljs-literal">true</span>);<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        System.out.println(<span class="hljs-string">&quot;正在给【&quot;</span>+obj.getClass().getName()+<span class="hljs-string">&quot;】属性【&quot;</span> + field.getName() + <span class="hljs-string">&quot;】注入值【&quot;</span>+ beanFactory.get(field.getType()).getClass().getName() +<span class="hljs-string">&quot;】&quot;</span>);<br>                        field.set(obj,beanFactory.get(field.getType()));<br>                    &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>执行第八步：执行成功，依赖注入成功</p><h2 id="5、面向切面：AOP"><a href="#5、面向切面：AOP" class="headerlink" title="5、面向切面：AOP"></a>5、面向切面：AOP</h2><h3 id="5-1、场景模拟"><a href="#5-1、场景模拟" class="headerlink" title="5.1、场景模拟"></a>5.1、场景模拟</h3><p><strong>搭建子模块：spring6-aop</strong></p><h4 id="5-1-1、声明接口"><a href="#5-1-1、声明接口" class="headerlink" title="5.1.1、声明接口"></a>5.1.1、声明接口</h4><p>声明计算器接口 Calculator，包含加减乘除的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Calculator</span> &#123;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">mul</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-1-2、创建实现类"><a href="#5-1-2、创建实现类" class="headerlink" title="5.1.2、创建实现类"></a>5.1.2、创建实现类</h4><p><img src="/images/spring6/img014.png#alt=images"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalculatorImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Calculator</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i + j;<br><br>        System.out.println(<span class="hljs-string">&quot;方法内部 result = &quot;</span> + result);<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i - j;<br><br>        System.out.println(<span class="hljs-string">&quot;方法内部 result = &quot;</span> + result);<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mul</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i * j;<br><br>        System.out.println(<span class="hljs-string">&quot;方法内部 result = &quot;</span> + result);<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i / j;<br><br>        System.out.println(<span class="hljs-string">&quot;方法内部 result = &quot;</span> + result);<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-1-3、创建带日志功能的实现类"><a href="#5-1-3、创建带日志功能的实现类" class="headerlink" title="5.1.3、创建带日志功能的实现类"></a>5.1.3、创建带日志功能的实现类</h4><p><img src="/images/spring6/img015.png#alt=images"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalculatorLogImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Calculator</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br><br>        System.out.println(<span class="hljs-string">&quot;[日志] add 方法开始了，参数是：&quot;</span> + i + <span class="hljs-string">&quot;,&quot;</span> + j);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i + j;<br><br>        System.out.println(<span class="hljs-string">&quot;方法内部 result = &quot;</span> + result);<br><br>        System.out.println(<span class="hljs-string">&quot;[日志] add 方法结束了，结果是：&quot;</span> + result);<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br><br>        System.out.println(<span class="hljs-string">&quot;[日志] sub 方法开始了，参数是：&quot;</span> + i + <span class="hljs-string">&quot;,&quot;</span> + j);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i - j;<br><br>        System.out.println(<span class="hljs-string">&quot;方法内部 result = &quot;</span> + result);<br><br>        System.out.println(<span class="hljs-string">&quot;[日志] sub 方法结束了，结果是：&quot;</span> + result);<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mul</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br><br>        System.out.println(<span class="hljs-string">&quot;[日志] mul 方法开始了，参数是：&quot;</span> + i + <span class="hljs-string">&quot;,&quot;</span> + j);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i * j;<br><br>        System.out.println(<span class="hljs-string">&quot;方法内部 result = &quot;</span> + result);<br><br>        System.out.println(<span class="hljs-string">&quot;[日志] mul 方法结束了，结果是：&quot;</span> + result);<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br><br>        System.out.println(<span class="hljs-string">&quot;[日志] div 方法开始了，参数是：&quot;</span> + i + <span class="hljs-string">&quot;,&quot;</span> + j);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i / j;<br><br>        System.out.println(<span class="hljs-string">&quot;方法内部 result = &quot;</span> + result);<br><br>        System.out.println(<span class="hljs-string">&quot;[日志] div 方法结束了，结果是：&quot;</span> + result);<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-1-4、提出问题"><a href="#5-1-4、提出问题" class="headerlink" title="5.1.4、提出问题"></a>5.1.4、提出问题</h4><p><strong>① 现有代码缺陷</strong></p><p>针对带日志功能的实现类，我们发现有如下缺陷：</p><ul><li>对核心业务功能有干扰，导致程序员在开发核心业务功能时分散了精力</li><li>附加功能分散在各个业务功能方法中，不利于统一维护</li></ul><p><strong>② 解决思路</strong></p><p>解决这两个问题，核心就是：解耦。我们需要把附加功能从业务功能代码中抽取出来。</p><p><strong>③ 困难</strong></p><p>解决问题的困难：要抽取的代码在方法内部，靠以前把子类中的重复代码抽取到父类的方式没法解决。所以需要引入新的技术。</p><h3 id="5-2、代理模式"><a href="#5-2、代理模式" class="headerlink" title="5.2、代理模式"></a>5.2、代理模式</h3><h4 id="5-2-1、概念"><a href="#5-2-1、概念" class="headerlink" title="5.2.1、概念"></a>5.2.1、概念</h4><p><strong>① 介绍</strong></p><p>二十三种设计模式中的一种，属于结构型模式。它的作用就是通过提供一个代理类，让我们在调用目标方法的时候，不再是直接对目标方法进行调用，而是通过代理类<strong>间接</strong>调用。让不属于目标方法核心逻辑的代码从目标方法中剥离出来——<strong>解耦</strong>。调用目标方法时先调用代理对象的方法，减少对目标方法的调用和打扰，同时让附加功能能够集中在一起也有利于统一维护。</p><p><img src="/images/spring6/img016.png#alt=images"></p><p>使用代理后：</p><p><img src="/images/spring6/img017.png#alt=images"></p><p><strong>② 生活中的代理</strong></p><ul><li>广告商找大明星拍广告需要经过经纪人</li><li>合作伙伴找大老板谈合作要约见面时间需要经过秘书</li><li>房产中介是买卖双方的代理</li></ul><p><strong>③ 相关术语</strong></p><ul><li>代理：将非核心逻辑剥离出来以后，封装这些非核心逻辑的类、对象、方法。</li><li>目标：被代理“套用”了非核心逻辑代码的类、对象、方法。</li></ul><h4 id="5-2-2、静态代理"><a href="#5-2-2、静态代理" class="headerlink" title="5.2.2、静态代理"></a>5.2.2、静态代理</h4><p>创建静态代理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalculatorStaticProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Calculator</span> &#123;<br><br>    <span class="hljs-comment">// 将被代理的目标对象声明为成员变量</span><br>    <span class="hljs-keyword">private</span> Calculator target;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CalculatorStaticProxy</span><span class="hljs-params">(Calculator target)</span> &#123;<br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br><br>        <span class="hljs-comment">// 附加功能由代理类中的代理方法来实现</span><br>        System.out.println(<span class="hljs-string">&quot;[日志] add 方法开始了，参数是：&quot;</span> + i + <span class="hljs-string">&quot;,&quot;</span> + j);<br><br>        <span class="hljs-comment">// 通过目标对象来实现核心业务逻辑</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">addResult</span> <span class="hljs-operator">=</span> target.add(i, j);<br><br>        System.out.println(<span class="hljs-string">&quot;[日志] add 方法结束了，结果是：&quot;</span> + addResult);<br><br>        <span class="hljs-keyword">return</span> addResult;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>静态代理确实实现了解耦，但是由于代码都写死了，完全不具备任何的灵活性。就拿日志功能来说，将来其他地方也需要附加日志，那还得再声明更多个静态代理类，那就产生了大量重复的代码，日志功能还是分散的，没有统一管理。</p></blockquote><blockquote><p>提出进一步的需求：将日志功能集中到一个代理类中，将来有任何日志需求，都通过这一个代理类来实现。这就需要使用动态代理技术了。</p></blockquote><h4 id="5-2-3、动态代理"><a href="#5-2-3、动态代理" class="headerlink" title="5.2.3、动态代理"></a>5.2.3、动态代理</h4><p><img src="/images/spring6/img018.png#alt=images"></p><p>生产代理对象的工厂类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyFactory</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Object target;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ProxyFactory</span><span class="hljs-params">(Object target)</span> &#123;<br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProxy</span><span class="hljs-params">()</span>&#123;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * newProxyInstance()：创建一个代理实例</span><br><span class="hljs-comment">         * 其中有三个参数：</span><br><span class="hljs-comment">         * 1、classLoader：加载动态生成的代理类的类加载器</span><br><span class="hljs-comment">         * 2、interfaces：目标对象实现的所有接口的class对象所组成的数组</span><br><span class="hljs-comment">         * 3、invocationHandler：设置代理对象实现目标对象方法的过程，即代理类中如何重写接口中的抽象方法</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> target.getClass().getClassLoader();<br>        Class&lt;?&gt;[] interfaces = target.getClass().getInterfaces();<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                <span class="hljs-comment">/**</span><br><span class="hljs-comment">                 * proxy：代理对象</span><br><span class="hljs-comment">                 * method：代理对象需要实现的方法，即其中需要重写的方法</span><br><span class="hljs-comment">                 * args：method所对应方法的参数</span><br><span class="hljs-comment">                 */</span><br>                <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="hljs-string">&quot;，参数：&quot;</span>+ Arrays.toString(args));<br>                    result = method.invoke(target, args);<br>                    System.out.println(<span class="hljs-string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="hljs-string">&quot;，结果：&quot;</span>+ result);<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                    System.out.println(<span class="hljs-string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="hljs-string">&quot;，异常：&quot;</span>+e.getMessage());<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="hljs-string">&quot;，方法执行完毕&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">return</span> result;<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(classLoader, interfaces, invocationHandler);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-4、测试"><a href="#5-2-4、测试" class="headerlink" title="5.2.4、测试"></a>5.2.4、测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDynamicProxy</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ProxyFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyFactory</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CalculatorLogImpl</span>());<br>    <span class="hljs-type">Calculator</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (Calculator) factory.getProxy();<br>    proxy.div(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//proxy.div(1,1);</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-3、AOP-概念及相关术语"><a href="#5-3、AOP-概念及相关术语" class="headerlink" title="5.3、AOP 概念及相关术语"></a>5.3、AOP 概念及相关术语</h3><h4 id="5-3-1、概述"><a href="#5-3-1、概述" class="headerlink" title="5.3.1、概述"></a>5.3.1、概述</h4><p>AOP（Aspect Oriented Programming）是一种设计思想，是软件设计领域中的面向切面编程，它是面向对象编程的一种补充和完善，它以通过预编译方式和运行期动态代理方式实现，在不修改源代码的情况下，给程序动态统一添加额外功能的一种技术。利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><h4 id="5-3-2、相关术语"><a href="#5-3-2、相关术语" class="headerlink" title="5.3.2、相关术语"></a>5.3.2、相关术语</h4><h5 id="①-横切关注点"><a href="#①-横切关注点" class="headerlink" title="① 横切关注点"></a>① 横切关注点</h5><p>分散在每个各个模块中解决同一样的问题，如用户验证、日志管理、事务处理、数据缓存都属于横切关注点。</p><p>从每个方法中抽取出来的同一类非核心业务。在同一个项目中，我们可以使用多个横切关注点对相关方法进行多个不同方面的增强。</p><p>这个概念不是语法层面的，而是根据附加功能的逻辑上的需要：有十个附加功能，就有十个横切关注点。</p><p><img src="/images/spring6/img019.png#alt=images"></p><h5 id="②-通知（增强）"><a href="#②-通知（增强）" class="headerlink" title="② 通知（增强）"></a>② 通知（增强）</h5><p><strong>增强，通俗说，就是你想要增强的功能，比如 安全，事务，日志等。</strong></p><p>每一个横切关注点上要做的事情都需要写一个方法来实现，这样的方法就叫通知方法。</p><ul><li>前置通知：在被代理的目标方法<strong>前</strong>执行</li><li>返回通知：在被代理的目标方法<strong>成功结束</strong>后执行（<strong>寿终正寝</strong>）</li><li>异常通知：在被代理的目标方法<strong>异常结束</strong>后执行（<strong>死于非命</strong>）</li><li>后置通知：在被代理的目标方法<strong>最终结束</strong>后执行（<strong>盖棺定论</strong>）</li><li>环绕通知：使用 try…catch…finally 结构围绕<strong>整个</strong>被代理的目标方法，包括上面四种通知对应的所有位置</li></ul><p><img src="/images/spring6/img020.png#alt=images"></p><h5 id="③-切面"><a href="#③-切面" class="headerlink" title="③ 切面"></a>③ 切面</h5><p>封装通知方法的类。</p><p><img src="/images/spring6/img021.png#alt=images"></p><h5 id="④-目标"><a href="#④-目标" class="headerlink" title="④ 目标"></a>④ 目标</h5><p>被代理的目标对象。</p><h5 id="⑤-代理"><a href="#⑤-代理" class="headerlink" title="⑤ 代理"></a>⑤ 代理</h5><p>向目标对象应用通知之后创建的代理对象。</p><h5 id="⑥-连接点"><a href="#⑥-连接点" class="headerlink" title="⑥ 连接点"></a>⑥ 连接点</h5><p>这也是一个纯逻辑概念，不是语法定义的。</p><p>把方法排成一排，每一个横切位置看成 x 轴方向，把方法从上到下执行的顺序看成 y 轴，x 轴和 y 轴的交叉点就是连接点。<strong>通俗说，就是 spring 允许你使用通知的地方</strong></p><p><img src="/images/spring6/img022.png#alt=images"></p><h5 id="⑦-切入点"><a href="#⑦-切入点" class="headerlink" title="⑦ 切入点"></a>⑦ 切入点</h5><p>定位连接点的方式。</p><p>每个类的方法中都包含多个连接点，所以连接点是类中客观存在的事物（从逻辑上来说）。</p><p>如果把连接点看作数据库中的记录，那么切入点就是查询记录的 SQL 语句。</p><p><strong>Spring 的 AOP 技术可以通过切入点定位到特定的连接点。通俗说，要实际去增强的方法</strong></p><p>切点通过 org.springframework.aop.Pointcut 接口进行描述，它使用类和方法作为连接点的查询条件。</p><h4 id="5-3-3、作用"><a href="#5-3-3、作用" class="headerlink" title="5.3.3、作用"></a>5.3.3、作用</h4><ul><li><p>简化代码：把方法中固定位置的重复的代码<strong>抽取</strong>出来，让被抽取的方法更专注于自己的核心功能，提高内聚性。</p></li><li><p>代码增强：把特定的功能封装到切面类中，看哪里有需要，就往上套，被<strong>套用</strong>了切面逻辑的方法就被切面给增强了。</p></li></ul><h3 id="5-4、基于注解的-AOP"><a href="#5-4、基于注解的-AOP" class="headerlink" title="5.4、基于注解的 AOP"></a>5.4、基于注解的 AOP</h3><h4 id="5-4-1、技术说明"><a href="#5-4-1、技术说明" class="headerlink" title="5.4.1、技术说明"></a>5.4.1、技术说明</h4><p><img src="/images/spring6/img023.png#alt=images"></p><p><img src="/images%5Cspring6%5Cimage-20221216132844066.png#alt=image-20221216132844066"></p><ul><li>动态代理分为 JDK 动态代理和 cglib 动态代理</li><li>当目标类有接口的情况使用 JDK 动态代理和 cglib 动态代理，没有接口时只能使用 cglib 动态代理</li><li>JDK 动态代理动态生成的代理类会在 com.sun.proxy 包下，类名为$proxy1，和目标类实现相同的接口</li><li>cglib 动态代理动态生成的代理类会和目标在在相同的包下，会继承目标类</li><li>动态代理（InvocationHandler）：JDK 原生的实现方式，需要被代理的目标类必须实现接口。因为这个技术要求<strong>代理对象和目标对象实现同样的接口</strong>（兄弟两个拜把子模式）。</li><li>cglib：通过<strong>继承被代理的目标类</strong>（认干爹模式）实现代理，所以不需要目标类实现接口。</li><li>AspectJ：是 AOP 思想的一种实现。本质上是静态代理，<strong>将代理逻辑“织入”被代理的目标类编译得到的字节码文件</strong>，所以最终效果是动态的。weaver 就是织入器。Spring 只是借用了 AspectJ 中的注解。</li></ul><h4 id="5-4-2、准备工作"><a href="#5-4-2、准备工作" class="headerlink" title="5.4.2、准备工作"></a>5.4.2、准备工作</h4><p><strong>① 添加依赖</strong></p><p>在 IOC 所需依赖基础上再加入下面依赖即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--spring context依赖--&gt;</span><br>    <span class="hljs-comment">&lt;!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--spring aop依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--spring aspects依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--junit5测试--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--log4j2的依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.19.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.19.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>② 准备被代理的目标资源</strong></p><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Calculator</span> &#123;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">mul</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalculatorImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Calculator</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i + j;<br><br>        System.out.println(<span class="hljs-string">&quot;方法内部 result = &quot;</span> + result);<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i - j;<br><br>        System.out.println(<span class="hljs-string">&quot;方法内部 result = &quot;</span> + result);<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mul</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i * j;<br><br>        System.out.println(<span class="hljs-string">&quot;方法内部 result = &quot;</span> + result);<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i / j;<br><br>        System.out.println(<span class="hljs-string">&quot;方法内部 result = &quot;</span> + result);<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-4-3、创建切面类并配置"><a href="#5-4-3、创建切面类并配置" class="headerlink" title="5.4.3、创建切面类并配置"></a>5.4.3、创建切面类并配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// @Aspect表示这个类是一个切面类</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-comment">// @Component注解保证这个切面类能够放入IOC容器</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAspect</span> &#123;<br><br>    <span class="hljs-meta">@Before(&quot;execution(public int com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeMethod</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">args</span> <span class="hljs-operator">=</span> Arrays.toString(joinPoint.getArgs());<br>        System.out.println(<span class="hljs-string">&quot;Logger--&gt;前置通知，方法名：&quot;</span>+methodName+<span class="hljs-string">&quot;，参数：&quot;</span>+args);<br>    &#125;<br><br>    <span class="hljs-meta">@After(&quot;execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterMethod</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        System.out.println(<span class="hljs-string">&quot;Logger--&gt;后置通知，方法名：&quot;</span>+methodName);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterReturning(value = &quot;execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;, returning = &quot;result&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturningMethod</span><span class="hljs-params">(JoinPoint joinPoint, Object result)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        System.out.println(<span class="hljs-string">&quot;Logger--&gt;返回通知，方法名：&quot;</span>+methodName+<span class="hljs-string">&quot;，结果：&quot;</span>+result);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterThrowing(value = &quot;execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;, throwing = &quot;ex&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowingMethod</span><span class="hljs-params">(JoinPoint joinPoint, Throwable ex)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        System.out.println(<span class="hljs-string">&quot;Logger--&gt;异常通知，方法名：&quot;</span>+methodName+<span class="hljs-string">&quot;，异常：&quot;</span>+ex);<br>    &#125;<br><br>    <span class="hljs-meta">@Around(&quot;execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">aroundMethod</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">args</span> <span class="hljs-operator">=</span> Arrays.toString(joinPoint.getArgs());<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;环绕通知--&gt;目标对象方法执行之前&quot;</span>);<br>            <span class="hljs-comment">//目标对象（连接点）方法的执行</span><br>            result = joinPoint.proceed();<br>            System.out.println(<span class="hljs-string">&quot;环绕通知--&gt;目标对象方法返回值之后&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable throwable) &#123;<br>            throwable.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;环绕通知--&gt;目标对象方法出现异常时&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;环绕通知--&gt;目标对象方法执行完毕&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在 Spring 的配置文件中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/aop</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        基于注解的AOP的实现：</span><br><span class="hljs-comment">        1、将目标对象和切面交给IOC容器管理（注解+扫描）</span><br><span class="hljs-comment">        2、开启AspectJ的自动代理，为目标对象自动生成代理</span><br><span class="hljs-comment">        3、将切面类通过注解@Aspect标识</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.aop.annotation&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>执行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalculatorTest</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(CalculatorTest.class);<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAdd</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br>        <span class="hljs-type">Calculator</span> <span class="hljs-variable">calculator</span> <span class="hljs-operator">=</span> ac.getBean( Calculator.class);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">add</span> <span class="hljs-operator">=</span> calculator.add(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        logger.info(<span class="hljs-string">&quot;执行成功:&quot;</span>+add);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/images/spring6/image-20221102155523983.png#alt=image-20221102155523983"></p><h4 id="5-4-4、各种通知"><a href="#5-4-4、各种通知" class="headerlink" title="5.4.4、各种通知"></a>5.4.4、各种通知</h4><ul><li>前置通知：使用@Before 注解标识，在被代理的目标方法<strong>前</strong>执行</li><li>返回通知：使用@AfterReturning 注解标识，在被代理的目标方法<strong>成功结束</strong>后执行（<strong>寿终正寝</strong>）</li><li>异常通知：使用@AfterThrowing 注解标识，在被代理的目标方法<strong>异常结束</strong>后执行（<strong>死于非命</strong>）</li><li>后置通知：使用@After 注解标识，在被代理的目标方法<strong>最终结束</strong>后执行（<strong>盖棺定论</strong>）</li><li>环绕通知：使用@Around 注解标识，使用 try…catch…finally 结构围绕<strong>整个</strong>被代理的目标方法，包括上面四种通知对应的所有位置</li></ul><blockquote><p>各种通知的执行顺序：</p></blockquote><blockquote><ul><li>Spring 版本 5.3.x 以前：</li></ul></blockquote><blockquote><ul><li>前置通知</li><li>目标操作</li><li>后置通知</li><li>返回通知或异常通知</li></ul></blockquote><blockquote><ul><li>Spring 版本 5.3.x 以后：</li></ul></blockquote><blockquote><ul><li>前置通知</li><li>目标操作</li><li>返回通知或异常通知</li><li>后置通知</li></ul></blockquote><h4 id="5-4-5、切入点表达式语法"><a href="#5-4-5、切入点表达式语法" class="headerlink" title="5.4.5、切入点表达式语法"></a>5.4.5、切入点表达式语法</h4><p><strong>① 作用</strong></p><p><img src="/images/spring6/img024.png#alt=images"></p><p><strong>② 语法细节</strong></p><ul><li><p>用*号代替“权限修饰符”和“返回值”部分表示“权限修饰符”和“返回值”不限</p></li><li><p>在包名的部分，一个“*”号只能代表包的层次结构中的一层，表示这一层是任意的。</p><ul><li>例如：*.Hello 匹配 com.Hello，不匹配 com.atguigu.Hello</li></ul></li><li><p>在包名的部分，使用“*..”表示包名任意、包的层次深度任意</p></li><li><p>在类名的部分，类名部分整体用*号代替，表示类名任意</p></li><li><p>在类名的部分，可以使用*号代替类名的一部分</p><ul><li>例如：*Service 匹配所有名称以 Service 结尾的类或接口</li></ul></li><li><p>在方法名部分，可以使用*号表示方法名任意</p></li><li><p>在方法名部分，可以使用*号代替方法名的一部分</p><ul><li>例如：*Operation 匹配所有方法名以 Operation 结尾的方法</li></ul></li><li><p>在方法参数列表部分，使用(..)表示参数列表任意</p></li><li><p>在方法参数列表部分，使用(int,..)表示参数列表以一个 int 类型的参数开头</p></li><li><p>在方法参数列表部分，基本数据类型和对应的包装类型是不一样的</p><ul><li>切入点表达式中使用 int 和实际方法中 Integer 是不匹配的</li></ul></li><li><p>在方法返回值部分，如果想要明确指定一个返回值类型，那么必须同时写明权限修饰符</p><ul><li>例如：execution(public int _.._Service.*(.., int)) 正确</li></ul></li></ul><p>例如：execution(_ int _..<em>Service.</em>(.., int)) 错误</p><p><img src="/images/spring6/img025.png#alt=images"></p><h4 id="5-4-6、重用切入点表达式"><a href="#5-4-6、重用切入点表达式" class="headerlink" title="5.4.6、重用切入点表达式"></a>5.4.6、重用切入点表达式</h4><p><strong>① 声明</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Pointcut(&quot;execution(* com.atguigu.aop.annotation.*.*(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointCut</span><span class="hljs-params">()</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p><strong>② 在同一个切面中使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Before(&quot;pointCut()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeMethod</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">args</span> <span class="hljs-operator">=</span> Arrays.toString(joinPoint.getArgs());<br>    System.out.println(<span class="hljs-string">&quot;Logger--&gt;前置通知，方法名：&quot;</span>+methodName+<span class="hljs-string">&quot;，参数：&quot;</span>+args);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>③ 在不同切面中使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Before(&quot;com.atguigu.aop.CommonPointCut.pointCut()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeMethod</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">args</span> <span class="hljs-operator">=</span> Arrays.toString(joinPoint.getArgs());<br>    System.out.println(<span class="hljs-string">&quot;Logger--&gt;前置通知，方法名：&quot;</span>+methodName+<span class="hljs-string">&quot;，参数：&quot;</span>+args);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-4-7、获取通知的相关信息"><a href="#5-4-7、获取通知的相关信息" class="headerlink" title="5.4.7、获取通知的相关信息"></a>5.4.7、获取通知的相关信息</h4><p><strong>① 获取连接点信息</strong></p><p>获取连接点信息可以在通知方法的参数位置设置 JoinPoint 类型的形参</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Before(&quot;execution(public int com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeMethod</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>    <span class="hljs-comment">//获取连接点的签名信息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>    <span class="hljs-comment">//获取目标方法到的实参信息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">args</span> <span class="hljs-operator">=</span> Arrays.toString(joinPoint.getArgs());<br>    System.out.println(<span class="hljs-string">&quot;Logger--&gt;前置通知，方法名：&quot;</span>+methodName+<span class="hljs-string">&quot;，参数：&quot;</span>+args);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>② 获取目标方法的返回值</strong></p><p>@AfterReturning 中的属性 returning，用来将通知方法的某个形参，接收目标方法的返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AfterReturning(value = &quot;execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;, returning = &quot;result&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturningMethod</span><span class="hljs-params">(JoinPoint joinPoint, Object result)</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>    System.out.println(<span class="hljs-string">&quot;Logger--&gt;返回通知，方法名：&quot;</span>+methodName+<span class="hljs-string">&quot;，结果：&quot;</span>+result);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>③ 获取目标方法的异常</strong></p><p>@AfterThrowing 中的属性 throwing，用来将通知方法的某个形参，接收目标方法的异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AfterThrowing(value = &quot;execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;, throwing = &quot;ex&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowingMethod</span><span class="hljs-params">(JoinPoint joinPoint, Throwable ex)</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>    System.out.println(<span class="hljs-string">&quot;Logger--&gt;异常通知，方法名：&quot;</span>+methodName+<span class="hljs-string">&quot;，异常：&quot;</span>+ex);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-4-8、环绕通知"><a href="#5-4-8、环绕通知" class="headerlink" title="5.4.8、环绕通知"></a>5.4.8、环绕通知</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Around(&quot;execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;)</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">aroundMethod</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">args</span> <span class="hljs-operator">=</span> Arrays.toString(joinPoint.getArgs());<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;环绕通知--&gt;目标对象方法执行之前&quot;</span>);<br>        <span class="hljs-comment">//目标方法的执行，目标方法的返回值一定要返回给外界调用者</span><br>        result = joinPoint.proceed();<br>        System.out.println(<span class="hljs-string">&quot;环绕通知--&gt;目标对象方法返回值之后&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable throwable) &#123;<br>        throwable.printStackTrace();<br>        System.out.println(<span class="hljs-string">&quot;环绕通知--&gt;目标对象方法出现异常时&quot;</span>);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;环绕通知--&gt;目标对象方法执行完毕&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-4-9、切面的优先级"><a href="#5-4-9、切面的优先级" class="headerlink" title="5.4.9、切面的优先级"></a>5.4.9、切面的优先级</h4><p>相同目标方法上同时存在多个切面时，切面的优先级控制切面的<strong>内外嵌套</strong>顺序。</p><ul><li>优先级高的切面：外面</li><li>优先级低的切面：里面</li></ul><p>使用@Order 注解可以控制切面的优先级：</p><ul><li>@Order(较小的数)：优先级高</li><li>@Order(较大的数)：优先级低</li></ul><p><img src="/images/spring6/img026.png#alt=images"></p><h3 id="5-5、基于-XML-的-AOP"><a href="#5-5、基于-XML-的-AOP" class="headerlink" title="5.5、基于 XML 的 AOP"></a>5.5、基于 XML 的 AOP</h3><h4 id="5-5-1、准备工作"><a href="#5-5-1、准备工作" class="headerlink" title="5.5.1、准备工作"></a>5.5.1、准备工作</h4><p>参考基于注解的 AOP 环境</p><h4 id="5-5-2、实现"><a href="#5-5-2、实现" class="headerlink" title="5.5.2、实现"></a>5.5.2、实现</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.aop.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置切面类--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;loggerAspect&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pointCut&quot;</span></span><br><span class="hljs-tag">                   <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.atguigu.aop.xml.CalculatorImpl.*(..))&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;beforeMethod&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointCut&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:before</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterMethod&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointCut&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:after</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-returning</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterReturningMethod&quot;</span> <span class="hljs-attr">returning</span>=<span class="hljs-string">&quot;result&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointCut&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:after-returning</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-throwing</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterThrowingMethod&quot;</span> <span class="hljs-attr">throwing</span>=<span class="hljs-string">&quot;ex&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointCut&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:after-throwing</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:around</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;aroundMethod&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointCut&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:around</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="6、单元测试：JUnit"><a href="#6、单元测试：JUnit" class="headerlink" title="6、单元测试：JUnit"></a>6、单元测试：JUnit</h2><p>在之前的测试方法中，几乎都能看到以下的两行代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;xxx.xml&quot;</span>);<br><span class="hljs-type">Xxxx</span> <span class="hljs-variable">xxx</span> <span class="hljs-operator">=</span> context.getBean(Xxxx.class);<br></code></pre></td></tr></table></figure><p>这两行代码的作用是创建 Spring 容器，最终获取到对象，但是每次测试都需要重复编写。针对上述问题，我们需要的是程序能自动帮我们创建容器。我们都知道 JUnit 无法知晓我们是否使用了 Spring 框架，更不用说帮我们创建 Spring 容器了。Spring 提供了一个运行器，可以读取配置文件（或注解）来创建容器。我们只需要告诉它配置文件位置就可以了。这样一来，我们通过 Spring 整合 JUnit 可以使程序创建 spring 容器了</p><h3 id="6-1、整合-JUnit5"><a href="#6-1、整合-JUnit5" class="headerlink" title="6.1、整合 JUnit5"></a>6.1、整合 JUnit5</h3><h4 id="6-1-1、搭建子模块"><a href="#6-1-1、搭建子模块" class="headerlink" title="6.1.1、搭建子模块"></a>6.1.1、搭建子模块</h4><p>搭建 spring-junit 模块</p><h4 id="6-1-2、引入依赖"><a href="#6-1-2、引入依赖" class="headerlink" title="6.1.2、引入依赖"></a>6.1.2、引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--spring context依赖--&gt;</span><br>    <span class="hljs-comment">&lt;!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--spring对junit的支持相关依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--junit5测试--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--log4j2的依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.19.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.19.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="6-1-3、添加配置文件"><a href="#6-1-3、添加配置文件" class="headerlink" title="6.1.3、添加配置文件"></a>6.1.3、添加配置文件</h4><p>beans.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.spring6.bean&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>copy 日志文件：log4j2.xml</p><h4 id="6-1-4、添加-java-类"><a href="#6-1-4、添加-java-类" class="headerlink" title="6.1.4、添加 java 类"></a>6.1.4、添加 java 类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.bean;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;run user&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-1-5、测试"><a href="#6-1-5、测试" class="headerlink" title="6.1.5、测试"></a>6.1.5、测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.atguigu.spring6.bean.User;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.extension.ExtendWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.test.context.ContextConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit.jupiter.SpringExtension;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit.jupiter.SpringJUnitConfig;<br><br><span class="hljs-comment">//两种方式均可</span><br><span class="hljs-comment">//方式一</span><br><span class="hljs-comment">//@ExtendWith(SpringExtension.class)</span><br><span class="hljs-comment">//@ContextConfiguration(&quot;classpath:beans.xml&quot;)</span><br><span class="hljs-comment">//方式二</span><br><span class="hljs-meta">@SpringJUnitConfig(locations = &quot;classpath:beans.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringJUnit5Test</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> User user;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUser</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-2、整合-JUnit4"><a href="#6-2、整合-JUnit4" class="headerlink" title="6.2、整合 JUnit4"></a>6.2、整合 JUnit4</h3><p>JUnit4 在公司也会经常用到，在此也学习一下</p><h4 id="6-2-1、添加依赖"><a href="#6-2-1、添加依赖" class="headerlink" title="6.2.1、添加依赖"></a>6.2.1、添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- junit测试 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="6-2-2、测试"><a href="#6-2-2、测试" class="headerlink" title="6.2.2、测试"></a>6.2.2、测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.atguigu.spring6.bean.User;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.test.context.ContextConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;<br><br><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(&quot;classpath:beans.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringJUnit4Test</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> User user;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUser</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7、事务"><a href="#7、事务" class="headerlink" title="7、事务"></a>7、事务</h2><h3 id="7-1、JdbcTemplate"><a href="#7-1、JdbcTemplate" class="headerlink" title="7.1、JdbcTemplate"></a>7.1、JdbcTemplate</h3><h4 id="7-1-1、简介"><a href="#7-1-1、简介" class="headerlink" title="7.1.1、简介"></a>7.1.1、简介</h4><p><img src="/images%5Cspring6%5Cimage-20221217115515670.png#alt=image-20221217115515670"></p><p>Spring 框架对 JDBC 进行封装，使用 JdbcTemplate 方便实现对数据库操作</p><h4 id="7-1-2、准备工作"><a href="#7-1-2、准备工作" class="headerlink" title="7.1.2、准备工作"></a>7.1.2、准备工作</h4><p><strong>① 搭建子模块</strong></p><p>搭建子模块：spring-jdbc-tx</p><p><strong>② 加入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--spring jdbc  Spring 持久化层支持jar包--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 数据源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.15<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>③ 创建 jdbc.properties</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">jdbc.user</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">jdbc.password</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/spring?characterEncoding=utf8&amp;useSSL=false</span><br><span class="hljs-attr">jdbc.driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br></code></pre></td></tr></table></figure><p><strong>④ 配置 Spring 的配置文件</strong></p><p>beans.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 导入外部属性文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置数据源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置 JdbcTemplate --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 装配数据源 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>⑤ 准备数据库与测试表</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">CREATE DATABASE `spring`;<br><br>use `spring`;<br><br>CREATE TABLE `t_emp` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) NOT NULL AUTO_INCREMENT,<br>  `name` varchar(<span class="hljs-number">20</span>) DEFAULT NULL COMMENT <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>  `age` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) DEFAULT NULL COMMENT <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>  `sex` varchar(<span class="hljs-number">2</span>) DEFAULT NULL COMMENT <span class="hljs-string">&#x27;性别&#x27;</span>,<br>  PRIMARY <span class="hljs-title function_">KEY</span> <span class="hljs-params">(`id`)</span><br>) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;<br></code></pre></td></tr></table></figure><h4 id="7-1-3、实现-CURD"><a href="#7-1-3、实现-CURD" class="headerlink" title="7.1.3、实现 CURD"></a>7.1.3、实现 CURD</h4><h5 id="①-装配-JdbcTemplate"><a href="#①-装配-JdbcTemplate" class="headerlink" title="① 装配 JdbcTemplate"></a>① 装配 JdbcTemplate</h5><p><strong>创建测试类，整合 JUnit，注入 JdbcTemplate</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit.jupiter.SpringJUnitConfig;<br><br><span class="hljs-meta">@SpringJUnitConfig(locations = &quot;classpath:beans.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCTemplateTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="②-测试增删改功能"><a href="#②-测试增删改功能" class="headerlink" title="② 测试增删改功能"></a>② 测试增删改功能</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-comment">//测试增删改功能</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdate</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//添加功能</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into t_emp values(null,?,?,?)&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> jdbcTemplate.update(sql, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-string">&quot;男&quot;</span>);<br><br>    <span class="hljs-comment">//修改功能</span><br><span class="hljs-comment">//String sql = &quot;update t_emp set name=? where id=?&quot;;</span><br>    <span class="hljs-comment">//int result = jdbcTemplate.update(sql, &quot;张三atguigu&quot;, 1);</span><br><br>    <span class="hljs-comment">//删除功能</span><br><span class="hljs-comment">//String sql = &quot;delete from t_emp where id=?&quot;;</span><br><span class="hljs-comment">//int result = jdbcTemplate.update(sql, 1);</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="③-查询数据返回对象"><a href="#③-查询数据返回对象" class="headerlink" title="③ 查询数据返回对象"></a>③ 查询数据返回对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Emp</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String sex;<br><br>    <span class="hljs-comment">//生成get和set方法</span><br>    <span class="hljs-comment">//......</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Emp&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询：返回对象</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectObject</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//写法一</span><br><span class="hljs-comment">//        String sql = &quot;select * from t_emp where id=?&quot;;</span><br><span class="hljs-comment">//        Emp empResult = jdbcTemplate.queryForObject(sql,</span><br><span class="hljs-comment">//                (rs, rowNum) -&gt; &#123;</span><br><span class="hljs-comment">//                    Emp emp = new Emp();</span><br><span class="hljs-comment">//                    emp.setId(rs.getInt(&quot;id&quot;));</span><br><span class="hljs-comment">//                    emp.setName(rs.getString(&quot;name&quot;));</span><br><span class="hljs-comment">//                    emp.setAge(rs.getInt(&quot;age&quot;));</span><br><span class="hljs-comment">//                    emp.setSex(rs.getString(&quot;sex&quot;));</span><br><span class="hljs-comment">//                    return emp;</span><br><span class="hljs-comment">//                &#125;, 1);</span><br><span class="hljs-comment">//        System.out.println(empResult);</span><br><br>    <span class="hljs-comment">//写法二</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from t_emp where id=?&quot;</span>;<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(sql,<br>                  <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;&gt;(Emp.class),<span class="hljs-number">1</span>);<br>    System.out.println(emp);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="④-查询数据返回-list-集合"><a href="#④-查询数据返回-list-集合" class="headerlink" title="④ 查询数据返回 list 集合"></a>④ 查询数据返回 list 集合</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-comment">//查询多条数据为一个list集合</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectList</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from t_emp&quot;</span>;<br>    List&lt;Emp&gt; list = jdbcTemplate.query(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;&gt;(Emp.class));<br>    System.out.println(list);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="⑤-查询返回单个的值"><a href="#⑤-查询返回单个的值" class="headerlink" title="⑤ 查询返回单个的值"></a>⑤ 查询返回单个的值</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-comment">//查询单行单列的值</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectCount</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select count(id) from t_emp&quot;</span>;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(sql, Integer.class);<br>    System.out.println(count);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-2、声明式事务概念"><a href="#7-2、声明式事务概念" class="headerlink" title="7.2、声明式事务概念"></a>7.2、声明式事务概念</h3><h4 id="7-2-1、事务基本概念"><a href="#7-2-1、事务基本概念" class="headerlink" title="7.2.1、事务基本概念"></a>7.2.1、事务基本概念</h4><h5 id="①-什么是事务"><a href="#①-什么是事务" class="headerlink" title="① 什么是事务"></a>① 什么是事务</h5><p>数据库事务( transaction)是访问并可能操作各种数据项的一个数据库操作序列，这些操作要么全部执行,要么全部不执行，是一个不可分割的工作单位。事务由事务开始与事务结束之间执行的全部数据库操作组成。</p><h5 id="②-事务的特性"><a href="#②-事务的特性" class="headerlink" title="② 事务的特性"></a>② 事务的特性</h5><p><strong>A：原子性(Atomicity)</strong></p><p>一个事务(transaction)中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p><p><strong>C：一致性(Consistency)</strong></p><p>事务的一致性指的是在一个事务执行之前和执行之后数据库都必须处于一致性状态。</p><p>如果事务成功地完成，那么系统中所有变化将正确地应用，系统处于有效状态。</p><p>如果在事务中出现错误，那么系统中的所有变化将自动地回滚，系统返回到原始状态。</p><p><strong>I：隔离性(Isolation)</strong></p><p>指的是在并发环境中，当不同的事务同时操纵相同的数据时，每个事务都有各自的完整数据空间。由并发事务所做的修改必须与任何其他并发事务所做的修改隔离。事务查看数据更新时，数据所处的状态要么是另一事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看到中间状态的数据。</p><p><strong>D：持久性(Durability)</strong></p><p>指的是只要事务成功结束，它对数据库所做的更新就必须保存下来。即使发生系统崩溃，重新启动数据库系统后，数据库还能恢复到事务成功结束时的状态。</p><h4 id="7-2-2、编程式事务"><a href="#7-2-2、编程式事务" class="headerlink" title="7.2.2、编程式事务"></a>7.2.2、编程式事务</h4><p>事务功能的相关操作全部通过自己编写代码来实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> ...;<br><br><span class="hljs-keyword">try</span> &#123;<br><br>    <span class="hljs-comment">// 开启事务：关闭事务的自动提交</span><br>    conn.setAutoCommit(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-comment">// 核心操作</span><br><br>    <span class="hljs-comment">// 提交事务</span><br>    conn.commit();<br><br>&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br><br>    <span class="hljs-comment">// 回滚事务</span><br>    conn.rollBack();<br><br>&#125;<span class="hljs-keyword">finally</span>&#123;<br><br>    <span class="hljs-comment">// 释放数据库连接</span><br>    conn.close();<br><br>&#125;<br></code></pre></td></tr></table></figure><p>编程式的实现方式存在缺陷：</p><ul><li>细节没有被屏蔽：具体操作过程中，所有细节都需要程序员自己来完成，比较繁琐。</li><li>代码复用性不高：如果没有有效抽取出来，每次实现功能都需要自己编写代码，代码就没有得到复用。</li></ul><h4 id="7-2-3、声明式事务"><a href="#7-2-3、声明式事务" class="headerlink" title="7.2.3、声明式事务"></a>7.2.3、声明式事务</h4><p>既然事务控制的代码有规律可循，代码的结构基本是确定的，所以框架就可以将固定模式的代码抽取出来，进行相关的封装。</p><p>封装起来后，我们只需要在配置文件中进行简单的配置即可完成操作。</p><ul><li>好处 1：提高开发效率</li><li>好处 2：消除了冗余的代码</li><li>好处 3：框架会综合考虑相关领域中在实际开发环境下有可能遇到的各种问题，进行了健壮性、性能等各个方面的优化</li></ul><p>所以，我们可以总结下面两个概念：</p><ul><li><strong>编程式</strong>：<strong>自己写代码</strong>实现功能</li><li><strong>声明式</strong>：通过<strong>配置</strong>让<strong>框架</strong>实现功能</li></ul><h3 id="7-3、基于注解的声明式事务"><a href="#7-3、基于注解的声明式事务" class="headerlink" title="7.3、基于注解的声明式事务"></a>7.3、基于注解的声明式事务</h3><h4 id="7-3-1、准备工作"><a href="#7-3-1、准备工作" class="headerlink" title="7.3.1、准备工作"></a>7.3.1、准备工作</h4><p><strong>① 添加配置</strong></p><p>在 beans.xml 添加配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--扫描组件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.spring6&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>② 创建表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_book` (<br>  `book_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键&#x27;</span>,<br>  `book_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;图书名称&#x27;</span>,<br>  `price` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;价格&#x27;</span>,<br>  `stock` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;库存（无符号）&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`book_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">3</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><span class="hljs-keyword">insert</span>  <span class="hljs-keyword">into</span> `t_book`(`book_id`,`book_name`,`price`,`stock`) <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;斗破苍穹&#x27;</span>,<span class="hljs-number">80</span>,<span class="hljs-number">100</span>),(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;斗罗大陆&#x27;</span>,<span class="hljs-number">50</span>,<span class="hljs-number">100</span>);<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_user` (<br>  `user_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键&#x27;</span>,<br>  `username` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;用户名&#x27;</span>,<br>  `balance` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;余额（无符号）&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`user_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><span class="hljs-keyword">insert</span>  <span class="hljs-keyword">into</span> `t_user`(`user_id`,`username`,`balance`) <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-number">50</span>);<br></code></pre></td></tr></table></figure><p><strong>③ 创建组件</strong></p><p>创建 BookController：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.controller;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BookService bookService;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">(Integer bookId, Integer userId)</span>&#123;<br>        bookService.buyBook(bookId, userId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建接口 BookService：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.service;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookService</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">(Integer bookId, Integer userId)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建实现类 BookServiceImpl：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.service.impl;<br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BookDao bookDao;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">(Integer bookId, Integer userId)</span> &#123;<br>        <span class="hljs-comment">//查询图书的价格</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> bookDao.getPriceByBookId(bookId);<br>        <span class="hljs-comment">//更新图书的库存</span><br>        bookDao.updateStock(bookId);<br>        <span class="hljs-comment">//更新用户的余额</span><br>        bookDao.updateBalance(userId, price);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建接口 BookDao：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.dao;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    Integer <span class="hljs-title function_">getPriceByBookId</span><span class="hljs-params">(Integer bookId)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateStock</span><span class="hljs-params">(Integer bookId)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateBalance</span><span class="hljs-params">(Integer userId, Integer price)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建实现类 BookDaoImpl：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.dao.impl;<br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getPriceByBookId</span><span class="hljs-params">(Integer bookId)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select price from t_book where book_id = ?&quot;</span>;<br>        <span class="hljs-keyword">return</span> jdbcTemplate.queryForObject(sql, Integer.class, bookId);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateStock</span><span class="hljs-params">(Integer bookId)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update t_book set stock = stock - 1 where book_id = ?&quot;</span>;<br>        jdbcTemplate.update(sql, bookId);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateBalance</span><span class="hljs-params">(Integer userId, Integer price)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update t_user set balance = balance - ? where user_id = ?&quot;</span>;<br>        jdbcTemplate.update(sql, price, userId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-3-2、测试无事务情况"><a href="#7-3-2、测试无事务情况" class="headerlink" title="7.3.2、测试无事务情况"></a>7.3.2、测试无事务情况</h4><p><strong>① 创建测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit.jupiter.SpringJUnitConfig;<br><br><span class="hljs-meta">@SpringJUnitConfig(locations = &quot;classpath:beans.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TxByAnnotationTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BookController bookController;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBuyBook</span><span class="hljs-params">()</span>&#123;<br>        bookController.buyBook(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>② 模拟场景</strong></p><p>用户购买图书，先查询图书的价格，再更新图书的库存和用户的余额</p><p>假设用户 id 为 1 的用户，购买 id 为 1 的图书</p><p>用户余额为 50，而图书价格为 80</p><p>购买图书之后，用户的余额为-30，数据库中余额字段设置了无符号，因此无法将-30 插入到余额字段</p><p>此时执行 sql 语句会抛出 SQLException</p><p><strong>③ 观察结果</strong></p><p>因为没有添加事务，图书的库存更新了，但是用户的余额没有更新</p><p>显然这样的结果是错误的，购买图书是一个完整的功能，更新库存和更新余额要么都成功要么都失败</p><h4 id="7-3-3、加入事务"><a href="#7-3-3、加入事务" class="headerlink" title="7.3.3、加入事务"></a>7.3.3、加入事务</h4><h5 id="①-添加事务配置"><a href="#①-添加事务配置" class="headerlink" title="① 添加事务配置"></a>① 添加事务配置</h5><p>在 spring 配置文件中引入 tx 命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/tx</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 Spring 的配置文件中添加配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    开启事务的注解驱动</span><br><span class="hljs-comment">    通过注解@Transactional所标识的方法或标识的类中所有的方法，都会被事务管理器管理事务</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-comment">&lt;!-- transaction-manager属性的默认值是transactionManager，如果事务管理器bean的id正好就是这个默认值，则可以省略这个属性 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h5 id="②-添加事务注解"><a href="#②-添加事务注解" class="headerlink" title="② 添加事务注解"></a>② 添加事务注解</h5><p>因为 service 层表示业务逻辑层，一个方法表示一个完成的功能，因此处理事务一般在 service 层处理</p><p>**在 BookServiceImpl 的 buybook()添加注解<a href="/Transactional">@Transactional </a> **</p><h5 id="③-观察结果"><a href="#③-观察结果" class="headerlink" title="③ 观察结果"></a>③ 观察结果</h5><p>由于使用了 Spring 的声明式事务，更新库存和更新余额都没有执行</p><h4 id="7-3-4、-Transactional-注解标识的位置"><a href="#7-3-4、-Transactional-注解标识的位置" class="headerlink" title="7.3.4、@Transactional 注解标识的位置"></a>7.3.4、@Transactional 注解标识的位置</h4><p>@Transactional 标识在方法上，则只会影响该方法</p><p>@Transactional 标识的类上，则会影响类中所有的方法</p><h4 id="7-3-5、事务属性：只读"><a href="#7-3-5、事务属性：只读" class="headerlink" title="7.3.5、事务属性：只读"></a>7.3.5、事务属性：只读</h4><p><strong>① 介绍</strong></p><p>对一个查询操作来说，如果我们把它设置成只读，就能够明确告诉数据库，这个操作不涉及写操作。这样数据库就能够针对查询操作来进行优化。</p><p><strong>② 使用方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(readOnly = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">(Integer bookId, Integer userId)</span> &#123;<br>    <span class="hljs-comment">//查询图书的价格</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> bookDao.getPriceByBookId(bookId);<br>    <span class="hljs-comment">//更新图书的库存</span><br>    bookDao.updateStock(bookId);<br>    <span class="hljs-comment">//更新用户的余额</span><br>    bookDao.updateBalance(userId, price);<br>    <span class="hljs-comment">//System.out.println(1/0);</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>③ 注意</strong></p><p>对增删改操作设置只读会抛出下面异常：</p><p>Caused by: java.sql.SQLException: Connection is read-only. Queries leading to data modification are not allowed</p><h4 id="7-3-6、事务属性：超时"><a href="#7-3-6、事务属性：超时" class="headerlink" title="7.3.6、事务属性：超时"></a>7.3.6、事务属性：超时</h4><p><strong>① 介绍</strong></p><p>事务在执行过程中，有可能因为遇到某些问题，导致程序卡住，从而长时间占用数据库资源。而长时间占用资源，大概率是因为程序运行出现了问题（可能是 Java 程序或 MySQL 数据库或网络连接等等）。此时这个很可能出问题的程序应该被回滚，撤销它已做的操作，事务结束，把资源让出来，让其他正常程序可以执行。</p><p>概括来说就是一句话：超时回滚，释放资源。</p><p><strong>② 使用方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//超时时间单位秒</span><br><span class="hljs-meta">@Transactional(timeout = 3)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">(Integer bookId, Integer userId)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        TimeUnit.SECONDS.sleep(<span class="hljs-number">5</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-comment">//查询图书的价格</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> bookDao.getPriceByBookId(bookId);<br>    <span class="hljs-comment">//更新图书的库存</span><br>    bookDao.updateStock(bookId);<br>    <span class="hljs-comment">//更新用户的余额</span><br>    bookDao.updateBalance(userId, price);<br>    <span class="hljs-comment">//System.out.println(1/0);</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>③ 观察结果</strong></p><p>执行过程中抛出异常：</p><p>org.springframework.transaction.<strong>TransactionTimedOutException</strong>: Transaction timed out: deadline was Fri Jun 04 16:25:39 CST 2022</p><h4 id="7-3-7、事务属性：回滚策略"><a href="#7-3-7、事务属性：回滚策略" class="headerlink" title="7.3.7、事务属性：回滚策略"></a>7.3.7、事务属性：回滚策略</h4><p><strong>① 介绍</strong></p><p>声明式事务默认只针对运行时异常回滚，编译时异常不回滚。</p><p>可以通过@Transactional 中相关属性设置回滚策略</p><ul><li><p>rollbackFor 属性：需要设置一个 Class 类型的对象</p></li><li><p>rollbackForClassName 属性：需要设置一个字符串类型的全类名</p></li><li><p>noRollbackFor 属性：需要设置一个 Class 类型的对象</p></li><li><p>rollbackFor 属性：需要设置一个字符串类型的全类名</p></li></ul><p><strong>② 使用方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(noRollbackFor = ArithmeticException.class)</span><br><span class="hljs-comment">//@Transactional(noRollbackForClassName = &quot;java.lang.ArithmeticException&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">(Integer bookId, Integer userId)</span> &#123;<br>    <span class="hljs-comment">//查询图书的价格</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> bookDao.getPriceByBookId(bookId);<br>    <span class="hljs-comment">//更新图书的库存</span><br>    bookDao.updateStock(bookId);<br>    <span class="hljs-comment">//更新用户的余额</span><br>    bookDao.updateBalance(userId, price);<br>    System.out.println(<span class="hljs-number">1</span>/<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>③ 观察结果</strong></p><p>虽然购买图书功能中出现了数学运算异常（ArithmeticException），但是我们设置的回滚策略是，当出现 ArithmeticException 不发生回滚，因此购买图书的操作正常执行</p><h4 id="7-3-8、事务属性：隔离级别"><a href="#7-3-8、事务属性：隔离级别" class="headerlink" title="7.3.8、事务属性：隔离级别"></a>7.3.8、事务属性：隔离级别</h4><p><strong>① 介绍</strong></p><p>数据库系统必须具有隔离并发运行各个事务的能力，使它们不会相互影响，避免各种并发问题。一个事务与其他事务隔离的程度称为隔离级别。SQL 标准中规定了多种事务隔离级别，不同隔离级别对应不同的干扰程度，隔离级别越高，数据一致性就越好，但并发性越弱。</p><p>隔离级别一共有四种：</p><ul><li>读未提交：READ UNCOMMITTED</li></ul><p>允许 Transaction01 读取 Transaction02 未提交的修改。</p><ul><li>读已提交：READ COMMITTED、</li></ul><p>要求 Transaction01 只能读取 Transaction02 已提交的修改。</p><ul><li>可重复读：REPEATABLE READ</li></ul><p>确保 Transaction01 可以多次从一个字段中读取到相同的值，即 Transaction01 执行期间禁止其它事务对这个字段进行更新。</p><ul><li>串行化：SERIALIZABLE</li></ul><p>确保 Transaction01 可以多次从一个表中读取到相同的行，在 Transaction01 执行期间，禁止其它事务对这个表进行添加、更新、删除操作。可以避免任何并发问题，但性能十分低下。</p><p>各个隔离级别解决并发问题的能力见下表：</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>READ UNCOMMITTED</td><td>有</td><td>有</td><td>有</td></tr><tr><td>READ COMMITTED</td><td>无</td><td>有</td><td>有</td></tr><tr><td>REPEATABLE READ</td><td>无</td><td>无</td><td>有</td></tr><tr><td>SERIALIZABLE</td><td>无</td><td>无</td><td>无</td></tr></tbody></table><p>各种数据库产品对事务隔离级别的支持程度：</p><table><thead><tr><th>隔离级别</th><th>Oracle</th><th>MySQL</th></tr></thead><tbody><tr><td>READ UNCOMMITTED</td><td>×</td><td>√</td></tr><tr><td>READ COMMITTED</td><td>√(默认)</td><td>√</td></tr><tr><td>REPEATABLE READ</td><td>×</td><td>√(默认)</td></tr><tr><td>SERIALIZABLE</td><td>√</td><td>√</td></tr></tbody></table><p><strong>② 使用方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(isolation = Isolation.DEFAULT)</span><span class="hljs-comment">//使用数据库默认的隔离级别</span><br><span class="hljs-meta">@Transactional(isolation = Isolation.READ_UNCOMMITTED)</span><span class="hljs-comment">//读未提交</span><br><span class="hljs-meta">@Transactional(isolation = Isolation.READ_COMMITTED)</span><span class="hljs-comment">//读已提交</span><br><span class="hljs-meta">@Transactional(isolation = Isolation.REPEATABLE_READ)</span><span class="hljs-comment">//可重复读</span><br><span class="hljs-meta">@Transactional(isolation = Isolation.SERIALIZABLE)</span><span class="hljs-comment">//串行化</span><br></code></pre></td></tr></table></figure><h4 id="7-3-9、事务属性：传播行为"><a href="#7-3-9、事务属性：传播行为" class="headerlink" title="7.3.9、事务属性：传播行为"></a>7.3.9、事务属性：传播行为</h4><p><strong>① 介绍</strong></p><p>什么是事务的传播行为？</p><p>在 service 类中有 a()方法和 b()方法，a()方法上有事务，b()方法上也有事务，当 a()方法执行过程中调用了 b()方法，事务是如何传递的？合并到一个事务里？还是开启一个新的事务？这就是事务传播行为。</p><p>一共有七种传播行为：</p><ul><li>REQUIRED：支持当前事务，如果不存在就新建一个(默认)<strong>【没有就新建，有就加入】</strong></li><li>SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行<strong>【有就加入，没有就不管了】</strong></li><li>MANDATORY：必须运行在一个事务中，如果当前没有事务正在发生，将抛出一个异常<strong>【有就加入，没有就抛异常】</strong></li><li>REQUIRES_NEW：开启一个新的事务，如果一个事务已经存在，则将这个存在的事务挂起<strong>【不管有没有，直接开启一个新事务，开启的新事务和之前的事务不存在嵌套关系，之前事务被挂起】</strong></li><li>NOT_SUPPORTED：以非事务方式运行，如果有事务存在，挂起当前事务<strong>【不支持事务，存在就挂起】</strong></li><li>NEVER：以非事务方式运行，如果有事务存在，抛出异常<strong>【不支持事务，存在就抛异常】</strong></li><li>NESTED：如果当前正有一个事务在进行中，则该方法应当运行在一个嵌套式事务中。被嵌套的事务可以独立于外层事务进行提交或回滚。如果外层事务不存在，行为就像 REQUIRED 一样。<strong>【有事务的话，就在这个事务里再嵌套一个完全独立的事务，嵌套的事务可以独立的提交和回滚。没有事务就和 REQUIRED 一样。】</strong></li></ul><p><strong>② 测试</strong></p><p>创建接口 CheckoutService：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CheckoutService</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkout</span><span class="hljs-params">(Integer[] bookIds, Integer userId)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建实现类 CheckoutServiceImpl：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CheckoutServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CheckoutService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BookService bookService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-comment">//一次购买多本图书</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkout</span><span class="hljs-params">(Integer[] bookIds, Integer userId)</span> &#123;<br>        <span class="hljs-keyword">for</span> (Integer bookId : bookIds) &#123;<br>            bookService.buyBook(bookId, userId);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 BookController 中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> CheckoutService checkoutService;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkout</span><span class="hljs-params">(Integer[] bookIds, Integer userId)</span>&#123;<br>    checkoutService.checkout(bookIds, userId);<br>&#125;<br></code></pre></td></tr></table></figure><p>在数据库中将用户的余额修改为 100 元</p><p><strong>③ 观察结果</strong></p><p>可以通过@Transactional 中的 propagation 属性设置事务传播行为</p><p>修改 BookServiceImpl 中 buyBook()上，注解@Transactional 的 propagation 属性</p><p><a href="/Transactional(propagation">@Transactional(propagation </a> &#x3D; Propagation.REQUIRED)，默认情况，表示如果当前线程上有已经开启的事务可用，那么就在这个事务中运行。经过观察，购买图书的方法 buyBook()在 checkout()中被调用，checkout()上有事务注解，因此在此事务中执行。所购买的两本图书的价格为 80 和 50，而用户的余额为 100，因此在购买第二本图书时余额不足失败，导致整个 checkout()回滚，即只要有一本书买不了，就都买不了</p><p><a href="/Transactional(propagation">@Transactional(propagation </a> &#x3D; Propagation.REQUIRES_NEW)，表示不管当前线程上是否有已经开启的事务，都要开启新事务。同样的场景，每次购买图书都是在 buyBook()的事务中执行，因此第一本图书购买成功，事务结束，第二本图书购买失败，只在第二次的 buyBook()中回滚，购买第一本图书不受影响，即能买几本就买几本。</p><h4 id="7-3-10、全注解配置事务"><a href="#7-3-10、全注解配置事务" class="headerlink" title="7.3.10、全注解配置事务"></a>7.3.10、全注解配置事务</h4><p><strong>① 添加配置类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.config;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;<br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.atguigu.spring6&quot;)</span><br><span class="hljs-meta">@EnableTransactionManagement</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">getDataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        dataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        dataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/spring?characterEncoding=utf8&amp;useSSL=false&quot;</span>);<br>        dataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSource.setPassword(<span class="hljs-string">&quot;root&quot;</span>);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(name = &quot;jdbcTemplate&quot;)</span><br>    <span class="hljs-keyword">public</span> JdbcTemplate <span class="hljs-title function_">getJdbcTemplate</span><span class="hljs-params">(DataSource dataSource)</span>&#123;<br>        <span class="hljs-type">JdbcTemplate</span> <span class="hljs-variable">jdbcTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTemplate</span>();<br>        jdbcTemplate.setDataSource(dataSource);<br>        <span class="hljs-keyword">return</span> jdbcTemplate;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSourceTransactionManager <span class="hljs-title function_">getDataSourceTransactionManager</span><span class="hljs-params">(DataSource dataSource)</span>&#123;<br>        <span class="hljs-type">DataSourceTransactionManager</span> <span class="hljs-variable">dataSourceTransactionManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceTransactionManager</span>();<br>        dataSourceTransactionManager.setDataSource(dataSource);<br>        <span class="hljs-keyword">return</span> dataSourceTransactionManager;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>② 测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.atguigu.spring6.config.SpringConfig;<br><span class="hljs-keyword">import</span> com.atguigu.spring6.controller.BookController;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit.jupiter.SpringJUnitConfig;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TxByAllAnnotationTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTxAllAnnotation</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br>        <span class="hljs-type">BookController</span> <span class="hljs-variable">accountService</span> <span class="hljs-operator">=</span> applicationContext.getBean(<span class="hljs-string">&quot;bookController&quot;</span>, BookController.class);<br>        accountService.buyBook(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-4、基于-XML-的声明式事务"><a href="#7-4、基于-XML-的声明式事务" class="headerlink" title="7.4、基于 XML 的声明式事务"></a>7.4、基于 XML 的声明式事务</h3><h4 id="7-3-1、场景模拟"><a href="#7-3-1、场景模拟" class="headerlink" title="7.3.1、场景模拟"></a>7.3.1、场景模拟</h4><p>参考基于注解的声明式事务</p><h4 id="7-3-2、修改-Spring-配置文件"><a href="#7-3-2、修改-Spring-配置文件" class="headerlink" title="7.3.2、修改 Spring 配置文件"></a>7.3.2、修改 Spring 配置文件</h4><p>将 Spring 配置文件中去掉 tx:annotation-driven 标签，并添加配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置事务通知和切入点表达式 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">pointcut</span>=<span class="hljs-string">&quot;execution(* com.atguigu.spring.tx.xml.service.impl.*.*(..))&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:advisor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><span class="hljs-comment">&lt;!-- tx:advice标签：配置事务通知 --&gt;</span><br><span class="hljs-comment">&lt;!-- id属性：给事务通知标签设置唯一标识，便于引用 --&gt;</span><br><span class="hljs-comment">&lt;!-- transaction-manager属性：关联事务管理器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- tx:method标签：配置具体的事务方法 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- name属性：指定方法名，可以使用星号代表多个字符 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;get*&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;query*&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;find*&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- read-only属性：设置只读属性 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- rollback-for属性：设置回滚的异常 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- no-rollback-for属性：设置不回滚的异常 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- isolation属性：设置事务的隔离级别 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- timeout属性：设置事务的超时属性 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- propagation属性：设置事务的传播行为 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;save*&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">rollback-for</span>=<span class="hljs-string">&quot;java.lang.Exception&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;update*&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">rollback-for</span>=<span class="hljs-string">&quot;java.lang.Exception&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;delete*&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">rollback-for</span>=<span class="hljs-string">&quot;java.lang.Exception&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：基于 xml 实现的声明式事务，必须引入 aspectJ 的依赖</p></blockquote><blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></blockquote><pre><code class="hljs"> &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt; &lt;version&gt;6.0.2&lt;/version&gt;</code></pre></dependency><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br><span class="hljs-meta">## 8、资源操作：Resources</span><br><br><span class="hljs-meta">### 8.1、Spring Resources 概述</span><br><br>![](images%<span class="hljs-number">5</span>Cspring6%<span class="hljs-number">5</span>Cimage<span class="hljs-number">-20221218154945878.</span>png<span class="hljs-meta">#alt=image-20221218154945878)</span><br><br>![](images%<span class="hljs-number">5</span>Cspring6%<span class="hljs-number">5</span>Cimage<span class="hljs-number">-20221206231535991.</span>png<span class="hljs-meta">#alt=image-20221206231535991)</span><br><br>Java 的标准 java.net.URL 类和各种 URL 前缀的标准处理程序无法满足所有对 low-level 资源的访问，比如：没有标准化的 URL 实现可用于访问需要从类路径或相对于 ServletContext 获取的资源。并且缺少某些 Spring 所需要的功能，例如检测某资源是否存在等。**而 Spring 的 Resource 声明了访问 low-level 资源的能力。**<br><br><span class="hljs-meta">### 8.2、Resource 接口</span><br><br>Spring 的 Resource 接口位于 org.springframework.core.io 中。 旨在成为一个更强大的接口，用于抽象对低级资源的访问。以下显示了 Resource 接口定义的方法<br><br>```java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">Resource</span> <span class="hljs-title">extends</span> <span class="hljs-title">InputStreamSource</span> &#123;<br><br>    <span class="hljs-function">boolean <span class="hljs-title">exists</span>()</span>;<br><br>    <span class="hljs-function">boolean <span class="hljs-title">isReadable</span>()</span>;<br><br>    <span class="hljs-function">boolean <span class="hljs-title">isOpen</span>()</span>;<br><br>    <span class="hljs-function">boolean <span class="hljs-title">isFile</span>()</span>;<br><br>    <span class="hljs-function">URL <span class="hljs-title">getURL</span>() throws IOException</span>;<br><br>    <span class="hljs-function">URI <span class="hljs-title">getURI</span>() throws IOException</span>;<br><br>    <span class="hljs-function">File <span class="hljs-title">getFile</span>() throws IOException</span>;<br><br>    <span class="hljs-function">ReadableByteChannel <span class="hljs-title">readableChannel</span>() throws IOException</span>;<br><br>    <span class="hljs-function"><span class="hljs-built_in">long</span> <span class="hljs-title">contentLength</span>() throws IOException</span>;<br><br>    <span class="hljs-function"><span class="hljs-built_in">long</span> <span class="hljs-title">lastModified</span>() throws IOException</span>;<br><br>    <span class="hljs-function">Resource <span class="hljs-title">createRelative</span>(<span class="hljs-params">String relativePath</span>) throws IOException</span>;<br><br>    <span class="hljs-function">String <span class="hljs-title">getFilename</span>()</span>;<br><br>    <span class="hljs-function">String <span class="hljs-title">getDescription</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Resource 接口继承了 InputStreamSource 接口，提供了很多 InputStreamSource 所没有的方法。InputStreamSource 接口，只有一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">InputStreamSource</span> &#123;<br><br>    InputStream <span class="hljs-title function_">getInputStream</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>其中一些重要的方法：</strong></p><p>getInputStream(): 找到并打开资源，返回一个 InputStream 以从资源中读取。预计每次调用都会返回一个新的 InputStream()，调用者有责任关闭每个流</p><p>exists(): 返回一个布尔值，表明某个资源是否以物理形式存在</p><p>isOpen: 返回一个布尔值，指示此资源是否具有开放流的句柄。如果为 true，InputStream 就不能够多次读取，只能够读取一次并且及时关闭以避免内存泄漏。对于所有常规资源实现，返回 false，但是 InputStreamResource 除外。</p><p>getDescription(): 返回资源的描述，用来输出错误的日志。这通常是完全限定的文件名或资源的实际 URL。</p><p><strong>其他方法：</strong></p><p>isReadable(): 表明资源的目录读取是否通过 getInputStream()进行读取。</p><p>isFile(): 表明这个资源是否代表了一个文件系统的文件。</p><p>getURL(): 返回一个 URL 句柄，如果资源不能够被解析为 URL，将抛出 IOException</p><p>getURI(): 返回一个资源的 URI 句柄</p><p>getFile(): 返回某个文件，如果资源不能够被解析称为绝对路径，将会抛出 FileNotFoundException</p><p>lastModified(): 资源最后一次修改的时间戳</p><p>createRelative(): 创建此资源的相关资源</p><p>getFilename(): 资源的文件名是什么 例如：最后一部分的文件名 myfile.txt</p><h3 id="8-3、Resource-的实现类"><a href="#8-3、Resource-的实现类" class="headerlink" title="8.3、Resource 的实现类"></a>8.3、Resource 的实现类</h3><p>Resource 接口是 Spring 资源访问策略的抽象，它本身并不提供任何资源访问实现，具体的资源访问由该接口的实现类完成——每个实现类代表一种资源访问策略。Resource 一般包括这些实现类：UrlResource、ClassPathResource、FileSystemResource、ServletContextResource、InputStreamResource、ByteArrayResource</p><h4 id="8-3-1、UrlResource-访问网络资源"><a href="#8-3-1、UrlResource-访问网络资源" class="headerlink" title="8.3.1、UrlResource 访问网络资源"></a>8.3.1、UrlResource 访问网络资源</h4><p>Resource 的一个实现类，用来访问网络资源，它支持 URL 的绝对路径。</p><p>http:——该前缀用于访问基于 HTTP 协议的网络资源。</p><p>ftp:——该前缀用于访问基于 FTP 协议的网络资源</p><p>file: ——该前缀用于从文件系统中读取资源</p><p><strong>实验：访问基于 HTTP 协议的网络资源</strong></p><p><strong>创建一个 maven 子模块 spring6-resources，配置 Spring 依赖（参考前面）</strong></p><p><img src="/images%5Cspring6%5Cimage-20221207102315185.png#alt=image-20221207102315185"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.resources;<br><br><span class="hljs-keyword">import</span> org.springframework.core.io.UrlResource;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UrlResourceDemo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadAndReadUrlResource</span><span class="hljs-params">(String path)</span>&#123;<br>        <span class="hljs-comment">// 创建一个 Resource 对象</span><br>        <span class="hljs-type">UrlResource</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            url = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlResource</span>(path);<br>            <span class="hljs-comment">// 获取资源名</span><br>            System.out.println(url.getFilename());<br>            System.out.println(url.getURI());<br>            <span class="hljs-comment">// 获取资源描述</span><br>            System.out.println(url.getDescription());<br>            <span class="hljs-comment">//获取资源内容</span><br>            System.out.println(url.getInputStream().read());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//访问网络资源</span><br>        loadAndReadUrlResource(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>实验二：在项目根路径下创建文件，从文件系统中读取资源</strong></p><p>方法不变，修改调用传递路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//1 访问网络资源</span><br><span class="hljs-comment">//loadAndReadUrlResource(&quot;http://www.atguigu.com&quot;);</span><br><br>    <span class="hljs-comment">//2 访问文件系统资源</span><br>    loadAndReadUrlResource(<span class="hljs-string">&quot;file:atguigu.txt&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8-3-2、ClassPathResource-访问类路径下资源"><a href="#8-3-2、ClassPathResource-访问类路径下资源" class="headerlink" title="8.3.2、ClassPathResource 访问类路径下资源"></a>8.3.2、ClassPathResource 访问类路径下资源</h4><p>ClassPathResource 用来访问类加载路径下的资源，相对于其他的 Resource 实现类，其主要优势是方便访问类加载路径里的资源，尤其对于 Web 应用，ClassPathResource 可自动搜索位于 classes 下的资源文件，无须使用绝对路径访问。</p><p><strong>实验：在类路径下创建文件 atguigu.txt，使用 ClassPathResource 访问</strong></p><p><img src="/images%5Cspring6%5Cimage-20221207103020854.png#alt=image-20221207103020854"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.resources;<br><br><span class="hljs-keyword">import</span> org.springframework.core.io.ClassPathResource;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassPathResourceDemo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadAndReadUrlResource</span><span class="hljs-params">(String path)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// 创建一个 Resource 对象</span><br>        <span class="hljs-type">ClassPathResource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(path);<br>        <span class="hljs-comment">// 获取文件名</span><br>        System.out.println(<span class="hljs-string">&quot;resource.getFileName = &quot;</span> + resource.getFilename());<br>        <span class="hljs-comment">// 获取文件描述</span><br>        System.out.println(<span class="hljs-string">&quot;resource.getDescription = &quot;</span>+ resource.getDescription());<br>        <span class="hljs-comment">//获取文件内容</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> resource.getInputStream();<br>        <span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">while</span>(in.read(b)!=-<span class="hljs-number">1</span>) &#123;<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(b));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        loadAndReadUrlResource(<span class="hljs-string">&quot;atguigu.txt&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ClassPathResource 实例可使用 ClassPathResource 构造器显式地创建，但更多的时候它都是隐式地创建的。当执行 Spring 的某个方法时，该方法接受一个代表资源路径的字符串参数，当 Spring 识别该字符串参数中包含 classpath:前缀后，系统会自动创建 ClassPathResource 对象。</p><h4 id="8-3-3、FileSystemResource-访问文件系统资源"><a href="#8-3-3、FileSystemResource-访问文件系统资源" class="headerlink" title="8.3.3、FileSystemResource 访问文件系统资源"></a>8.3.3、FileSystemResource 访问文件系统资源</h4><p>Spring 提供的 FileSystemResource 类用于访问文件系统资源，使用 FileSystemResource 来访问文件系统资源并没有太大的优势，因为 Java 提供的 File 类也可用于访问文件系统资源。</p><p><strong>实验：使用 FileSystemResource 访问文件系统资源</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.resources;<br><br><span class="hljs-keyword">import</span> org.springframework.core.io.FileSystemResource;<br><br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileSystemResourceDemo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadAndReadUrlResource</span><span class="hljs-params">(String path)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//相对路径</span><br>        <span class="hljs-type">FileSystemResource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileSystemResource</span>(<span class="hljs-string">&quot;atguigu.txt&quot;</span>);<br>        <span class="hljs-comment">//绝对路径</span><br>        <span class="hljs-comment">//FileSystemResource resource = new FileSystemResource(&quot;C:\\atguigu.txt&quot;);</span><br>        <span class="hljs-comment">// 获取文件名</span><br>        System.out.println(<span class="hljs-string">&quot;resource.getFileName = &quot;</span> + resource.getFilename());<br>        <span class="hljs-comment">// 获取文件描述</span><br>        System.out.println(<span class="hljs-string">&quot;resource.getDescription = &quot;</span>+ resource.getDescription());<br>        <span class="hljs-comment">//获取文件内容</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> resource.getInputStream();<br>        <span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">while</span>(in.read(b)!=-<span class="hljs-number">1</span>) &#123;<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(b));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        loadAndReadUrlResource(<span class="hljs-string">&quot;atguigu.txt&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>FileSystemResource 实例可使用 FileSystemResource 构造器显示地创建，但更多的时候它都是隐式创建。执行 Spring 的某个方法时，该方法接受一个代表资源路径的字符串参数，当 Spring 识别该字符串参数中包含 file:前缀后，系统将会自动创建 FileSystemResource 对象。</p><h4 id="8-3-4、ServletContextResource"><a href="#8-3-4、ServletContextResource" class="headerlink" title="8.3.4、ServletContextResource"></a>8.3.4、ServletContextResource</h4><p>这是 ServletContext 资源的 Resource 实现，它解释相关 Web 应用程序根目录中的相对路径。它始终支持流(stream)访问和 URL 访问，但只有在扩展 Web 应用程序存档且资源实际位于文件系统上时才允许 java.io.File 访问。无论它是在文件系统上扩展还是直接从 JAR 或其他地方（如数据库）访问，实际上都依赖于 Servlet 容器。</p><h4 id="8-3-5、InputStreamResource"><a href="#8-3-5、InputStreamResource" class="headerlink" title="8.3.5、InputStreamResource"></a>8.3.5、InputStreamResource</h4><p>InputStreamResource 是给定的输入流(InputStream)的 Resource 实现。它的使用场景在没有特定的资源实现的时候使用(感觉和<a href="/Component">@Component </a> 的适用场景很相似)。与其他 Resource 实现相比，这是已打开资源的描述符。 因此，它的 isOpen()方法返回 true。如果需要将资源描述符保留在某处或者需要多次读取流，请不要使用它。</p><h4 id="8-3-6、ByteArrayResource"><a href="#8-3-6、ByteArrayResource" class="headerlink" title="8.3.6、ByteArrayResource"></a>8.3.6、ByteArrayResource</h4><p>字节数组的 Resource 实现类。通过给定的数组创建了一个 ByteArrayInputStream。它对于从任何给定的字节数组加载内容非常有用，而无需求助于单次使用的 InputStreamResource。</p><h3 id="8-4、Resource-类图"><a href="#8-4、Resource-类图" class="headerlink" title="8.4、Resource 类图"></a>8.4、Resource 类图</h3><p>上述 Resource 实现类与 Resource 顶级接口之间的关系可以用下面的 UML 关系模型来表示</p><p><img src="/images%5Cspring6%5Cimage-20221206232920494.png#alt=image-20221206232920494"></p><h3 id="8-5、ResourceLoader-接口"><a href="#8-5、ResourceLoader-接口" class="headerlink" title="8.5、ResourceLoader 接口"></a>8.5、ResourceLoader 接口</h3><h4 id="8-5-1、ResourceLoader-概述"><a href="#8-5-1、ResourceLoader-概述" class="headerlink" title="8.5.1、ResourceLoader 概述"></a>8.5.1、ResourceLoader 概述</h4><p>Spring 提供如下两个标志性接口：</p><p><strong>（1）ResourceLoader ：</strong> 该接口实现类的实例可以获得一个 Resource 实例。</p><p><strong>（2） ResourceLoaderAware ：</strong> 该接口实现类的实例将获得一个 ResourceLoader 的引用。</p><p>在 ResourceLoader 接口里有如下方法：</p><p>（1）<strong>Resource getResource（String location）</strong> ： 该接口仅有这个方法，用于返回一个 Resource 实例。ApplicationContext 实现类都实现 ResourceLoader 接口，因此 ApplicationContext 可直接获取 Resource 实例。</p><h4 id="8-5-2、使用演示"><a href="#8-5-2、使用演示" class="headerlink" title="8.5.2、使用演示"></a>8.5.2、使用演示</h4><p><strong>实验一：ClassPathXmlApplicationContext 获取 Resource 实例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.resouceloader;<br><br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.core.io.Resource;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo1</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>();<br><span class="hljs-comment">//        通过ApplicationContext访问资源</span><br><span class="hljs-comment">//        ApplicationContext实例获取Resource实例时，</span><br><span class="hljs-comment">//        默认采用与ApplicationContext相同的资源访问策略</span><br>        <span class="hljs-type">Resource</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> ctx.getResource(<span class="hljs-string">&quot;atguigu.txt&quot;</span>);<br>        System.out.println(res.getFilename());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>实验二：FileSystemApplicationContext 获取 Resource 实例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.resouceloader;<br><br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.FileSystemXmlApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.core.io.Resource;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo2</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileSystemXmlApplicationContext</span>();<br>        <span class="hljs-type">Resource</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> ctx.getResource(<span class="hljs-string">&quot;atguigu.txt&quot;</span>);<br>        System.out.println(res.getFilename());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8-5-3、ResourceLoader-总结"><a href="#8-5-3、ResourceLoader-总结" class="headerlink" title="8.5.3、ResourceLoader 总结"></a>8.5.3、ResourceLoader 总结</h4><p>Spring 将采用和 ApplicationContext 相同的策略来访问资源。也就是说，如果 ApplicationContext 是 FileSystemXmlApplicationContext，res 就是 FileSystemResource 实例；如果 ApplicationContext 是 ClassPathXmlApplicationContext，res 就是 ClassPathResource 实例</p><p>当 Spring 应用需要进行资源访问时，实际上并不需要直接使用 Resource 实现类，而是调用 ResourceLoader 实例的 getResource()方法来获得资源，ReosurceLoader 将会负责选择 Reosurce 实现类，也就是确定具体的资源访问策略，从而将应用程序和具体的资源访问策略分离开来</p><p>另外，使用 ApplicationContext 访问资源时，可通过不同前缀指定强制使用指定的 ClassPathResource、FileSystemResource 等实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Resource</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> ctx.getResource(<span class="hljs-string">&quot;calsspath:bean.xml&quot;</span>);<br><span class="hljs-type">Resrouce</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> ctx.getResource(<span class="hljs-string">&quot;file:bean.xml&quot;</span>);<br><span class="hljs-type">Resource</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> ctx.getResource(<span class="hljs-string">&quot;http://localhost:8080/beans.xml&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="8-6、ResourceLoaderAware-接口"><a href="#8-6、ResourceLoaderAware-接口" class="headerlink" title="8.6、ResourceLoaderAware 接口"></a>8.6、ResourceLoaderAware 接口</h3><p>ResourceLoaderAware 接口实现类的实例将获得一个 ResourceLoader 的引用，ResourceLoaderAware 接口也提供了一个 setResourceLoader()方法，该方法将由 Spring 容器负责调用，Spring 容器会将一个 ResourceLoader 对象作为该方法的参数传入。</p><p>如果把实现 ResourceLoaderAware 接口的 Bean 类部署在 Spring 容器中，Spring 容器会将自身当成 ResourceLoader 作为 setResourceLoader()方法的参数传入。由于 ApplicationContext 的实现类都实现了 ResourceLoader 接口，Spring 容器自身完全可作为 ResorceLoader 使用。</p><p><strong>实验：演示 ResourceLoaderAware 使用</strong></p><p><strong>第一步 创建类，实现 ResourceLoaderAware 接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.resouceloader;<br><br><span class="hljs-keyword">import</span> org.springframework.context.ResourceLoaderAware;<br><span class="hljs-keyword">import</span> org.springframework.core.io.ResourceLoader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ResourceLoaderAware</span> &#123;<br><br>    <span class="hljs-keyword">private</span> ResourceLoader resourceLoader;<br><br>    <span class="hljs-comment">//实现ResourceLoaderAware接口必须实现的方法</span><br><span class="hljs-comment">//如果把该Bean部署在Spring容器中，该方法将会有Spring容器负责调用。</span><br><span class="hljs-comment">//SPring容器调用该方法时，Spring会将自身作为参数传给该方法。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setResourceLoader</span><span class="hljs-params">(ResourceLoader resourceLoader)</span> &#123;<br>        <span class="hljs-built_in">this</span>.resourceLoader = resourceLoader;<br>    &#125;<br><br>    <span class="hljs-comment">//返回ResourceLoader对象的应用</span><br>    <span class="hljs-keyword">public</span> ResourceLoader <span class="hljs-title function_">getResourceLoader</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.resourceLoader;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>第二步 创建 bean.xml 文件，配置 TestBean</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;testBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.resouceloader.TestBean&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>第三步 测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.resouceloader;<br><br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.core.io.Resource;<br><span class="hljs-keyword">import</span> org.springframework.core.io.ResourceLoader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo3</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//Spring容器会将一个ResourceLoader对象作为该方法的参数传入</span><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>        <span class="hljs-type">TestBean</span> <span class="hljs-variable">testBean</span> <span class="hljs-operator">=</span> ctx.getBean(<span class="hljs-string">&quot;testBean&quot;</span>,TestBean.class);<br>        <span class="hljs-comment">//获取ResourceLoader对象</span><br>        <span class="hljs-type">ResourceLoader</span> <span class="hljs-variable">resourceLoader</span> <span class="hljs-operator">=</span> testBean.getResourceLoader();<br>        System.out.println(<span class="hljs-string">&quot;Spring容器将自身注入到ResourceLoaderAware Bean 中 ？ ：&quot;</span> + (resourceLoader == ctx));<br>        <span class="hljs-comment">//加载其他资源</span><br>        <span class="hljs-type">Resource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> resourceLoader.getResource(<span class="hljs-string">&quot;atguigu.txt&quot;</span>);<br>        System.out.println(resource.getFilename());<br>        System.out.println(resource.getDescription());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-7、使用-Resource-作为属性"><a href="#8-7、使用-Resource-作为属性" class="headerlink" title="8.7、使用 Resource 作为属性"></a>8.7、使用 Resource 作为属性</h3><p>前面介绍了 Spring 提供的资源访问策略，但这些依赖访问策略要么需要使用 Resource 实现类，要么需要使用 ApplicationContext 来获取资源。实际上，当应用程序中的 Bean 实例需要访问资源时，Spring 有更好的解决方法：直接利用依赖注入。从这个意义上来看，Spring 框架不仅充分利用了策略模式来简化资源访问，而且还将策略模式和 IoC 进行充分地结合，最大程度地简化了 Spring 资源访问。</p><p>归纳起来，<strong>如果 Bean 实例需要访问资源，有如下两种解决方案：</strong></p><ul><li><strong>代码中获取 Resource 实例。</strong></li><li><strong>使用依赖注入。</strong></li></ul><p>对于第一种方式，当程序获取 Resource 实例时，总需要提供 Resource 所在的位置，不管通过 FileSystemResource 创建实例，还是通过 ClassPathResource 创建实例，或者通过 ApplicationContext 的 getResource() 方法获取实例，都需要提供资源位置。这意味着：资源所在的物理位置将被耦合到代码中，如果资源位置发生改变，则必须改写程序。因此，通常建议采用第二种方法，让 Spring 为 Bean 实例<strong>依赖注入</strong>资源。</p><p><strong>实验：让 Spring 为 Bean 实例依赖注入资源</strong></p><p><strong>第一步 创建依赖注入类，定义属性和方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.resouceloader;<br><br><span class="hljs-keyword">import</span> org.springframework.core.io.Resource;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResourceBean</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Resource res;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRes</span><span class="hljs-params">(Resource res)</span> &#123;<br>        <span class="hljs-built_in">this</span>.res = res;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Resource <span class="hljs-title function_">getRes</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parse</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(res.getFilename());<br>        System.out.println(res.getDescription());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>第二步 创建 spring 配置文件，配置依赖注入</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;resourceBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring6.resouceloader.ResourceBean&quot;</span> &gt;</span><br>      <span class="hljs-comment">&lt;!-- 可以使用file:、http:、ftp:等前缀强制Spring采用对应的资源访问策略 --&gt;</span><br>      <span class="hljs-comment">&lt;!-- 如果不采用任何前缀，则Spring将采用与该ApplicationContext相同的资源访问策略来访问资源 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;res&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:atguigu.txt&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>第三步 测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.resouceloader;<br><br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo4</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>        <span class="hljs-type">ResourceBean</span> <span class="hljs-variable">resourceBean</span> <span class="hljs-operator">=</span> ctx.getBean(<span class="hljs-string">&quot;resourceBean&quot;</span>,ResourceBean.class);<br>        resourceBean.parse();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-8、应用程序上下文和资源路径"><a href="#8-8、应用程序上下文和资源路径" class="headerlink" title="8.8、应用程序上下文和资源路径"></a>8.8、应用程序上下文和资源路径</h3><h4 id="8-8-1、概述"><a href="#8-8-1、概述" class="headerlink" title="8.8.1、概述"></a>8.8.1、概述</h4><p>不管以怎样的方式创建 ApplicationContext 实例，都需要为 ApplicationContext 指定配置文件，Spring 允许使用一份或多分 XML 配置文件。当程序创建 ApplicationContext 实例时，通常也是以 Resource 的方式来访问配置文件的，所以 ApplicationContext 完全支持 ClassPathResource、FileSystemResource、ServletContextResource 等资源访问方式。</p><p><strong>ApplicationContext 确定资源访问策略通常有两种方法：</strong></p><p><strong>（1）使用 ApplicationContext 实现类指定访问策略。</strong></p><p><strong>（2）使用前缀指定访问策略。</strong></p><h4 id="8-8-2、ApplicationContext-实现类指定访问策略"><a href="#8-8-2、ApplicationContext-实现类指定访问策略" class="headerlink" title="8.8.2、ApplicationContext 实现类指定访问策略"></a>8.8.2、ApplicationContext 实现类指定访问策略</h4><p>创建 ApplicationContext 对象时，通常可以使用如下实现类：</p><p>（1） ClassPathXMLApplicationContext : 对应使用 ClassPathResource 进行资源访问。</p><p>（2）FileSystemXmlApplicationContext ： 对应使用 FileSystemResource 进行资源访问。</p><p>（3）XmlWebApplicationContext ： 对应使用 ServletContextResource 进行资源访问。</p><p>当使用 ApplicationContext 的不同实现类时，就意味着 Spring 使用响应的资源访问策略。</p><p>效果前面已经演示</p><h4 id="8-8-3、使用前缀指定访问策略"><a href="#8-8-3、使用前缀指定访问策略" class="headerlink" title="8.8.3、使用前缀指定访问策略"></a>8.8.3、使用前缀指定访问策略</h4><p><strong>实验一：classpath 前缀使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.context;<br><br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.FileSystemXmlApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.core.io.Resource;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo1</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 通过搜索文件系统路径下的xml文件创建ApplicationContext，</span><br><span class="hljs-comment">         * 但通过指定classpath:前缀强制搜索类加载路径</span><br><span class="hljs-comment">         * classpath:bean.xml</span><br><span class="hljs-comment">         * */</span><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;classpath:bean.xml&quot;</span>);<br>        System.out.println(ctx);<br>        <span class="hljs-type">Resource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> ctx.getResource(<span class="hljs-string">&quot;atguigu.txt&quot;</span>);<br>        System.out.println(resource.getFilename());<br>        System.out.println(resource.getDescription());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>实验二：classpath 通配符使用</strong></p><p>classpath _ :前缀提供了加载多个 XML 配置文件的能力，当使用 classpath_:前缀来指定 XML 配置文件时，系统将搜索类加载路径，找到所有与文件名匹配的文件，分别加载文件中的配置定义，最后合并成一个 ApplicationContext。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;classpath*:bean.xml&quot;</span>);<br>System.out.println(ctx);<br></code></pre></td></tr></table></figure><p>当使用 classpath * :前缀时，Spring 将会搜索类加载路径下所有满足该规则的配置文件。</p><p>如果不是采用 classpath * :前缀，而是改为使用 classpath:前缀，Spring 则只加载第一个符合条件的 XML 文件</p><p><strong>注意 ：</strong></p><p>classpath _ : 前缀仅对 ApplicationContext 有效。实际情况是，创建 ApplicationContext 时，分别访问多个配置文件(通过 ClassLoader 的 getResource 方法实现)。因此，classpath _ :前缀不可用于 Resource。</p><p><strong>使用三：通配符其他使用</strong></p><p>一次性加载多个配置文件的方式：指定配置文件时使用通配符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;classpath:bean*.xml&quot;</span>);<br></code></pre></td></tr></table></figure><p>Spring 允许将 classpath*:前缀和通配符结合使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;classpath*:bean*.xml&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="9、国际化：i18n"><a href="#9、国际化：i18n" class="headerlink" title="9、国际化：i18n"></a>9、国际化：i18n</h2><p><img src="/images%5Cspring6%5Cimage-20221218154728062.png#alt=image-20221218154728062"></p><h3 id="9-1、i18n-概述"><a href="#9-1、i18n-概述" class="headerlink" title="9.1、i18n 概述"></a>9.1、i18n 概述</h3><p>国际化也称作 i18n，其来源是英文单词 internationalization 的首末字符 i 和 n，18 为中间的字符数。由于软件发行可能面向多个国家，对于不同国家的用户，软件显示不同语言的过程就是国际化。通常来讲，软件中的国际化是通过配置文件来实现的，假设要支撑两种语言，那么就需要两个版本的配置文件。</p><h3 id="9-2、Java-国际化"><a href="#9-2、Java-国际化" class="headerlink" title="9.2、Java 国际化"></a>9.2、Java 国际化</h3><p>（1）Java 自身是支持国际化的，java.util.Locale 用于指定当前用户所属的语言环境等信息，java.util.ResourceBundle 用于查找绑定对应的资源文件。Locale 包含了 language 信息和 country 信息，Locale 创建默认 locale 对象时使用的静态方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * This method must be called only for creating the Locale.*</span><br><span class="hljs-comment"> * constants due to making shortcuts.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Locale <span class="hljs-title function_">createConstant</span><span class="hljs-params">(String lang, String country)</span> &#123;<br>    <span class="hljs-type">BaseLocale</span> <span class="hljs-variable">base</span> <span class="hljs-operator">=</span> BaseLocale.createInstance(lang, country);<br>    <span class="hljs-keyword">return</span> getInstance(base, <span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）配置文件命名规则：</p><p><strong>basename_language_country.properties</strong></p><p>必须遵循以上的命名规则，java 才会识别。其中，basename 是必须的，语言和国家是可选的。这里存在一个优先级概念，如果同时提供了 messages.properties 和 messages_zh_CN.propertes 两个配置文件，如果提供的 locale 符合 en_CN，那么优先查找 messages_en_CN.propertes 配置文件，如果没查找到，再查找 messages.properties 配置文件。最后，提示下，所有的配置文件必须放在 classpath 中，一般放在 resources 目录下</p><p><strong>（3）实验：演示 Java 国际化</strong></p><p><strong>第一步 创建子模块 spring6-i18n，引入 spring 依赖</strong></p><p><img src="/images%5Cspring6%5Cimage-20221207122500801.png#alt=image-20221207122500801"></p><p><strong>第二步 在 resource 目录下创建两个配置文件：messages_zh_CN.propertes 和 messages_en_GB.propertes</strong></p><p><img src="/images%5Cspring6%5Cimage-20221207124839565.png#alt=image-20221207124839565"></p><p><strong>第三步 测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.javai18n;<br><br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.util.Locale;<br><span class="hljs-keyword">import</span> java.util.ResourceBundle;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo1</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(ResourceBundle.getBundle(<span class="hljs-string">&quot;messages&quot;</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Locale</span>(<span class="hljs-string">&quot;en&quot;</span>,<span class="hljs-string">&quot;GB&quot;</span>)).getString(<span class="hljs-string">&quot;test&quot;</span>));<br><br>        System.out.println(ResourceBundle.getBundle(<span class="hljs-string">&quot;messages&quot;</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Locale</span>(<span class="hljs-string">&quot;zh&quot;</span>,<span class="hljs-string">&quot;CN&quot;</span>)).getString(<span class="hljs-string">&quot;test&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-3、Spring6-国际化"><a href="#9-3、Spring6-国际化" class="headerlink" title="9.3、Spring6 国际化"></a>9.3、Spring6 国际化</h3><h4 id="9-3-1、MessageSource-接口"><a href="#9-3-1、MessageSource-接口" class="headerlink" title="9.3.1、MessageSource 接口"></a>9.3.1、MessageSource 接口</h4><p>spring 中国际化是通过 MessageSource 这个接口来支持的</p><p><strong>常见实现类</strong></p><p><strong>ResourceBundleMessageSource</strong></p><p>这个是基于 Java 的 ResourceBundle 基础类实现，允许仅通过资源名加载国际化资源</p><p><strong>ReloadableResourceBundleMessageSource</strong></p><p>这个功能和第一个类的功能类似，多了定时刷新功能，允许在不重启系统的情况下，更新资源的信息</p><p><strong>StaticMessageSource</strong></p><p>它允许通过编程的方式提供国际化信息，一会我们可以通过这个来实现 db 中存储国际化信息的功能。</p><h4 id="9-3-2、使用-Spring6-国际化"><a href="#9-3-2、使用-Spring6-国际化" class="headerlink" title="9.3.2、使用 Spring6 国际化"></a>9.3.2、使用 Spring6 国际化</h4><p><strong>第一步 创建资源文件</strong></p><p><strong>国际化文件命名格式：基本名称 _ 语言 _ 国家.properties</strong></p><p><strong>{0},{1}这样内容，就是动态参数</strong></p><p><img src="/images%5Cspring6%5Cimage-20221207140024056.png#alt=image-20221207140024056"></p><p><strong>（1）创建 atguigu_en_US.properties</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">www.atguigu.com</span>=<span class="hljs-string">welcome &#123;0&#125;,时间:&#123;1&#125;</span><br></code></pre></td></tr></table></figure><p><strong>（2）创建 atguigu_zh_CN.properties</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">www.atguigu.com</span>=<span class="hljs-string">欢迎 &#123;0&#125;,时间:&#123;1&#125;</span><br></code></pre></td></tr></table></figure><p><strong>第二步 创建 spring 配置文件，配置 MessageSource</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;messageSource&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basenames&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>atguigu<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultEncoding&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>第三步 创建测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.javai18n;<br><br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.Locale;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo2</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br><br>        <span class="hljs-comment">//传递动态参数，使用数组形式对应&#123;0&#125; &#123;1&#125;顺序</span><br>        Object[] objs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;atguigu&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().toString()&#125;;<br><br>        <span class="hljs-comment">//www.atguigu.com为资源文件的key值,</span><br>        <span class="hljs-comment">//objs为资源文件value值所需要的参数,Local.CHINA为国际化为语言</span><br>        String str=context.getMessage(<span class="hljs-string">&quot;www.atguigu.com&quot;</span>, objs, Locale.CHINA);<br>        System.out.println(str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="10、数据校验：Validation"><a href="#10、数据校验：Validation" class="headerlink" title="10、数据校验：Validation"></a>10、数据校验：Validation</h2><p><img src="/images%5Cspring6%5Cimage-20221218154808754.png#alt=image-20221218154808754"></p><h3 id="10-1、Spring-Validation-概述"><a href="#10-1、Spring-Validation-概述" class="headerlink" title="10.1、Spring Validation 概述"></a>10.1、Spring Validation 概述</h3><p><img src="/images%5Cspring6%5Cimage-20221206220207266.png#alt=image-20221206220207266"></p><p>在开发中，我们经常遇到参数校验的需求，比如用户注册的时候，要校验用户名不能为空、用户名长度不超过 20 个字符、手机号是合法的手机号格式等等。如果使用普通方式，我们会把校验的代码和真正的业务处理逻辑耦合在一起，而且如果未来要新增一种校验逻辑也需要在修改多个地方。而 spring validation 允许通过注解的方式来定义对象校验规则，把校验和业务逻辑分离开，让代码编写更加方便。Spring Validation 其实就是对 Hibernate Validator 进一步的封装，方便在 Spring 中使用。</p><p>在 Spring 中有多种校验的方式</p><p><strong>第一种是通过实现 org.springframework.validation.Validator 接口，然后在代码中调用这个类</strong></p><p><strong>第二种是按照 Bean Validation 方式来进行校验，即通过注解的方式。</strong></p><p><strong>第三种是基于方法实现校验</strong></p><p><strong>除此之外，还可以实现自定义校验</strong></p><h3 id="10-2、实验一：通过-Validator-接口实现"><a href="#10-2、实验一：通过-Validator-接口实现" class="headerlink" title="10.2、实验一：通过 Validator 接口实现"></a>10.2、实验一：通过 Validator 接口实现</h3><p><strong>第一步 创建子模块 spring6-validator</strong></p><p><img src="/images%5Cspring6%5Cimage-20221206221002615.png#alt=image-20221206221002615"></p><p><strong>第二步 引入相关依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.hibernate.validator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hibernate-validator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.0.5.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.glassfish<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jakarta.el<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>第三步 创建实体类，定义属性和方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.validation.method1;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>第四步 创建类实现 Validator 接口，实现接口方法指定校验规则</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.validation.method1;<br><br><span class="hljs-keyword">import</span> org.springframework.validation.Errors;<br><span class="hljs-keyword">import</span> org.springframework.validation.ValidationUtils;<br><span class="hljs-keyword">import</span> org.springframework.validation.Validator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonValidator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Validator</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span> &#123;<br>        <span class="hljs-keyword">return</span> Person.class.equals(clazz);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">validate</span><span class="hljs-params">(Object object, Errors errors)</span> &#123;<br>        ValidationUtils.rejectIfEmpty(errors, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;name.empty&quot;</span>);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> (Person) object;<br>        <span class="hljs-keyword">if</span> (p.getAge() &lt; <span class="hljs-number">0</span>) &#123;<br>            errors.rejectValue(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;error value &lt; 0&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p.getAge() &gt; <span class="hljs-number">110</span>) &#123;<br>            errors.rejectValue(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;error value too old&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面定义的类，其实就是实现接口中对应的方法，</p><p>supports 方法用来表示此校验用在哪个类型上，</p><p>validate 是设置校验逻辑的地点，其中 ValidationUtils，是 Spring 封装的校验工具类，帮助快速实现校验。</p><p><strong>第五步 使用上述 Validator 进行测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.validation.method1;<br><br><span class="hljs-keyword">import</span> org.springframework.validation.BindingResult;<br><span class="hljs-keyword">import</span> org.springframework.validation.DataBinder;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMethod1</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建person对象</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        person.setName(<span class="hljs-string">&quot;lucy&quot;</span>);<br>        person.setAge(-<span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">// 创建Person对应的DataBinder</span><br>        <span class="hljs-type">DataBinder</span> <span class="hljs-variable">binder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataBinder</span>(person);<br><br>        <span class="hljs-comment">// 设置校验</span><br>        binder.setValidator(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PersonValidator</span>());<br><br>        <span class="hljs-comment">// 由于Person对象中的属性为空，所以校验不通过</span><br>        binder.validate();<br><br>        <span class="hljs-comment">//输出结果</span><br>        <span class="hljs-type">BindingResult</span> <span class="hljs-variable">results</span> <span class="hljs-operator">=</span> binder.getBindingResult();<br>        System.out.println(results.getAllErrors());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-3、实验二：Bean-Validation-注解实现"><a href="#10-3、实验二：Bean-Validation-注解实现" class="headerlink" title="10.3、实验二：Bean Validation 注解实现"></a>10.3、实验二：Bean Validation 注解实现</h3><p>使用 Bean Validation 校验方式，就是如何将 Bean Validation 需要使用的 javax.validation.ValidatorFactory 和 javax.validation.Validator 注入到容器中。spring 默认有一个实现类 LocalValidatorFactoryBean，它实现了上面 Bean Validation 中的接口，并且也实现了 org.springframework.validation.Validator 接口。</p><p><strong>第一步 创建配置类，配置 LocalValidatorFactoryBean</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.atguigu.spring6.validation.method2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ValidationConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> LocalValidatorFactoryBean <span class="hljs-title function_">validator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalValidatorFactoryBean</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>第二步 创建实体类，使用注解定义校验规则</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.validation.method2;<br><br><span class="hljs-keyword">import</span> jakarta.validation.constraints.Max;<br><span class="hljs-keyword">import</span> jakarta.validation.constraints.Min;<br><span class="hljs-keyword">import</span> jakarta.validation.constraints.NotNull;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-meta">@NotNull</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@Min(0)</span><br>    <span class="hljs-meta">@Max(120)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>常用注解说明</strong></p><p><a href="/NotNull">@NotNull </a> 限制必须不为 null</p><p><a href="/NotEmpty">@NotEmpty </a> 只作用于字符串类型，字符串不为空，并且长度不为 0</p><p><a href="/NotBlank">@NotBlank </a> 只作用于字符串类型，字符串不为空，并且 trim()后不为空串</p><p><a href="/value">@DecimalMax(value) </a> 限制必须为一个不大于指定值的数字</p><p><a href="/value">@DecimalMin(value) </a> 限制必须为一个不小于指定值的数字</p><p><a href="/value">@Max(value) </a> 限制必须为一个不大于指定值的数字</p><p><a href="/value">@Min(value) </a> 限制必须为一个不小于指定值的数字</p><p><a href="/value">@Pattern(value) </a> 限制必须符合指定的正则表达式</p><p>@Size(max,min) 限制字符长度必须在 min 到 max 之间</p><p><a href="/Email">@Email </a> 验证注解的元素值是 Email，也可以通过正则表达式和 flag 指定自定义的 email 格式</p><p><strong>第三步 使用两种不同的校验器实现</strong></p><p><strong>（1）使用 jakarta.validation.Validator 校验</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.validation.method2;<br><br><span class="hljs-keyword">import</span> jakarta.validation.ConstraintViolation;<br><span class="hljs-keyword">import</span> jakarta.validation.Validator;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyService1</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Validator validator;<br><br>    <span class="hljs-keyword">public</span>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">validator</span><span class="hljs-params">(User user)</span>&#123;<br>        Set&lt;ConstraintViolation&lt;User&gt;&gt; sets =  validator.validate(user);<br>        <span class="hljs-keyword">return</span> sets.isEmpty();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>（2）使用 org.springframework.validation.Validator 校验</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.validation.method2;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.validation.BindException;<br><span class="hljs-keyword">import</span> org.springframework.validation.Validator;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyService2</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Validator validator;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">validaPersonByValidator</span><span class="hljs-params">(User user)</span> &#123;<br>        <span class="hljs-type">BindException</span> <span class="hljs-variable">bindException</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BindException</span>(user, user.getName());<br>        validator.validate(user, bindException);<br>        <span class="hljs-keyword">return</span> bindException.hasErrors();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>第四步 测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.validation.method2;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMethod2</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMyService1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(ValidationConfig.class);<br>        <span class="hljs-type">MyService1</span> <span class="hljs-variable">myService</span> <span class="hljs-operator">=</span> context.getBean(MyService1.class);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setAge(-<span class="hljs-number">1</span>);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">validator</span> <span class="hljs-operator">=</span> myService.validator(user);<br>        System.out.println(validator);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMyService2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(ValidationConfig.class);<br>        <span class="hljs-type">MyService2</span> <span class="hljs-variable">myService</span> <span class="hljs-operator">=</span> context.getBean(MyService2.class);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setName(<span class="hljs-string">&quot;lucy&quot;</span>);<br>        user.setAge(<span class="hljs-number">130</span>);<br>        user.setAge(-<span class="hljs-number">1</span>);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">validator</span> <span class="hljs-operator">=</span> myService.validaPersonByValidator(user);<br>        System.out.println(validator);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-4、实验三：基于方法实现校验"><a href="#10-4、实验三：基于方法实现校验" class="headerlink" title="10.4、实验三：基于方法实现校验"></a>10.4、实验三：基于方法实现校验</h3><p><strong>第一步 创建配置类，配置 MethodValidationPostProcessor</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.validation.method3;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;<br><span class="hljs-keyword">import</span> org.springframework.validation.beanvalidation.MethodValidationPostProcessor;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.atguigu.spring6.validation.method3&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ValidationConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MethodValidationPostProcessor <span class="hljs-title function_">validationPostProcessor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodValidationPostProcessor</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>第二步 创建实体类，使用注解设置校验规则</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.validation.method3;<br><br><span class="hljs-keyword">import</span> jakarta.validation.constraints.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-meta">@NotNull</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@Min(0)</span><br>    <span class="hljs-meta">@Max(120)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-meta">@Pattern(regexp = &quot;^1(3|4|5|7|8)\\d&#123;9&#125;$&quot;,message = &quot;手机号码格式错误&quot;)</span><br>    <span class="hljs-meta">@NotBlank(message = &quot;手机号码不能为空&quot;)</span><br>    <span class="hljs-keyword">private</span> String phone;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPhone</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> phone;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPhone</span><span class="hljs-params">(String phone)</span> &#123;<br>        <span class="hljs-built_in">this</span>.phone = phone;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>第三步 定义 Service 类，通过注解操作对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.validation.method3;<br><br><span class="hljs-keyword">import</span> jakarta.validation.Valid;<br><span class="hljs-keyword">import</span> jakarta.validation.constraints.NotNull;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.validation.annotation.Validated;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Validated</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyService</span> &#123;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testParams</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> <span class="hljs-meta">@Valid</span> User user)</span> &#123;<br>        <span class="hljs-keyword">return</span> user.toString();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>第四步 测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.validation.method3;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMethod3</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMyService1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(ValidationConfig.class);<br>        <span class="hljs-type">MyService</span> <span class="hljs-variable">myService</span> <span class="hljs-operator">=</span> context.getBean(MyService.class);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setAge(-<span class="hljs-number">1</span>);<br>        myService.testParams(user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-5、实验四：实现自定义校验"><a href="#10-5、实验四：实现自定义校验" class="headerlink" title="10.5、实验四：实现自定义校验"></a>10.5、实验四：实现自定义校验</h3><p><strong>第一步 自定义校验注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.validation.method4;<br><br><span class="hljs-keyword">import</span> jakarta.validation.Constraint;<br><span class="hljs-keyword">import</span> jakarta.validation.Payload;<br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><br><span class="hljs-meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Constraint(validatedBy = &#123;CannotBlankValidator.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> CannotBlank &#123;<br>    <span class="hljs-comment">//默认错误消息</span><br>    String <span class="hljs-title function_">message</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;不能包含空格&quot;</span>;<br><br>    <span class="hljs-comment">//分组</span><br>    Class&lt;?&gt;[] groups() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    <span class="hljs-comment">//负载</span><br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Payload</span>&gt;[] payload() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    <span class="hljs-comment">//指定多个时使用</span><br>    <span class="hljs-meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE&#125;)</span><br>    <span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br>    <span class="hljs-meta">@Documented</span><br>    <span class="hljs-meta">@interface</span> List &#123;<br>        CannotBlank[] value();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>第二步 编写真正的校验类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.spring6.validation.method4;<br><br><span class="hljs-keyword">import</span> jakarta.validation.ConstraintValidator;<br><span class="hljs-keyword">import</span> jakarta.validation.ConstraintValidatorContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CannotBlankValidator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ConstraintValidator</span>&lt;CannotBlank, String&gt; &#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialize</span><span class="hljs-params">(CannotBlank constraintAnnotation)</span> &#123;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValid</span><span class="hljs-params">(String value, ConstraintValidatorContext context)</span> &#123;<br>                <span class="hljs-comment">//null时不进行校验</span><br>                <span class="hljs-keyword">if</span> (value != <span class="hljs-literal">null</span> &amp;&amp; value.contains(<span class="hljs-string">&quot; &quot;</span>)) &#123;<br>                        <span class="hljs-comment">//获取默认提示信息</span><br>                        <span class="hljs-type">String</span> <span class="hljs-variable">defaultConstraintMessageTemplate</span> <span class="hljs-operator">=</span> context.getDefaultConstraintMessageTemplate();<br>                        System.out.println(<span class="hljs-string">&quot;default message :&quot;</span> + defaultConstraintMessageTemplate);<br>                        <span class="hljs-comment">//禁用默认提示信息</span><br>                        context.disableDefaultConstraintViolation();<br>                        <span class="hljs-comment">//设置提示语</span><br>                        context.buildConstraintViolationWithTemplate(<span class="hljs-string">&quot;can not contains blank&quot;</span>).addConstraintViolation();<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="11、提前编译：AOT"><a href="#11、提前编译：AOT" class="headerlink" title="11、提前编译：AOT"></a>11、提前编译：AOT</h2><p><img src="/images%5Cspring6%5Cimage-20221218154841001.png#alt=image-20221218154841001"></p><h3 id="11-1、AOT-概述"><a href="#11-1、AOT-概述" class="headerlink" title="11.1、AOT 概述"></a>11.1、AOT 概述</h3><h4 id="11-1-1、JIT-与-AOT-的区别"><a href="#11-1-1、JIT-与-AOT-的区别" class="headerlink" title="11.1.1、JIT 与 AOT 的区别"></a>11.1.1、JIT 与 AOT 的区别</h4><p>JIT 和 AOT 这个名词是指两种不同的编译方式，这两种编译方式的主要区别在于是否在“运行时”进行编译</p><p><strong>（1）JIT， Just-in-time,动态(即时)编译，边运行边编译；</strong></p><p>在程序运行时，根据算法计算出热点代码，然后进行 JIT 实时编译，这种方式吞吐量高，有运行时性能加成，可以跑得更快，并可以做到动态生成代码等，但是相对启动速度较慢，并需要一定时间和调用频率才能触发 JIT 的分层机制。JIT 缺点就是编译需要占用运行时资源，会导致进程卡顿。</p><p><strong>（2）AOT，Ahead Of Time，指运行前编译，预先编译。</strong></p><p>AOT 编译能直接将源代码转化为机器码，内存占用低，启动速度快，可以无需 runtime 运行，直接将 runtime 静态链接至最终的程序中，但是无运行时性能加成，不能根据程序运行情况做进一步的优化，AOT 缺点就是在程序运行前编译会使程序安装的时间增加。</p><p><strong>简单来讲：</strong>JIT 即时编译指的是在程序的运行过程中，将字节码转换为可在硬件上直接运行的机器码，并部署至托管环境中的过程。而 AOT 编译指的则是，在程序运行之前，便将字节码转换为机器码的过程。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">.java -&gt; .<span class="hljs-keyword">class</span> -&gt; <span class="hljs-function"><span class="hljs-params">(使用jaotc编译工具)</span> -&gt;</span> .so（程序函数库,即编译好的可以供其他程序使用的代码和数据）<br></code></pre></td></tr></table></figure><p><img src="/images%5Cspring6%5Cimage-20221207113544080.png#alt=image-20221207113544080"></p><p><strong>（3）AOT 的优点</strong></p><p><strong>简单来讲，</strong>Java 虚拟机加载已经预编译成二进制库，可以直接执行。不必等待及时编译器的预热，减少 Java 应用给人带来“第一次运行慢” 的不良体验。</p><p>在程序运行前编译，可以避免在运行时的编译性能消耗和内存消耗</p><p>可以在程序运行初期就达到最高性能，程序启动速度快</p><p>运行产物只有机器码，打包体积小</p><p><strong>AOT 的缺点</strong></p><p>由于是静态提前编译，不能根据硬件情况或程序运行情况择优选择机器指令序列，理论峰值性能不如 JIT</p><p>没有动态能力，同一份产物不能跨平台运行</p><p>第一种即时编译 (JIT) 是默认模式，Java Hotspot 虚拟机使用它在运行时将字节码转换为机器码。后者提前编译 (AOT)由新颖的 GraalVM 编译器支持，并允许在构建时将字节码直接静态编译为机器码。</p><p>现在正处于云原生，降本增效的时代，Java 相比于 Go、Rust 等其他编程语言非常大的弊端就是启动编译和启动进程非常慢，这对于根据实时计算资源，弹性扩缩容的云原生技术相冲突，Spring6 借助 AOT 技术在运行时内存占用低，启动速度快，逐渐的来满足 Java 在云原生时代的需求，对于大规模使用 Java 应用的商业公司可以考虑尽早调研使用 JDK17，通过云原生技术为公司实现降本增效。</p><h4 id="11-1-2、Graalvm"><a href="#11-1-2、Graalvm" class="headerlink" title="11.1.2、Graalvm"></a>11.1.2、Graalvm</h4><p>Spring6 支持的 AOT 技术，这个 GraalVM   就是底层的支持，Spring 也对 GraalVM 本机映像提供了一流的支持。GraalVM 是一种高性能 JDK，旨在加速用 Java 和其他 JVM 语言编写的应用程序的执行，同时还为 JavaScript、Python 和许多其他流行语言提供运行时。 GraalVM 提供两种运行 Java 应用程序的方法：在 HotSpot JVM 上使用 Graal 即时 (JIT) 编译器或作为提前 (AOT) 编译的本机可执行文件。 GraalVM 的多语言能力使得在单个应用程序中混合多种编程语言成为可能，同时消除了外语调用成本。GraalVM 向 HotSpot Java 虚拟机添加了一个用 Java 编写的高级即时 (JIT) 优化编译器。</p><p>GraalVM 具有以下特性：</p><p>（1）一种高级优化编译器，它生成更快、更精简的代码，需要更少的计算资源</p><p>（2）AOT 本机图像编译提前将 Java 应用程序编译为本机二进制文件，立即启动，无需预热即可实现最高性能</p><p>（3）Polyglot 编程在单个应用程序中利用流行语言的最佳功能和库，无需额外开销</p><p>（4）高级工具在 Java 和多种语言中调试、监视、分析和优化资源消耗</p><p>总的来说对云原生的要求不算高短期内可以继续使用 2.7.X 的版本和 JDK8，不过 Spring 官方已经对 Spring6 进行了正式版发布。</p><h4 id="11-1-3、Native-Image"><a href="#11-1-3、Native-Image" class="headerlink" title="11.1.3、Native Image"></a>11.1.3、Native Image</h4><p>目前业界除了这种在 JVM 中进行 AOT 的方案，还有另外一种实现 Java AOT 的思路，那就是直接摒弃 JVM，和 C&#x2F;C 一样通过编译器直接将代码编译成机器代码，然后运行。这无疑是一种直接颠覆 Java 语言设计的思路，那就是 GraalVM Native Image。它通过 C 语言实现了一个超微缩的运行时组件 —— Substrate VM，基本实现了 JVM 的各种特性，但足够轻量、可以被轻松内嵌，这就让 Java 语言和工程摆脱 JVM 的限制，能够真正意义上实现和 C&#x2F;C 一样的 AOT 编译。这一方案在经过长时间的优化和积累后，已经拥有非常不错的效果，基本上成为 Oracle 官方首推的 Java AOT 解决方案。</p><p>Native Image 是一项创新技术，可将 Java 代码编译成独立的本机可执行文件或本机共享库。在构建本机可执行文件期间处理的 Java 字节码包括所有应用程序类、依赖项、第三方依赖库和任何所需的 JDK 类。生成的自包含本机可执行文件特定于不需要 JVM 的每个单独的操作系统和机器体系结构。</p><h3 id="11-2、演示-Native-Image-构建过程"><a href="#11-2、演示-Native-Image-构建过程" class="headerlink" title="11.2、演示 Native Image 构建过程"></a>11.2、演示 Native Image 构建过程</h3><h4 id="11-2-1、GraalVM-安装"><a href="#11-2-1、GraalVM-安装" class="headerlink" title="11.2.1、GraalVM 安装"></a>11.2.1、GraalVM 安装</h4><h5 id="（1）下载-GraalVM"><a href="#（1）下载-GraalVM" class="headerlink" title="（1）下载 GraalVM"></a>（1）下载 GraalVM</h5><p>进入官网下载：<a href="https://www.graalvm.org/downloads/">https://www.graalvm.org/downloads/</a></p><p><img src="/images%5Cspring6%5Cimage-20221207153944132.png#alt=image-20221207153944132"></p><p><img src="/images%5Cspring6%5Cimage-20221207152841304.png#alt=image-20221207152841304"></p><h5 id="（2）配置环境变量"><a href="#（2）配置环境变量" class="headerlink" title="（2）配置环境变量"></a>（2）配置环境变量</h5><p><strong>添加 GRAALVM_HOME</strong></p><p><img src="/images%5Cspring6%5Cimage-20221207110539954.png#alt=image-20221207110539954"></p><p><strong>把 JAVA_HOME 修改为 graalvm 的位置</strong></p><p><img src="/images%5Cspring6%5Cimage-20221207153724340.png#alt=image-20221207153724340"></p><p><strong>把 Path 修改位 graalvm 的 bin 位置</strong></p><p><img src="/images%5Cspring6%5Cimage-20221207153755732.png#alt=image-20221207153755732"></p><p><strong>使用命令查看是否安装成功</strong></p><p><img src="/images%5Cspring6%5Cimage-20221207153642253.png#alt=image-20221207153642253"></p><h5 id="（3）安装-native-image-插件"><a href="#（3）安装-native-image-插件" class="headerlink" title="（3）安装 native-image 插件"></a>（3）安装 native-image 插件</h5><p><strong>使用命令 gu install native-image 下载安装</strong></p><p><img src="/images%5Cspring6%5Cimage-20221207155009832.png#alt=image-20221207155009832"></p><h4 id="11-2-2、安装-C-的编译环境"><a href="#11-2-2、安装-C-的编译环境" class="headerlink" title="11.2.2、安装 C++的编译环境"></a>11.2.2、安装 C++的编译环境</h4><h5 id="（1）下载-Visual-Studio-安装软件"><a href="#（1）下载-Visual-Studio-安装软件" class="headerlink" title="（1）下载 Visual Studio 安装软件"></a>（1）下载 Visual Studio 安装软件</h5><p><a href="https://visualstudio.microsoft.com/zh-hans/downloads/">https://visualstudio.microsoft.com/zh-hans/downloads/</a></p><p><img src="/images%5Cspring6%5Cimage-20221219112426052.png#alt=image-20221219112426052"></p><h5 id="（2）安装-Visual-Studio"><a href="#（2）安装-Visual-Studio" class="headerlink" title="（2）安装 Visual Studio"></a>（2）安装 Visual Studio</h5><p><img src="/images%5Cspring6%5Cimage-20221207155726572.png#alt=image-20221207155726572"></p><p><img src="/images%5Cspring6%5Cimage-20221207155756512.png#alt=image-20221207155756512"></p><h5 id="（3）添加-Visual-Studio-环境变量"><a href="#（3）添加-Visual-Studio-环境变量" class="headerlink" title="（3）添加 Visual Studio 环境变量"></a>（3）添加 Visual Studio 环境变量</h5><p>配置 INCLUDE、LIB 和 Path</p><p><img src="/images%5Cspring6%5Cimage-20221207110947997.png#alt=image-20221207110947997"></p><p><img src="/images%5Cspring6%5Cimage-20221207111012582.png#alt=image-20221207111012582"></p><p><img src="/images%5Cspring6%5Cimage-20221207111105569.png#alt=image-20221207111105569"></p><h5 id="（4）打开工具，在工具中操作"><a href="#（4）打开工具，在工具中操作" class="headerlink" title="（4）打开工具，在工具中操作"></a>（4）打开工具，在工具中操作</h5><p><img src="/images%5Cspring6%5Cimage-20221207111206279.png#alt=image-20221207111206279"></p><h4 id="11-2-3、编写代码，构建-Native-Image"><a href="#11-2-3、编写代码，构建-Native-Image" class="headerlink" title="11.2.3、编写代码，构建 Native Image"></a>11.2.3、编写代码，构建 Native Image</h4><h5 id="（1）编写-Java-代码"><a href="#（1）编写-Java-代码" class="headerlink" title="（1）编写 Java 代码"></a>（1）编写 Java 代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;hello world&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="（2）复制文件到目录，执行编译"><a href="#（2）复制文件到目录，执行编译" class="headerlink" title="（2）复制文件到目录，执行编译"></a>（2）复制文件到目录，执行编译</h5><p><img src="/images%5Cspring6%5Cimage-20221207111420056.png#alt=image-20221207111420056"></p><h5 id="（3）Native-Image-进行构建"><a href="#（3）Native-Image-进行构建" class="headerlink" title="（3）Native Image 进行构建"></a>（3）Native Image 进行构建</h5><p><img src="/images%5Cspring6%5Cimage-20221207111509837.png#alt=image-20221207111509837"></p><p><img src="/images%5Cspring6%5Cimage-20221207111609878.png#alt=image-20221207111609878"></p><h5 id="（4）查看构建的文件"><a href="#（4）查看构建的文件" class="headerlink" title="（4）查看构建的文件"></a>（4）查看构建的文件</h5><p><img src="/images%5Cspring6%5Cimage-20221207111644950.png#alt=image-20221207111644950"></p><h5 id="（5）执行构建的文件"><a href="#（5）执行构建的文件" class="headerlink" title="（5）执行构建的文件"></a>（5）执行构建的文件</h5><p><img src="/images%5Cspring6%5Cimage-20221207111731150.png#alt=image-20221207111731150"></p><p>可以看到这个 Hello 最终打包产出的二进制文件大小为 11M，这是包含了 SVM 和 JDK 各种库后的大小，虽然相比 C&#x2F;C++的二进制文件来说体积偏大，但是对比完整 JVM 来说，可以说是已经是非常小了。</p><p>相比于使用 JVM 运行，Native Image 的速度要快上不少，cpu 占用也更低一些，从官方提供的各类实验数据也可以看出 Native Image 对于启动速度和内存占用带来的提升是非常显著的：</p><p><img src="/images%5Cspring6%5Cimage-20221207111947283.png#alt=image-20221207111947283"></p><p><img src="/images%5Cspring6%5Cimage-20221207112009852.png#alt=image-20221207112009852"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>安装网页版 VS Code （code-server)</title>
    <link href="/2022/10/27/yuque/%E5%AE%89%E8%A3%85%E7%BD%91%E9%A1%B5%E7%89%88%20VS%20Code%20%EF%BC%88code-server)/"/>
    <url>/2022/10/27/yuque/%E5%AE%89%E8%A3%85%E7%BD%91%E9%A1%B5%E7%89%88%20VS%20Code%20%EF%BC%88code-server)/</url>
    
    <content type="html"><![CDATA[<h1 id="下载-amp-安装-amp-启动"><a href="#下载-amp-安装-amp-启动" class="headerlink" title="下载&amp;安装&amp;启动"></a>下载&amp;安装&amp;启动</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://github.com/coder/code-server/releases/download/v4.8.0/code-server_4.8.0_amd64.deb -e use_proxy=yes -e https_proxy=192.168.3.126:10811<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo dpkg -i code-server_4.8.0_amd64.deb<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">code-server<br></code></pre></td></tr></table></figure><p>Now visit <a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a>. Your password is in ~&#x2F;.config&#x2F;code-server&#x2F;config.yaml</p><h1 id="在服务器上配置-code-server"><a href="#在服务器上配置-code-server" class="headerlink" title="在服务器上配置 code-server"></a>在服务器上配置 code-server</h1><p>启动后密码在这个配置文件中<br>注意将配置文件中的 127.0.0.1 改为 0.0.0.0 以免只能本地访问。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">nano ~/.config/code-server/config.yaml<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>？</category>
      
    </categories>
    
    
    <tags>
      
      <tag>？</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>删除 此电脑 天翼网盘 图标</title>
    <link href="/2022/10/27/yuque/%E5%88%A0%E9%99%A4%20%E6%AD%A4%E7%94%B5%E8%84%91%20%E5%A4%A9%E7%BF%BC%E7%BD%91%E7%9B%98%20%E5%9B%BE%E6%A0%87/"/>
    <url>/2022/10/27/yuque/%E5%88%A0%E9%99%A4%20%E6%AD%A4%E7%94%B5%E8%84%91%20%E5%A4%A9%E7%BF%BC%E7%BD%91%E7%9B%98%20%E5%9B%BE%E6%A0%87/</url>
    
    <content type="html"><![CDATA[<h1 id="进入注册表"><a href="#进入注册表" class="headerlink" title="进入注册表"></a>进入注册表</h1><p><code>WIN+R</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1666876425457-121b6094-02a5-4777-8624-2c92cc787395.png#clientId=uc321ee88-db65-4&from=paste&height=174&id=uc65eec80&name=image.png&originHeight=272&originWidth=513&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=14603&status=done&style=none&taskId=u28509702-b169-4210-92db-1e13c8c94b8&title=&width=328.32" alt="image.png"></p><h1 id="搜索并删除"><a href="#搜索并删除" class="headerlink" title="搜索并删除"></a>搜索并删除</h1><p><code>CTRL+F</code>搜索<code>A919F047-28EA-4F32-98EB-5C280FC9EB76</code>删除，直到搜索不到为止。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1666876547292-48363f8b-ba4d-4ac7-8541-37cc161fff83.png#clientId=uc321ee88-db65-4&from=paste&height=190&id=ufb0243d6&name=image.png&originHeight=297&originWidth=717&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=23242&status=done&style=none&taskId=udc3cf39f-67e8-472f-bc4d-9020529a954&title=&width=458.88" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>天翼网盘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows 10 LTSC 安装 应用商店</title>
    <link href="/2022/09/10/yuque/Windows%2010%20LTSC%20%E5%AE%89%E8%A3%85%20%E5%BA%94%E7%94%A8%E5%95%86%E5%BA%97/"/>
    <url>/2022/09/10/yuque/Windows%2010%20LTSC%20%E5%AE%89%E8%A3%85%20%E5%BA%94%E7%94%A8%E5%95%86%E5%BA%97/</url>
    
    <content type="html"><![CDATA[<p>使用管理员权限运行以下命令，静待自动完成安装即可。<br>开始-&gt;最近添加-&gt;Microsoft Store</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">wsreset -<span class="hljs-selector-tag">i</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图片CDN</title>
    <link href="/2022/07/10/yuque/%E5%9B%BE%E7%89%87CDN/"/>
    <url>/2022/07/10/yuque/%E5%9B%BE%E7%89%87CDN/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1657386772810-8c1392fc-35ed-45c8-997f-b3ce3f7a1bf1.png#clientId=ubff2a785-1da3-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=1131&id=ubdff0670&margin=%5Bobject%20Object%5D&name=acg.gy_21.png&originHeight=1414&originWidth=2000&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=3592456&status=done&style=none&taskId=u454cafb7-0ce0-447f-99be-83c106c4195&title=&width=1600" alt="acg.gy_21.png"><br>压缩后<br><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1657387837464-1b15ecc9-78bc-4d85-a6aa-b28c7b197d32.png#clientId=u955d367d-f5a5-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=1131&id=u684f0f33&margin=%5Bobject%20Object%5D&name=acg.gy_21.png&originHeight=1414&originWidth=2000&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=1099519&status=done&style=none&taskId=u6ef61aaa-50f2-4c5f-af56-e8d022a4e1f&title=&width=1600" alt="acg.gy_21.png"></p>]]></content>
    
    
    <categories>
      
      <category>image</category>
      
    </categories>
    
    
    <tags>
      
      <tag>image</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>unraid 6.10.x 商店设置代理</title>
    <link href="/2022/06/30/yuque/unraid%206.10.x%20%E5%95%86%E5%BA%97%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
    <url>/2022/06/30/yuque/unraid%206.10.x%20%E5%95%86%E5%BA%97%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>编辑文件，填入如下内容</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">nano <span class="hljs-regexp">/boot/</span>config<span class="hljs-regexp">/plugins/</span>community.applications/proxy.cfg<br><br>port=<span class="hljs-number">1080</span><br>tunnel=<span class="hljs-number">1</span><br><span class="hljs-comment">#proxy=http://127.0.0.1</span><br>proxy=socks5:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>unraid</category>
      
    </categories>
    
    
    <tags>
      
      <tag>unraid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Drone docker 安装</title>
    <link href="/2022/06/21/yuque/Drone%20docker%20%E5%AE%89%E8%A3%85/"/>
    <url>/2022/06/21/yuque/Drone%20docker%20%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="注意要点"><a href="#注意要点" class="headerlink" title="注意要点"></a>注意要点</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">--env=DRONE_SERVER_HOST=drone.josway.cc:52080 要和 --publish=52080:80 端口一致<br><br>如果 --env=DRONE_SERVER_PROTO=https 那么就要使用 --env=DRONE_SERVER_HOST=drone.josway.cc:52443<br></code></pre></td></tr></table></figure><h1 id="Github-配置"><a href="#Github-配置" class="headerlink" title="Github 配置"></a>Github 配置</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1655744946123-8e56baf1-dc12-4948-9b49-062837c3f970.png#clientId=ua226416c-63ac-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=716&id=u5402bb50&margin=%5Bobject%20Object%5D&name=image.png&originHeight=895&originWidth=608&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=58950&status=done&style=none&taskId=u1c850d38-d0dd-48b1-a209-f1c732a8c63&title=&width=486.4" alt="image.png"></p><h1 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo docker run \<br>  --volume=/var/lib/drone:/data \<br>  --env=DRONE_GITHUB_CLIENT_ID=cex38 \<br>  --env=DRONE_GITHUB_CLIENT_SECRET=d3xe8 \<br>  --env=DRONE_RPC_SECRET=1ax7b \<br>  --env=DRONE_SERVER_HOST=drone.josway.cc:52080 \<br>  --env=DRONE_SERVER_PROTO=http \<br>  --publish=52080:80 \<br>  --publish=52443:443 \<br>  --restart=always \<br>  --detach=true \<br>  --name=drone \<br>  drone/drone:2<br></code></pre></td></tr></table></figure><h1 id="Runner"><a href="#Runner" class="headerlink" title="Runner"></a>Runner</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo docker run --detach \<br>  --volume=/var/run/docker.sock:/var/run/docker.sock \<br>  --env=DRONE_RPC_PROTO=http \<br>  --env=DRONE_RPC_HOST=drone.josway.cc:52080 \<br>  --env=DRONE_RPC_SECRET=1ax7b \<br>  --env=DRONE_RUNNER_CAPACITY=2 \<br>  --env=DRONE_RUNNER_NAME=my-first-runner \<br>  --publish=53000:3000 \<br>  --restart=always \<br>  --name=runner \<br>  drone/drone-runner-docker:1<br></code></pre></td></tr></table></figure><h1 id="Github-加密原始命令-drone"><a href="#Github-加密原始命令-drone" class="headerlink" title="Github 加密原始命令 drone"></a>Github 加密原始命令 drone</h1><h1 id="Gitea-加密原始命令-drone"><a href="#Gitea-加密原始命令-drone" class="headerlink" title="Gitea 加密原始命令 drone"></a>Gitea 加密原始命令 drone</h1>]]></content>
    
    
    <categories>
      
      <category>drone</category>
      
    </categories>
    
    
    <tags>
      
      <tag>drone</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 个人使用的镜像</title>
    <link href="/2022/06/07/yuque/Docker%20%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E7%9A%84%E9%95%9C%E5%83%8F/"/>
    <url>/2022/06/07/yuque/Docker%20%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E7%9A%84%E9%95%9C%E5%83%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --restart=always -itd --name ubuntu2204 ubuntu:22.04<br>docker exec -it ubuntu2204 /bin/bash<br><br>cp -a /etc/apt/sources.list /etc/apt/sources.list.bak<br>sed -i &quot;s@http://.*archive.ubuntu.com@http://repo.huaweicloud.com@g&quot; /etc/apt/sources.list<br>sed -i &quot;s@http://.*security.ubuntu.com@http://repo.huaweicloud.com@g&quot; /etc/apt/sources.list<br>apt update &amp;&amp; apt install neofetch -y<br><span class="hljs-meta prompt_"># </span><span class="language-bash">apt upgrade -y</span><br></code></pre></td></tr></table></figure><h1 id="Centos"><a href="#Centos" class="headerlink" title="Centos"></a>Centos</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --restart=always -itd --name centos7 centos:7<br>docker exec -it centos7 /bin/bash<br><br>yum update -y<br></code></pre></td></tr></table></figure><h1 id="Speedtest"><a href="#Speedtest" class="headerlink" title="Speedtest"></a>Speedtest</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --restart=always -itd -p 20080:80 --name speedtest adolfintel/speedtest<br></code></pre></td></tr></table></figure><h1 id="Gitea"><a href="#Gitea" class="headerlink" title="Gitea"></a>Gitea</h1><h1 id="Gitlab"><a href="#Gitlab" class="headerlink" title="Gitlab"></a>Gitlab</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">export GITLAB_HOME=/srv/gitlab<br>sudo docker run --detach \<br>  --hostname gitlab.josway.cc \<br>  --publish 53443:443 --publish 53080:80 --publish 53022:22 \<br>  --name gitlab \<br>  --restart always \<br>  --volume $GITLAB_HOME/config:/etc/gitlab \<br>  --volume $GITLAB_HOME/logs:/var/log/gitlab \<br>  --volume $GITLAB_HOME/data:/var/opt/gitlab \<br>  --shm-size 256m \<br>  gitlab/gitlab-ee:latest<br></code></pre></td></tr></table></figure><h1 id="Frp"><a href="#Frp" class="headerlink" title="Frp"></a>Frp</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --restart=always -p 57000:57000 -p 57001:57001 -p 57500:57500 -p 57080:57080 -p 57443:57443 -d -v D:\\frp_0.43.0_windows_amd64\\frps.ini:/etc/frp/frps.ini --name frps snowdreamtech/frps<br></code></pre></td></tr></table></figure><h1 id="Mongo"><a href="#Mongo" class="headerlink" title="Mongo"></a>Mongo</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --restart=always -itd --name mongo -p 27017:27017 mongo<br></code></pre></td></tr></table></figure><h1 id="ddns-go"><a href="#ddns-go" class="headerlink" title="ddns-go"></a>ddns-go</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d --name ddns-go --restart=always -p 9876:9876 jeessy/ddns-go<br><span class="hljs-meta prompt_"># </span><span class="language-bash">仅Linux支持 --net=host</span><br>docker run -d --name ddns-go --restart=always --net=host -p 9876:9876 jeessy/ddns-go<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>proxy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker build 使用 proxy</title>
    <link href="/2022/06/05/yuque/Docker%20build%20%E4%BD%BF%E7%94%A8%20proxy/"/>
    <url>/2022/06/05/yuque/Docker%20build%20%E4%BD%BF%E7%94%A8%20proxy/</url>
    
    <content type="html"><![CDATA[<h1 id="方式一：构建时指定（推荐）"><a href="#方式一：构建时指定（推荐）" class="headerlink" title="方式一：构建时指定（推荐）"></a>方式一：构建时指定（推荐）</h1><p>记得开启 Allow LAN，因为代理是在 容器 中访问网络的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker build . -t docker101tutorial --build-arg http_proxy=http://192.168.2.105:7890 --build-arg https_proxy=http://192.168.2.105:7890<br></code></pre></td></tr></table></figure><h1 id="方法二：编写-Dockerfile-时指定"><a href="#方法二：编写-Dockerfile-时指定" class="headerlink" title="方法二：编写 Dockerfile 时指定"></a>方法二：编写 Dockerfile 时指定</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ENV http_proxy http://192.168.2.105:7890<br>ENV https_proxy http://192.168.2.105:7890<br></code></pre></td></tr></table></figure><p>但这样的话，就把 http_proxy 写死到 dockerfile 中了。<br>使用这个 image 的人就麻烦了，他要通过这样的方式来 run。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --env http_proxy=http://192.168.2.105:7890 test<br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/chang_harry/article/details/53464778"></a></p>]]></content>
    
    
    <categories>
      
      <category>docker教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>proxy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows 更新时不更新驱动</title>
    <link href="/2022/05/14/yuque/Windows%20%E6%9B%B4%E6%96%B0%E6%97%B6%E4%B8%8D%E6%9B%B4%E6%96%B0%E9%A9%B1%E5%8A%A8/"/>
    <url>/2022/05/14/yuque/Windows%20%E6%9B%B4%E6%96%B0%E6%97%B6%E4%B8%8D%E6%9B%B4%E6%96%B0%E9%A9%B1%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<p><code>WIN + R</code> 快捷键，运行 <code>gpedit.msc</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1654381900004-fd1d4a59-7d2a-4a50-877d-f16232856785.png#clientId=u760afa82-500f-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=237&id=u43b3043e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=237&originWidth=413&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=16040&status=done&style=none&taskId=uc3751f95-abda-4f71-a7b8-53018641d9d&title=&width=413" alt="image.png"><br>找到<code>计算机配置 - 管理模板 - Windows 组件 - Windows 更新 - 管理从 Windows 更新提供的更新 - Windows 更新不包括驱动程序</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1654381849419-14b44d24-5e61-4397-bfda-29c9422043ae.png#clientId=u760afa82-500f-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=1014&id=u9a790c4a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1014&originWidth=1392&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=190539&status=done&style=none&taskId=ucc45d0bc-fdc6-4f97-b868-51b14fb0680&title=&width=1392" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>Windows教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
      <tag>update</tag>
      
      <tag>driver</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 网页管理面板 Cockpit</title>
    <link href="/2022/05/11/yuque/Linux%20%E7%BD%91%E9%A1%B5%E7%AE%A1%E7%90%86%E9%9D%A2%E6%9D%BF%20Cockpit/"/>
    <url>/2022/05/11/yuque/Linux%20%E7%BD%91%E9%A1%B5%E7%AE%A1%E7%90%86%E9%9D%A2%E6%9D%BF%20Cockpit/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://cockpit-project.org/">https://cockpit-project.org/</a> &gt; <a href="https://cockpit-project.org/running.html">https://cockpit-project.org/running.html</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cockpit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows 开机自启动设置</title>
    <link href="/2022/05/08/yuque/Windows%20%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8%E8%AE%BE%E7%BD%AE/"/>
    <url>/2022/05/08/yuque/Windows%20%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>我们同时按键盘上的 win+R 键，调出运行窗口，在运行窗口中输入 shell:startup 命令，然后回车执行。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1652024125206-df96efb4-63c8-4edd-afdc-ccb2ad676779.png#clientId=u6db849be-820c-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=217&id=u1c5e9c08&margin=%5Bobject%20Object%5D&name=image.png&originHeight=325&originWidth=626&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=19152&status=done&style=none&taskId=ud24f7b24-cef5-4366-84cb-6ee2149553b&title=&width=417.3333333333333" alt="image.png"><br>会直接进入目录<br>C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup<br><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1652024205827-a5f5ccdc-50d8-4085-83c8-44c82ba3704b.png#clientId=u6db849be-820c-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=187&id=u16c31f3a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=280&originWidth=1284&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=26171&status=done&style=none&taskId=uebd560dc-78c8-45d2-b858-8ec9aaba948&title=&width=856" alt="image.png"></p><p>可以放想要开机启动的 快捷方式</p>]]></content>
    
    
    <categories>
      
      <category>Windows教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FUCK-GFW</title>
    <link href="/2022/05/08/yuque/FUCK-GFW/"/>
    <url>/2022/05/08/yuque/FUCK-GFW/</url>
    
    <content type="html"><![CDATA[<h1 id="Windows-万能命令"><a href="#Windows-万能命令" class="headerlink" title="Windows 万能命令"></a>Windows 万能命令</h1><h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> <span class="hljs-attribute">http_proxy</span>=http://127.0.0.1:7890 &amp; <span class="hljs-built_in">set</span> <span class="hljs-attribute">https_proxy</span>=http://127.0.0.1:7890<br></code></pre></td></tr></table></figure><h2 id="Powershell"><a href="#Powershell" class="headerlink" title="Powershell"></a>Powershell</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$Env</span><span class="hljs-symbol">:http_proxy=<span class="hljs-string">&quot;http://127.0.0.1:7890&quot;</span></span>;<span class="hljs-variable">$Env</span><span class="hljs-symbol">:https_proxy=<span class="hljs-string">&quot;http://127.0.0.1:7890&quot;</span></span><br></code></pre></td></tr></table></figure><h1 id="Linux-万能命令"><a href="#Linux-万能命令" class="headerlink" title="Linux 万能命令"></a>Linux 万能命令</h1><h2 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">http</span><br>wget http://github.com/coder/code-server/releases/download/v4.8.0/code-server_4.8.0_amd64.deb -e use_proxy=yes -e http_proxy=192.168.3.126:10811<br><span class="hljs-meta prompt_"># </span><span class="language-bash">https</span><br>wget https://github.com/coder/code-server/releases/download/v4.8.0/code-server_4.8.0_amd64.deb -e use_proxy=yes -e https_proxy=192.168.3.126:10811<br></code></pre></td></tr></table></figure><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">在终端中导出以下变量</span><br>export http_proxy=&quot;http://192.168.0.103:7890&quot;<br>export https_proxy=&quot;http://192.168.0.103:7890&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">并使用以下命令禁用代理</span><br>unset http_proxy<br>unset https_proxy<br></code></pre></td></tr></table></figure><h1 id="通用解释："><a href="#通用解释：" class="headerlink" title="通用解释："></a>通用解释：</h1><p><code>~</code> 代表用户目录<br>查看方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> %USERPROFILE%<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~<br><span class="hljs-built_in">pwd</span><br></code></pre></td></tr></table></figure><h1 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h1><blockquote><p><a href="https://developer.aliyun.com/mirror/pypi">https://developer.aliyun.com/mirror/pypi</a> &gt; <a href="https://mirrors.huaweicloud.com/home">https://mirrors.huaweicloud.com/home</a></p></blockquote><p>Pip 的配置文件为用户根目录下的：~&#x2F;.pip&#x2F;pip.conf（Windows 路径为：C:\Users&lt;UserName&gt;\pip\pip.ini）, 您可以配置如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[global]<br>index-url = https://mirrors.aliyun.com/pypi/simple/<br><br>[install]<br>trusted-host=mirrors.aliyun.com<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[global]<br>proxy = http://127.0.0.1:7890<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install ??? --proxy=代理服务器IP:端口号<br></code></pre></td></tr></table></figure><h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><p>~&#x2F;.gitconfig</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[http]<br>proxy = http://127.0.0.1:7890<br>[https]<br>proxy = https://127.0.0.1:7890<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global http.proxy http://127.0.0.1:1080<br>git config --global https.proxy https://127.0.0.1:7890<br><br>git config --global --<span class="hljs-built_in">unset</span> http.proxy<br>git config --global --<span class="hljs-built_in">unset</span> https.proxy<br></code></pre></td></tr></table></figure><h1 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h1><blockquote><p><a href="https://developer.aliyun.com/mirror/maven">https://developer.aliyun.com/mirror/maven</a></p></blockquote><p>在 build.gradle 文件中加入以下代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">allprojects &#123;<br>    repositories &#123;<br>        maven &#123; url <span class="hljs-string">&#x27;https://maven.aliyun.com/repository/public/&#x27;</span> &#125;<br>        mavenLocal()<br>        mavenCentral()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>~&#x2F;.gradle&#x2F;gradle.properties</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemProp.http.proxyHost=127.0.0.1<br>systemProp.http.proxyPort=7890<br>systemProp.https.proxyHost=127.0.0.1<br>systemProp.https.proxyPort=7890<br></code></pre></td></tr></table></figure><h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><blockquote><p><a href="https://developer.aliyun.com/mirror/maven">https://developer.aliyun.com/mirror/maven</a> &gt; <a href="https://mirrors.huaweicloud.com/home">https://mirrors.huaweicloud.com/home</a></p></blockquote><p>~&#x2F;.m2&#x2F;settings.xml<br>&lt;Maven 安装目录&gt;&#x2F;conf&#x2F;settings.xml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;mirror&gt;<br>    &lt;<span class="hljs-built_in">id</span>&gt;aliyunmaven&lt;/id&gt;<br>    &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;<br>    &lt;name&gt;阿里云公共仓库&lt;/name&gt;<br>    &lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt;<br>&lt;/mirror&gt;<br>&lt;mirror&gt;<br>    &lt;<span class="hljs-built_in">id</span>&gt;huaweicloud&lt;/id&gt;<br>    &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;<br>    &lt;url&gt;https://repo.huaweicloud.com/repository/maven/&lt;/url&gt;<br>&lt;/mirror&gt;<br></code></pre></td></tr></table></figure><h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><blockquote><p><a href="https://www.npmmirror.com/">https://www.npmmirror.com/</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g cnpm --registry=https://registry.npmmirror.com<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> proxy http://127.0.0.1:7890<br>npm config <span class="hljs-built_in">set</span> https-proxy http://127.0.0.1:7890<br>npm config delete proxy<br>npm config delete https-proxy<br></code></pre></td></tr></table></figure><h1 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn config <span class="hljs-built_in">set</span> proxy http://127.0.0.1:7890<br>yarn config <span class="hljs-built_in">set</span> https-proxy http://127.0.0.1:7890<br></code></pre></td></tr></table></figure><h1 id="wget-1"><a href="#wget-1" class="headerlink" title="wget"></a>wget</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">use_proxy=<span class="hljs-built_in">yes</span> http_proxy=127.0.0.1:7890 https_proxy=127.0.0.1:7890<br>~/.wgetrc<br></code></pre></td></tr></table></figure><h1 id="snap"><a href="#snap" class="headerlink" title="snap"></a>snap</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo snap <span class="hljs-built_in">set</span> system proxy.http=<span class="hljs-string">&quot;http://127.0.0.1:7890&quot;</span><br>sudo snap <span class="hljs-built_in">set</span> system proxy.https=<span class="hljs-string">&quot;http://127.0.0.1:7890&quot;</span><br></code></pre></td></tr></table></figure><h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><blockquote><p><a href="https://help.aliyun.com/document_detail/60750.html">https://help.aliyun.com/document_detail&#x2F;60750.html</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>proxy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>proxy</tag>
      
      <tag>GFW</tag>
      
      <tag>mirror</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java环境配置</title>
    <link href="/2022/05/04/yuque/Java%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/05/04/yuque/Java%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p><strong>仅 展示 Win10 &#x2F; Win11 旧版系统，建议百度。</strong></p><h1 id="找到-Java-的安装目录"><a href="#找到-Java-的安装目录" class="headerlink" title="找到 Java 的安装目录"></a>找到 Java 的安装目录</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651665589259-5d81253d-f76d-4f29-9b83-ab274d734295.png#clientId=u979ee81f-725b-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=504&id=K4xcx&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1007&originWidth=1393&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=125144&status=done&style=none&taskId=u3f0b5ee5-e5ea-442b-bc67-f7a5a51054d&title=&width=696.5" alt="image.png"></p><h1 id="配置-JAVA-HOME"><a href="#配置-JAVA-HOME" class="headerlink" title="配置 JAVA_HOME"></a>配置 JAVA_HOME</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651666469414-82612969-6428-40fd-bb43-cd464d51a4de.png#clientId=u979ee81f-725b-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=247&id=udd1746fd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=791&originWidth=737&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=187194&status=done&style=none&taskId=uc5a5a1c7-c76a-4214-aa58-1dd193366fc&title=&width=230.5" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651668355508-6c36eba8-24b7-466a-adcc-bad2de6d7a31.png#clientId=u979ee81f-725b-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=435&id=u3e4dbf2c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1232&originWidth=1212&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=82379&status=done&style=none&taskId=u36ad2513-bdb1-4969-8fe9-57613efb5b0&title=&width=428" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651668363033-1af7f377-81bb-43bb-934b-007ab199a1eb.png#clientId=u979ee81f-725b-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=337&id=ue272d698&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1094&originWidth=958&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=71450&status=done&style=none&taskId=u5adb0071-1db0-4213-aa44-4264fa77d7e&title=&width=295" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651668394741-154c0440-e293-4f08-b2bc-25dc23ea75ab.png#clientId=u979ee81f-725b-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=346&id=uc968a903&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1203&originWidth=1236&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=96829&status=done&style=none&taskId=ue50c7443-0985-4d1b-be00-7e11b88cf51&title=&width=355" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651668441986-d30da667-badc-4a27-a277-15119fb40e14.png#clientId=u979ee81f-725b-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=168&id=u9c391d04&margin=%5Bobject%20Object%5D&name=image.png&originHeight=335&originWidth=1306&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=36480&status=done&style=none&taskId=uab4b3b26-b52b-4716-9424-64e7bbebf07&title=&width=653" alt="image.png"></p><h1 id="配置-PATH"><a href="#配置-PATH" class="headerlink" title="配置 PATH"></a>配置 PATH</h1><p>%JAVA_HOME%\bin</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651668458300-5d61e2e5-be09-4834-9fa7-7ef3a61a1fb5.png#clientId=u979ee81f-725b-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=355&id=u12c7c6ce&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1203&originWidth=1236&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=95448&status=done&style=none&taskId=uddb36d45-f91b-49d7-b277-55ef7e9cc68&title=&width=365" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651668604021-5e96ab08-aa55-4da6-b50c-c98905a1808c.png#clientId=u5aae59a8-e573-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=344&id=u7dd1f98f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1029&originWidth=1054&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=73125&status=done&style=none&taskId=uda663f8c-2392-416d-a50d-8b7c9a4fed0&title=&width=352" alt="image.png"></p><h1 id="最后-把刚才-所有打开的窗口-，都点一下-确定-。"><a href="#最后-把刚才-所有打开的窗口-，都点一下-确定-。" class="headerlink" title="最后 把刚才 所有打开的窗口 ，都点一下 确定 。"></a>最后 把刚才 所有打开的窗口 ，都点一下 确定 。</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651668651994-0c4a32fb-b93e-4f67-a8b9-dbbc24bd2f55.png#clientId=u5aae59a8-e573-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=353&id=u0b2bea5c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1094&originWidth=958&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=68365&status=done&style=none&taskId=u2bb6eaa7-268d-4b09-9c29-1cc2cbcb8d7&title=&width=309" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651668659402-f44f09f2-ef75-4d50-b7c4-7ae130e280b7.png#clientId=u5aae59a8-e573-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=378&id=u944fc317&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1203&originWidth=1236&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=93238&status=done&style=none&taskId=u1dfd66e3-be59-435b-856d-819bd5cf893&title=&width=388" alt="image.png"></p><h1 id="验证效果"><a href="#验证效果" class="headerlink" title="验证效果"></a>验证效果</h1><p>打开 命令行指示符 &#x2F; Windows 终端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -version<br>javac -version<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651668782488-f1bedebf-9a49-4fad-85c2-222d087719b3.png#clientId=u5aae59a8-e573-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=155&id=u34c86690&margin=%5Bobject%20Object%5D&name=image.png&originHeight=309&originWidth=1279&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=39254&status=done&style=none&taskId=u79149093-4dbb-4dec-859b-97f79161b95&title=&width=639.5" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原魔</title>
    <link href="/2022/05/04/yuque/%E5%8E%9F%E9%AD%94/"/>
    <url>/2022/05/04/yuque/%E5%8E%9F%E9%AD%94/</url>
    
    <content type="html"><![CDATA[<blockquote><p>相关资料参考<br><a href="https://github.com/Grasscutters/Grasscutter/wiki">https://github.com/Grasscutters/Grasscutter/wiki</a> &gt; <a href="https://blog.tomys.top/2022-04/genshintj/">https://blog.tomys.top/2022-04/genshintj/</a> &gt; <a href="https://blog.otoo.top/Blog/Genshin2-6-Grasscutters/">https://blog.otoo.top/Blog/Genshin2-6-Grasscutters/</a> &gt; <a href="https://memorz.top/archives/112">https://memorz.top/archives/112</a></p></blockquote><h1 id="客户端部分（白嫖的人看"><a href="#客户端部分（白嫖的人看" class="headerlink" title="客户端部分（白嫖的人看"></a>客户端部分（白嫖的人看</h1><p>代理 IP 地址：<strong>josway.cc</strong><br>端口：<strong>54321</strong></p><h2 id="Windows-Win10-x2F-11"><a href="#Windows-Win10-x2F-11" class="headerlink" title="Windows Win10 &#x2F; 11"></a>Windows Win10 &#x2F; 11</h2><h3 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h3><p>设置 -&gt; 网络和 Internet -&gt; 代理 -&gt; 手动设置代理 -&gt; 使用代理服务器 -&gt; 编辑<br><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651667367008-e0c8c7c2-57af-416a-aee3-5e8060feed8b.png#clientId=ub2e1cba3-767d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=400&id=uabe62db8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1329&originWidth=1832&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=114733&status=done&style=none&taskId=u3be1a87a-b664-4b90-b8e9-f9a35b26080&title=&width=552" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651995321432-52242d58-3149-4c50-b972-6a8360d341e1.png#clientId=u4a851f06-56a7-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=436&id=u2949385d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=872&originWidth=952&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=36294&status=done&style=none&taskId=ue9761fe7-962f-4940-ad81-406412d70ca&title=&width=476" alt="image.png"></p><h3 id="然后直接打开-国服-x2F-国际服-客户端-开始游戏即可。"><a href="#然后直接打开-国服-x2F-国际服-客户端-开始游戏即可。" class="headerlink" title="然后直接打开 国服&#x2F;国际服 客户端 开始游戏即可。"></a>然后直接打开 国服&#x2F;国际服 客户端 开始游戏即可。</h3><h3 id="下载、信任证书-（可选操作，如果不能直接开始游戏-操作此步骤"><a href="#下载、信任证书-（可选操作，如果不能直接开始游戏-操作此步骤" class="headerlink" title="下载、信任证书 （可选操作，如果不能直接开始游戏 操作此步骤"></a>下载、信任证书 （可选操作，如果不能直接开始游戏 操作此步骤</h3><p>使用浏览器 访问 <a href="http://mitm.it/">http://mitm.it/</a><br><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651667962395-caa1f890-353a-40e9-b125-c3f725928358.png#clientId=ub2e1cba3-767d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=388&id=u596e17ac&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1355&originWidth=1100&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=138348&status=done&style=none&taskId=ue1a25509-31e7-4774-bcce-ef4df769854&title=&width=315" alt="image.png"><br>双击打开相应服务器的证书 -&gt; 安装证书 -&gt; 本地计算机 -&gt; 放入下列…-&gt; 浏览 -&gt; 受信任的根证书颁发机构 -&gt; 完成 （途中其他选项一律默认下一步即可</p><h2 id="IOS"><a href="#IOS" class="headerlink" title="IOS"></a>IOS</h2><h3 id="配置代理-1"><a href="#配置代理-1" class="headerlink" title="配置代理"></a>配置代理</h3><p>设置 -&gt; 无线局域网 -&gt; 点击当前链接 WIFI 的最右边蓝色的圈 -&gt; 配置代理（HTTP 代理）<br><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651667726358-52a73dcf-430b-4e86-aca2-b37e52cdbe26.png#clientId=ub2e1cba3-767d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=323&id=u2bc3a029&margin=%5Bobject%20Object%5D&name=d7635089e47af294d93f15387c91eb0.png&originHeight=2266&originWidth=1488&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=879070&status=done&style=none&taskId=u99074117-5536-4087-9c36-225d761ea83&title=&width=212" alt="d7635089e47af294d93f15387c91eb0.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651667739771-5687a991-de0b-4d03-bf2f-4658465b4655.png#clientId=ub2e1cba3-767d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=321&id=u60f1bc34&margin=%5Bobject%20Object%5D&name=c4475e4284ef0868aff7299a4d7d957.png&originHeight=2266&originWidth=1488&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=1142392&status=done&style=none&taskId=u7c78930d-ae55-4280-92a7-59f6e05c5e0&title=&width=211" alt="c4475e4284ef0868aff7299a4d7d957.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651667773213-88e88bc5-54e0-4fdc-87c6-2e56c1ebda88.png#clientId=ub2e1cba3-767d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=320&id=u7eae44f0&margin=%5Bobject%20Object%5D&name=d89a2c0af892a0ecfd1da293577c4c6.png&originHeight=2266&originWidth=1488&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=696044&status=done&style=none&taskId=u9a02063f-1add-44ad-a71a-3198e324252&title=&width=210" alt="d89a2c0af892a0ecfd1da293577c4c6.png"></p><h3 id="下载证书并信任"><a href="#下载证书并信任" class="headerlink" title="下载证书并信任"></a>下载证书并信任</h3><p>使用 safari 访问 <a href="http://mitm.it/">http://mitm.it/</a><br><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651667887547-11330624-5fa8-43db-aab1-40a101f6473b.png#clientId=ub2e1cba3-767d-4&crop=0&crop=0&crop=1&crop=0.8392&from=paste&height=439&id=u2a7bbc5f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1578&originWidth=1121&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=167850&status=done&style=none&taskId=uf59d25a7-2862-49e8-a723-53e85306e08&title=&width=312" alt="image.png"><br>通用 -&gt; VPN 与设备管理<br>通用 -&gt; 关于手机 -&gt; 证书信任设置<br><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651668165461-744fc4cf-79a1-4ac5-93b5-59ea7ec4666c.png#clientId=ub2e1cba3-767d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=445&id=u775e3ea5&margin=%5Bobject%20Object%5D&name=baeb80230ddd61930053ea5978e449e.png&originHeight=2266&originWidth=1488&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=700834&status=done&style=none&taskId=u3a6534df-0fc8-4eab-a298-a0f7b31d7a7&title=&width=292" alt="baeb80230ddd61930053ea5978e449e.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651668183676-0bfdde59-73fc-4080-bf89-dfa0f57d6967.png#clientId=ub2e1cba3-767d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=442&id=u28f467eb&margin=%5Bobject%20Object%5D&name=e1b2209838a4541504701b5a512b440.png&originHeight=2266&originWidth=1488&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=715084&status=done&style=none&taskId=ud86b2f4d-35eb-4191-8e50-87ccbe1186b&title=&width=290" alt="e1b2209838a4541504701b5a512b440.png"></p><h2 id="android"><a href="#android" class="headerlink" title="android"></a>android</h2><p>需要 ROOT （安装证书到系统必要条件<br>暂无教程（没测试</p><h1 id="服务端部分-（白嫖的人不用看"><a href="#服务端部分-（白嫖的人不用看" class="headerlink" title="服务端部分 （白嫖的人不用看"></a>服务端部分 （白嫖的人不用看</h1><h2 id="直接鸽"><a href="#直接鸽" class="headerlink" title="直接鸽~"></a>直接鸽~</h2><blockquote><p><a href="https://blog.tomys.top/2022-04/genshintj/">https://blog.tomys.top/2022-04/genshintj/</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>游戏教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原神</tag>
      
      <tag>Genshin Impact</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装Windows操作系统</title>
    <link href="/2022/05/01/yuque/%E5%AE%89%E8%A3%85Windows%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <url>/2022/05/01/yuque/%E5%AE%89%E8%A3%85Windows%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="所需硬件"><a href="#所需硬件" class="headerlink" title="所需硬件"></a>所需硬件</h1><ul><li>电脑一台</li><li>U 盘一个</li></ul><h1 id="所需软件"><a href="#所需软件" class="headerlink" title="所需软件"></a>所需软件</h1><ul><li>WEPE <a href="https://www.wepe.com.cn/download.html">https://www.wepe.com.cn/download.html</a></li><li>Windsys <a href="https://windsys.win/works">https://windsys.win/works</a></li></ul><h2 id="WEPE-下载"><a href="#WEPE-下载" class="headerlink" title="WEPE 下载"></a>WEPE 下载</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/gif/28199557/1651661994142-9290bb65-0ef4-4488-be21-cebc301f978c.gif#clientId=u69d6dc6c-10f4-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=uf262c21b&margin=%5Bobject%20Object%5D&name=%E5%8A%A8%E7%94%BB.gif&originHeight=1150&originWidth=2080&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=2140314&status=done&style=none&taskId=u23e5daa1-bc35-4887-b068-1ec720ce094&title=" alt="动画.gif"></p><h2 id="Windsys-下载"><a href="#Windsys-下载" class="headerlink" title="Windsys 下载"></a>Windsys 下载</h2><h3 id="选择你想安装的系统版本（推荐-LTSC"><a href="#选择你想安装的系统版本（推荐-LTSC" class="headerlink" title="选择你想安装的系统版本（推荐 LTSC"></a>选择你想安装的系统版本（推荐 LTSC</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651662144250-4c334ab2-b33c-41c8-8a11-6d4c4f1e3730.png#clientId=u69d6dc6c-10f4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=716&id=u28e78be2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1431&originWidth=1597&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=3231304&status=done&style=none&taskId=u303d5199-a634-465c-9567-311bae14238&title=&width=798.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651662179449-3ed410e6-7f91-43d0-9b51-365f8564c50b.png#clientId=u69d6dc6c-10f4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=225&id=ud4366b0f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=450&originWidth=862&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=36933&status=done&style=none&taskId=u457073f1-4a34-4431-8412-eaad64bc1d6&title=&width=431" alt="image.png"></p><h3 id="同意协议、确认版本、下载"><a href="#同意协议、确认版本、下载" class="headerlink" title="同意协议、确认版本、下载"></a>同意协议、确认版本、下载</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/gif/28199557/1651662362503-d46008da-8a87-4e73-a32e-5425c755beec.gif#clientId=u69d6dc6c-10f4-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u0a52c24b&margin=%5Bobject%20Object%5D&name=%E5%8A%A8%E7%94%BB1.gif&originHeight=1441&originWidth=2470&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=1505124&status=done&style=none&taskId=uef14a2db-aef2-450f-9269-e0f7db076c0&title=" alt="动画1.gif"></p><h1 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h1><h2 id="安装-WEPE"><a href="#安装-WEPE" class="headerlink" title="安装 WEPE"></a>安装 WEPE</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651662475013-a9844b13-afce-4c04-b831-144fd15494bc.png#clientId=u69d6dc6c-10f4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=221&id=ucd0544a8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=442&originWidth=1190&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=206321&status=done&style=none&taskId=ufee8dca0-8805-450b-ae25-557d4682128&title=&width=595" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651662490331-66052c46-5028-4ee3-9765-ae63f7ab2f98.png#clientId=u69d6dc6c-10f4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=221&id=u95813564&margin=%5Bobject%20Object%5D&name=image.png&originHeight=759&originWidth=1124&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=38012&status=done&style=none&taskId=uf52cc72e-c785-47fd-9c9b-a969ec63b79&title=&width=328" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651662533516-5ec02236-0c33-48b1-b36f-8ddf54ad5234.png#clientId=u69d6dc6c-10f4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=218&id=uf645bc5c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=700&originWidth=1120&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=45459&status=done&style=none&taskId=u19966d51-676f-476b-a31c-6a285906f62&title=&width=348" alt="image.png"></p><h1 id="开始重装"><a href="#开始重装" class="headerlink" title="开始重装"></a>开始重装</h1><h2 id="重启电脑-进-BIOS-设置-U-盘启动（具体百度"><a href="#重启电脑-进-BIOS-设置-U-盘启动（具体百度" class="headerlink" title="重启电脑 进 BIOS 设置 U 盘启动（具体百度"></a>重启电脑 进 BIOS 设置 U 盘启动（具体百度</h2><p>（最好，先用 分区精灵 格式化并快速分区一下 现有的系统盘<br>进入 WEPE 后，点击 <code>Dism++</code> 软件，接受协议。<br>然后进行系统安装（<code>恢复功能</code>-&gt;<code>系统还原</code>)<br><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651662876960-74a71e10-fc1c-4fc4-bc86-66337443b905.png#clientId=u69d6dc6c-10f4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=119&id=u7197f03c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=238&originWidth=237&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=19607&status=done&style=none&taskId=ubbbc72b1-30e8-4aca-861b-165764937fe&title=&width=118.5" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651662891880-8e56c09b-64ac-4caf-a726-f1d969cf373b.png#clientId=u69d6dc6c-10f4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=346&id=uf6a8c306&margin=%5Bobject%20Object%5D&name=image.png&originHeight=920&originWidth=1207&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=128333&status=done&style=none&taskId=uaaa8fdd2-f86f-4075-9108-70bfdf46e96&title=&width=453.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651662944193-addc7ef4-3bcc-4e1e-bc12-b74863a8104c.png#clientId=u69d6dc6c-10f4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=177&id=u9814782a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=677&originWidth=774&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=145712&status=done&style=none&taskId=ud2b9b245-6b76-4566-bf91-eb374c78dc3&title=&width=202" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651663025119-cc3b98a5-2e54-4041-8929-4a0d1f3f02a8.png#clientId=u69d6dc6c-10f4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=293&id=ufa06eb0e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=754&originWidth=1111&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=85152&status=done&style=none&taskId=u287e5c12-eade-42f3-858f-3676be47ff9&title=&width=431.5" alt="image.png"></p><h2 id="最后-拔掉-U-盘-重启电脑"><a href="#最后-拔掉-U-盘-重启电脑" class="headerlink" title="最后 拔掉 U 盘 重启电脑"></a>最后 拔掉 U 盘 重启电脑</h2>]]></content>
    
    
    <categories>
      
      <category>Windows教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电脑配置</title>
    <link href="/2022/04/28/yuque/%E7%94%B5%E8%84%91%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/04/28/yuque/%E7%94%B5%E8%84%91%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="多余配件"><a href="#多余配件" class="headerlink" title="多余配件"></a>多余配件</h1><p>振华 冰山金蝶 GX450<br>DDR4 8G 3200 + DDR4 8G 2400</p><h1 id="台式机"><a href="#台式机" class="headerlink" title="台式机"></a>台式机</h1><table><thead><tr><th><strong>部件</strong></th><th><strong>型号</strong></th><th><strong>数量</strong></th><th><strong>价格</strong></th><th><strong>渠道</strong></th></tr></thead><tbody><tr><td>处理器</td><td>12400</td><td>1</td><td>955</td><td>PDD</td></tr><tr><td>主板</td><td></td><td></td><td></td><td></td></tr><tr><td>1</td><td></td><td></td><td></td><td></td></tr><tr><td>JD</td><td></td><td></td><td></td><td></td></tr><tr><td>显卡</td><td>UHD 730</td><td>1</td><td>0</td><td></td></tr><tr><td>内存</td><td>DDR4 32G 2666</td><td>4</td><td>1500</td><td>JD</td></tr><tr><td>硬盘</td><td>SN720 256G + aigo P2000 1T</td><td>1+1</td><td>399</td><td>整机拆机的 + JD</td></tr><tr><td>电源</td><td>Apexgaming AJ-750M</td><td>1</td><td>450</td><td>JD</td></tr><tr><td>散热器</td><td>PA120 SE ARGB</td><td>1</td><td>150</td><td>淘宝</td></tr><tr><td>机箱</td><td>银角大王</td><td>1</td><td>159</td><td>淘宝</td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>总价</td><td></td><td>5888</td><td></td></tr></tbody></table><h1 id="笔记本"><a href="#笔记本" class="headerlink" title="笔记本"></a>笔记本</h1><p>处理器:<br>英特尔 酷睿 i5-10500H @ 2.50GHz 六核<br>主板:<br>Firebat T5G (英特尔 HM470 芯片组)<br>内存:<br>32GB DDR4 2933MHz ( 16GB + 16GB )<br>显卡:<br>Intel(R) UHD Graphics ( 1GB&#x2F;蓝天)<br>NVIDIA GeForce RTX 3060 Laptop GPU ( 6GB&#x2F;蓝天)<br>显示器:<br>Vx2780-2K-PRO[优派 VSC9238] ( 27.2 英寸)<br>NV156FHM-N4G[京东方 BOE084D] ( 15.3 英寸)<br>硬盘:<br>SDXC Card ( 62GB)<br>Teclast 360GB A850 ( 360GB)<br>J.ZAO 5 SERIES 256GB SSD ( 256GB )<br>J.ZAO 5 SERIES 256GB SSD ( 256GB)<br>声卡:<br>Realtek High Definition Audio<br>英特尔(R)显示器音频<br>NVIDIA High Definition Audio<br>网卡:<br>Intel(R) Wi-Fi 6 AX200 160MHz<br>Realtek PCle GbE Family Controller</p>]]></content>
    
    
    <categories>
      
      <category>电脑相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>computer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何判断查看公网IP</title>
    <link href="/2022/04/28/yuque/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E6%9F%A5%E7%9C%8B%E5%85%AC%E7%BD%91IP/"/>
    <url>/2022/04/28/yuque/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E6%9F%A5%E7%9C%8B%E5%85%AC%E7%BD%91IP/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.jianshu.com/p/a0aced8652c8">https://www.jianshu.com/p/a0aced8652c8</a></p></blockquote><h1 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h1><ul><li>你可以电脑本机 PPPOE 拨号。然后 任务管理器（Win10） 查看。</li><li>你可以登录光猫查看。（需要账号密码，一般在光猫盒底下）</li><li>你可以登录路由器查看。（需要账号密码，一般为自己设置或路由器底下）</li></ul><h1 id="如何判断"><a href="#如何判断" class="headerlink" title="如何判断"></a>如何判断</h1><h2 id="判断准则：一致就是公网-IP，反之。"><a href="#判断准则：一致就是公网-IP，反之。" class="headerlink" title="判断准则：一致就是公网 IP，反之。"></a>判断准则：一致就是公网 IP，反之。</h2><p>这里推荐 ip.sb 来查看<br>查看方法，浏览器 地址栏 中输入，会同时得到你的 IPV4 和 IPV6 地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip.sb<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651077037111-8c794b0f-faf1-4410-82b3-43415eed61ec.png#clientId=ub1dc12a1-dba7-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=905&id=u3dd6f195&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1131&originWidth=947&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=193688&status=done&style=none&taskId=ufb5716c1-8b1e-41c8-bda6-b9401610c3b&title=&width=757.6" alt="image.png"></p><h1 id="PPPOE-比较少-不展开"><a href="#PPPOE-比较少-不展开" class="headerlink" title="PPPOE 比较少 不展开"></a>PPPOE 比较少 不展开</h1><p>看 任务管理器 ，是否与 ip.sb 一致。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651077390228-f5314fc2-8a4e-4164-90bb-a1a612badf96.png#clientId=uf778cedb-b977-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=585&id=u61e38783&margin=%5Bobject%20Object%5D&name=image.png&originHeight=731&originWidth=865&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=97113&status=done&style=none&taskId=ub324f8d2-e60b-4a29-a988-e28232faa2b&title=&width=692" alt="image.png"></p><h1 id="光猫"><a href="#光猫" class="headerlink" title="光猫"></a>光猫</h1><p>打开 状态-网络侧信息 查看 INTERNET_R_VID 的 IP 地址 是否与 ip.sb 一致。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651077451043-b2724c93-8e83-465c-9bad-0879b55deff5.png#clientId=uf778cedb-b977-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uc957f112&margin=%5Bobject%20Object%5D&originHeight=632&originWidth=988&originalType=url%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&taskId=uc05d6672-e798-446a-aa52-cebe4e96b46&title="></p><h1 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h1><p>利用 路由器 账号密码 登录到路由器，查看 WAN 口状态 中的 IP 地址 是否与 ip.sb 一致。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651077694391-c9a7064d-7c1f-4d32-94b4-68a34eb92f44.png#clientId=uf778cedb-b977-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=541&id=u3e5478cb&margin=%5Bobject%20Object%5D&name=image.png&originHeight=676&originWidth=1229&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=88433&status=done&style=none&taskId=u31c43054-4de1-4cd3-9527-fe0a27a5295&title=&width=983.2" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>网络教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ip</tag>
      
      <tag>network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用 CloudDrive + Zfile 映射 115网盘 阿里网盘 等内容 到公网</title>
    <link href="/2022/04/28/yuque/%E5%88%A9%E7%94%A8%20CloudDrive%20+%20Zfile%20%E6%98%A0%E5%B0%84%20115%E7%BD%91%E7%9B%98%20%E9%98%BF%E9%87%8C%E7%BD%91%E7%9B%98%20%E7%AD%89%E5%86%85%E5%AE%B9%20%E5%88%B0%E5%85%AC%E7%BD%91/"/>
    <url>/2022/04/28/yuque/%E5%88%A9%E7%94%A8%20CloudDrive%20+%20Zfile%20%E6%98%A0%E5%B0%84%20115%E7%BD%91%E7%9B%98%20%E9%98%BF%E9%87%8C%E7%BD%91%E7%9B%98%20%E7%AD%89%E5%86%85%E5%AE%B9%20%E5%88%B0%E5%85%AC%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<h1 id="用到的工具-amp-前置条件"><a href="#用到的工具-amp-前置条件" class="headerlink" title="用到的工具 &amp; 前置条件"></a>用到的工具 &amp; 前置条件</h1><ul><li>CloudDrive <a href="https://t.me/cloud_nas">https://t.me/cloud_nas</a></li><li>Zfile <a href="https://github.com/zhaojun1998/zfile">https://github.com/zhaojun1998/zfile</a></li><li>公网 ip（ipv4&#x2F;ipv6）均可 （直接检索本博客 《如何判断查看公网 IP》）</li><li>如需公网分享，需了解 域名 ddns 知识。（开坑！！！）</li></ul><h1 id="公网-IP"><a href="#公网-IP" class="headerlink" title="公网 IP"></a>公网 IP</h1><p>查看方法，浏览器 地址栏 中输入，会同时得到你的 IPV4 和 IPV6 地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip.sb<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651077037111-8c794b0f-faf1-4410-82b3-43415eed61ec.png#clientId=ub1dc12a1-dba7-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=905&id=u3dd6f195&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1131&originWidth=947&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=193688&status=done&style=none&taskId=ufb5716c1-8b1e-41c8-bda6-b9401610c3b&title=&width=757.6" alt="image.png"></p><h1 id="下载安装两款软件"><a href="#下载安装两款软件" class="headerlink" title="下载安装两款软件"></a>下载安装两款软件</h1><h2 id="1、CloudDrive-直接下载安装"><a href="#1、CloudDrive-直接下载安装" class="headerlink" title="1、CloudDrive 直接下载安装"></a>1、CloudDrive 直接下载安装</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651075803117-7adfa0d8-e3f3-45fc-aa0f-8c878a73db0a.png#clientId=u028115c2-a703-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=833&id=u15fc199f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1041&originWidth=566&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=214237&status=done&style=none&taskId=u57e4f15f-1fba-49bc-a5f2-66892c1891a&title=&width=452.8" alt="image.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">CloudDriveSetup-X64-1.1.60.exe /silent<br></code></pre></td></tr></table></figure><p>或直接 “下一步”点点点安装均可</p><h2 id="2、Zfile-下载"><a href="#2、Zfile-下载" class="headerlink" title="2、Zfile 下载"></a>2、Zfile 下载</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651075834595-782e44ee-96df-4eba-adb0-c72612b60aca.png#clientId=u028115c2-a703-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=691&id=uef08fbba&margin=%5Bobject%20Object%5D&name=image.png&originHeight=864&originWidth=1543&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=124927&status=done&style=none&taskId=u8d954fb2-7583-4e16-a330-fa3d6e001ed&title=&width=1234.4" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651075853799-90a4107b-ceef-4cff-bdb9-be178d4ad5ea.png#clientId=u028115c2-a703-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=723&id=ubbcdabb5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=904&originWidth=1573&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=79727&status=done&style=none&taskId=u7a58c50a-beea-482c-8dd2-50db91388d0&title=&width=1258.4" alt="image.png"></p><h1 id="启动使用方法"><a href="#启动使用方法" class="headerlink" title="启动使用方法"></a>启动使用方法</h1><h1 id="1、CloudDrive"><a href="#1、CloudDrive" class="headerlink" title="1、CloudDrive"></a>1、CloudDrive</h1><p>打开管理页</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">localhost:9798<br></code></pre></td></tr></table></figure><p>注册登录（别忘记密码很难找回！！！）<br><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651076463731-6b2f257e-3998-4d27-81d5-be1727c84a6f.png#clientId=u028115c2-a703-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=329&id=uf1b4cf0b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=411&originWidth=881&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=52207&status=done&style=none&taskId=u0cefcd15-ae89-4991-b1ff-8f16dade438&title=&width=704.8" alt="image.png"><br>点击后 直接使用手机扫描登陆即可添加<br><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651076521827-41ea4076-9f90-46d0-8037-98b1af00582e.png#clientId=u028115c2-a703-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=267&id=u6f5bfb5b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=334&originWidth=931&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=34520&status=done&style=none&taskId=u382456a0-d176-4482-b59d-1bbaae1a189&title=&width=744.8" alt="image.png"><br>添加后 点击 电脑 图标 挂在到本地<br><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651076555714-bca68450-1cb5-4b3f-8e1e-b34402040c3d.png#clientId=u028115c2-a703-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=442&id=u510b4fac&margin=%5Bobject%20Object%5D&name=image.png&originHeight=552&originWidth=704&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=42086&status=done&style=none&taskId=ub3902bc8-34b1-4857-8b9b-ad3a716df12&title=&width=563.2" alt="image.png"></p><h1 id="2、ZFile"><a href="#2、ZFile" class="headerlink" title="2、ZFile"></a>2、ZFile</h1><p>首先需要安装 JDK<br>然后在 JDK 的 bin 目录启动<br><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651076142534-93b231fa-a77e-49e7-be61-8f37f2710bbc.png#clientId=u028115c2-a703-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=205&id=u716f460a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=256&originWidth=822&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=22017&status=done&style=none&taskId=ufd224ef7-b68d-4972-bfd3-36741e0b7fa&title=&width=657.6" alt="image.png"><br>运行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar zfile版本号自定义.jar<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651076311995-c3e63da2-295b-4435-9330-6f2f74f3af72.png#clientId=u028115c2-a703-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=377&id=u20297525&margin=%5Bobject%20Object%5D&name=image.png&originHeight=471&originWidth=1229&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=92205&status=done&style=none&taskId=u5d3626b3-baa8-4078-9cfd-03ed78df422&title=&width=983.2" alt="image.png"><br>打开管理页</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">localhost:8080<br></code></pre></td></tr></table></figure><p>设置账号密码登录<br><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651076637381-5c5e10d2-de3e-4468-a1b4-a5819a7a9fe2.png#clientId=u028115c2-a703-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=346&id=ue2d0a977&margin=%5Bobject%20Object%5D&name=image.png&originHeight=433&originWidth=526&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=12841&status=done&style=none&taskId=uf2546b7a-30df-4ba9-acee-ceb39740fd5&title=&width=420.8" alt="image.png"><br>进入页面后 会提示不一致（如果真的不一致的话）一定要和你域名一样，不然无法下载！<br><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651076676865-8ada35df-4333-4162-8f4e-2436b692bc46.png#clientId=u028115c2-a703-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=506&id=u33795179&margin=%5Bobject%20Object%5D&name=image.png&originHeight=633&originWidth=1133&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=38349&status=done&style=none&taskId=ubeb07ccb-10c9-4a91-9839-8c056f5434d&title=&width=906.4" alt="image.png"><br>现在新增分享项目<br><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651076746685-e205af8f-9458-4c9f-aaab-7c5e8d0cfff9.png#clientId=u028115c2-a703-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=161&id=u24dd45f8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=201&originWidth=606&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=12024&status=done&style=none&taskId=u01870a39-89ff-434a-9d31-58df461cecd&title=&width=484.8" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651076830136-89d774b7-f92b-48d4-a516-34405df70730.png#clientId=u028115c2-a703-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=506&id=ufae822f6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=633&originWidth=917&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=38203&status=done&style=none&taskId=u75d4f15c-e923-45dd-b090-6fbe0a03fcc&title=&width=733.6" alt="image.png"></p><p>最后直接访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">localhost:8080<br></code></pre></td></tr></table></figure><p>就可以看到你的共享了<br><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1651076899886-00b34112-e848-46cd-903a-cffe7d0196ab.png#clientId=u028115c2-a703-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=386&id=u6150987e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=483&originWidth=496&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=13093&status=done&style=none&taskId=ud7f4c27c-7ec0-46a6-b6c8-7a856fb3c2f&title=&width=396.8" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>网盘教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cloudDrive</tag>
      
      <tag>Zfile</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yuque-hexo 同步 tags categories front-matter</title>
    <link href="/2022/04/26/yuque/yuque-hexo%20%E5%90%8C%E6%AD%A5%20tags%20categories%20front-matter/"/>
    <url>/2022/04/26/yuque/yuque-hexo%20%E5%90%8C%E6%AD%A5%20tags%20categories%20front-matter/</url>
    
    <content type="html"><![CDATA[<p>在正文最上面添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">tags: [yuque-hexo]<br>categories: [hexo]<br><br></code></pre></td></tr></table></figure><p>然后在上述代码第三行位置，直接使用 yuque 的 <code>插入分割线</code> 功能。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1650982102857-f3a52ad7-cfc7-4b2d-9c36-1acb82a7e930.png#clientId=u49846472-4830-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=95&id=u61cada63&margin=%5Bobject%20Object%5D&name=image.png&originHeight=119&originWidth=1408&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=16904&status=done&style=none&taskId=u6f84b8de-8962-4367-bf7c-5f742d660d3&title=&width=1126.4" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1650982195386-4231021d-9f6d-4423-b2a2-8154f7ae4c19.png#clientId=u42605161-1f5c-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=115&id=ub5af8b63&margin=%5Bobject%20Object%5D&name=image.png&originHeight=144&originWidth=992&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=5478&status=done&style=none&taskId=ue1e1b03d-281c-4df2-a81b-2ba614cd02c&title=&width=793.6" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>hexo教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>yuque-hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yuque-hexo 图片修复 fluid主题</title>
    <link href="/2022/04/26/yuque/yuque-hexo%20%E5%9B%BE%E7%89%87%E4%BF%AE%E5%A4%8D%20fluid%E4%B8%BB%E9%A2%98/"/>
    <url>/2022/04/26/yuque/yuque-hexo%20%E5%9B%BE%E7%89%87%E4%BF%AE%E5%A4%8D%20fluid%E4%B8%BB%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/x-cold/yuque-hexo/issues/41">https://github.com/x-cold/yuque-hexo/issues/41</a></p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1650979978747-0a202039-76fe-4b07-ae36-13a54e7715be.png#clientId=u7d39e4af-1036-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=887&id=fxGKO&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1109&originWidth=1272&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=135705&status=done&style=none&taskId=u6809fac8-e128-421c-9bd5-3e522d48866&title=&width=1017.6" alt="image.png"><br>打开文件 在 蓝框 header 区域 加入 红框 文字<br><code>themes\hexo-theme-fluid-1.8.14\layout\layout.ejs</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;referrer&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;no-referrer&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>hexo教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>yuque-hexo</tag>
      
      <tag>fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yuque-hexo 同步文档</title>
    <link href="/2022/04/25/yuque/yuque-hexo%20%E5%90%8C%E6%AD%A5%E6%96%87%E6%A1%A3/"/>
    <url>/2022/04/25/yuque/yuque-hexo%20%E5%90%8C%E6%AD%A5%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/x-cold/yuque-hexo">https://github.com/x-cold/yuque-hexo</a></p></blockquote><h1 id="安装-hexo-和-yuque-hexo"><a href="#安装-hexo-和-yuque-hexo" class="headerlink" title="安装 hexo 和 yuque-hexo"></a>安装 hexo 和 yuque-hexo</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g cnpm --registry=https://registry.npmmirror.com<br>cnpm i -g yuque-hexo<br>cnpm i -g hexo-cli<br><br>or<br><br>npm i -g yuque-hexo --registry=https://registry.npmmirror.com<br>npm i -g hexo-cli --registry=https://registry.npmmirror.com<br></code></pre></td></tr></table></figure><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;yuqueConfig&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;postPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;source/_posts/yuque&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;cachePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;yuque.json&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;mdNameFormat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;title&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;adapter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hexo&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;concurrency&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;baseUrl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.yuque.com/api/v2&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;login&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;josway&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;repo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ou8sgv&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;onlyPublished&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;onlyPublic&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;lastGeneratePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;lastGeneratePath.log&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;imgCdn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;imageBed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;qiniu&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;bucket&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;region&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;prefixKey&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h1 id="同步命令-Windows"><a href="#同步命令-Windows" class="headerlink" title="同步命令 Windows"></a>同步命令 Windows</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> YUQUE_TOKEN=G9AVFIsLTY6LIvFOwkMbUTOvPHgkmG4oHWSz7T7c &amp;&amp; yuque-hexo <span class="hljs-built_in">sync</span><br></code></pre></td></tr></table></figure><h1 id="同步文章并部署远端并推送仓库"><a href="#同步文章并部署远端并推送仓库" class="headerlink" title="同步文章并部署远端并推送仓库"></a>同步文章并部署远端并推送仓库</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">set YUQUE_TOKEN=G9AVFIsLTY6LIvFOwkMbUTOvPHgkmG4oHWSz7T7c &amp;&amp; yuque-hexo sync &amp;&amp; hexo clean &amp;&amp; hexo deploy &amp;&amp; git add . &amp;&amp; git commit -m &quot;edit&quot; &amp;&amp; git push origin master<br></code></pre></td></tr></table></figure><h1 id="同步部署本地命令-Windows"><a href="#同步部署本地命令-Windows" class="headerlink" title="同步部署本地命令 Windows"></a>同步部署本地命令 Windows</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> YUQUE_TOKEN=G9AVFIsLTY6LIvFOwkMbUTOvPHgkmG4oHWSz7T7c &amp;&amp; yuque-hexo <span class="hljs-built_in">sync</span> &amp;&amp; hexo clean &amp;&amp; hexo server<br></code></pre></td></tr></table></figure><h1 id="同步部署远端命令-Windows"><a href="#同步部署远端命令-Windows" class="headerlink" title="同步部署远端命令 Windows"></a>同步部署远端命令 Windows</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> YUQUE_TOKEN=G9AVFIsLTY6LIvFOwkMbUTOvPHgkmG4oHWSz7T7c &amp;&amp; yuque-hexo <span class="hljs-built_in">sync</span> &amp;&amp; hexo clean &amp;&amp; hexo deploy<br></code></pre></td></tr></table></figure><h1 id="同步-github-命令-Windows"><a href="#同步-github-命令-Windows" class="headerlink" title="同步 github 命令 Windows"></a>同步 github 命令 Windows</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add . &amp;&amp; git commit -m <span class="hljs-string">&quot;edit&quot;</span> &amp;&amp; git push origin master<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>hexo教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>yuque-hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Frps + Frpc 使用指南</title>
    <link href="/2022/04/25/yuque/Frps%20+%20Frpc%20%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <url>/2022/04/25/yuque/Frps%20+%20Frpc%20%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="下载-frp"><a href="#下载-frp" class="headerlink" title="下载 frp"></a>下载 frp</h1><p><a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a></p><blockquote><p><a href="https://gofrp.org/docs/">https://gofrp.org/docs/</a> &gt; <a href="https://sspai.com/post/64377">https://sspai.com/post/64377</a> &gt; <a href="https://sspai.com/post/52523">https://sspai.com/post/52523</a></p></blockquote><h1 id="Frps-配置-frps-ini"><a href="#Frps-配置-frps-ini" class="headerlink" title="Frps 配置 frps.ini"></a>Frps 配置 frps.ini</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">[common]<br>bind_port = 7000 ;本地绑定端口，frps占用<br>dashboard_port = 7500 ;监控面板端口，监控面板占用<br><br>dashboard_user = ? ;监控面板登录用户<br>dashboard_pwd = ? ;监控面板登录密码<br><br>vhost_http_port = 10080 ;http绑定主机端口<br>vhost_https_port = 10443 ;https绑定主机端口<br><br>token = ? ;客户端需要配置一样才可链接<br>subdomain_host = josway.cc ;分子域名时使用<br><br></code></pre></td></tr></table></figure><h1 id="Frpc-配置-frpc-ini"><a href="#Frpc-配置-frpc-ini" class="headerlink" title="Frpc 配置 frpc.ini"></a>Frpc 配置 frpc.ini</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">[common]<br>server_addr = josway.cc ;服务端ip或域名<br>server_port = 7000 ;服务端端口号<br>token = ? ;服务端配置的token<br><br>; [web]<br>; <span class="hljs-built_in">type</span> = http ;http协议默认80端口<br>; local_port = 8088 ;本地服务端口号<br>; subdomain = <span class="hljs-built_in">test</span> ;远程访问子域名，完整地址为 subdomain.subdomain_host Example:test.josway.cc<br><br>[tcp]<br>local_port = 8088 ;本地服务端口号<br>remote_port = 18088 ;远程访问端口号，完整地址为 server_addr:remote_port Example:josway.cc:18088<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>frp教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>frpc</tag>
      
      <tag>frps</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么不能在 SpringBoot 框架中直接使用@WebServlet注释</title>
    <link href="/2022/04/25/yuque/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%83%BD%E5%9C%A8%20SpringBoot%20%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8@WebServlet%E6%B3%A8%E9%87%8A/"/>
    <url>/2022/04/25/yuque/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%83%BD%E5%9C%A8%20SpringBoot%20%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8@WebServlet%E6%B3%A8%E9%87%8A/</url>
    
    <content type="html"><![CDATA[<p>1.没有在启动类上添加相关的注解 <code>@ServletComponentScan</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ServletComponentScan(basePackages = &quot;com.xxx.springboot.servlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XxxApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(ClientApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>问题汇总</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring boot</tag>
      
      <tag>annotation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue、Element-UI 入门</title>
    <link href="/2022/04/25/yuque/Vue%E3%80%81Element-UI%20%E5%85%A5%E9%97%A8/"/>
    <url>/2022/04/25/yuque/Vue%E3%80%81Element-UI%20%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><h3 id="直接使用-IDEA-新建-Vue-项目"><a href="#直接使用-IDEA-新建-Vue-项目" class="headerlink" title="直接使用 IDEA 新建 Vue 项目"></a>直接使用 IDEA 新建 Vue 项目</h3><h3 id="安装-Element-UI"><a href="#安装-Element-UI" class="headerlink" title="安装 Element-UI"></a>安装 Element-UI</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i element-ui -S<br></code></pre></td></tr></table></figure><h4 id="配置-Element-UI"><a href="#配置-Element-UI" class="headerlink" title="配置 Element-UI"></a>配置 Element-UI</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1650898323674-ef985716-9e12-4645-812f-534b2da11a19.png#clientId=u8c7e26c3-0fca-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u11240d1e&name=config-element-ui.png&originHeight=558&originWidth=898&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=50243&status=done&style=none&taskId=ud7f914ee-1cb9-4ffd-82a2-5d7f9a6d7f4&title=" alt="config-element-ui.png"></p><h3 id="安装-ESLint-可选"><a href="#安装-ESLint-可选" class="headerlink" title="安装 ESLint (可选)"></a>安装 ESLint (可选)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">eslint --init<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1650898332344-91f104e5-6537-4d4e-8929-94c6fc9eaeae.png#clientId=u8c7e26c3-0fca-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u185ec811&name=ESLint-init.png&originHeight=382&originWidth=1460&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=81456&status=done&style=none&taskId=ub82779de-694b-49f3-9147-35b2bc27193&title=" alt="ESLint-init.png"></p><h2 id="组件复用"><a href="#组件复用" class="headerlink" title="组件复用"></a>组件复用</h2><h3 id="新建组件-MyComponent"><a href="#新建组件-MyComponent" class="headerlink" title="新建组件 MyComponent"></a>新建组件 MyComponent</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1650898355062-bbe7ec65-a4ea-43cf-b58a-84a82de4878c.png#clientId=u8c7e26c3-0fca-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u6988a0f8&name=new-component.png&originHeight=816&originWidth=595&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=33409&status=done&style=none&taskId=ucbec82e1-e32f-49dd-a663-5427e6ad144&title=" alt="new-component.png"></p><h3 id="编写相关代码"><a href="#编写相关代码" class="headerlink" title="编写相关代码"></a>编写相关代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;el-container&gt;<br>    &lt;el-header&gt;&#123;&#123; header &#125;&#125;&lt;/el-header&gt;<br>    &lt;el-container&gt;<br>      &lt;el-aside width=&quot;200px&quot;&gt;&#123;&#123; aside &#125;&#125;&lt;/el-aside&gt;<br>      &lt;el-main&gt;&#123;&#123; main &#125;&#125;&lt;/el-main&gt;<br>    &lt;/el-container&gt;<br>    &lt;el-footer&gt;&#123;&#123; footer &#125;&#125;&lt;/el-footer&gt;<br>  &lt;/el-container&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;MyComponent&quot;,<br>  props: &#123;<br>    header: String,<br>    aside: String,<br>    main: String,<br>    footer: String,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.el-header,<br>.el-footer &#123;<br>  background-color: #b3c0d1;<br>  color: #333;<br>  text-align: center;<br>  line-height: 60px;<br>&#125;<br><br>.el-aside &#123;<br>  background-color: #d3dce6;<br>  color: #333;<br>  text-align: center;<br>  line-height: 200px;<br>&#125;<br><br>.el-main &#123;<br>  background-color: #e9eef3;<br>  color: #333;<br>  text-align: center;<br>  line-height: 160px;<br>&#125;<br><br>body &gt; .el-container &#123;<br>  margin-bottom: 40px;<br>&#125;<br><br>.el-container:nth-child(5) .el-aside,<br>.el-container:nth-child(6) .el-aside &#123;<br>  line-height: 260px;<br>&#125;<br><br>.el-container:nth-child(7) .el-aside &#123;<br>  line-height: 320px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h3 id="复用组件"><a href="#复用组件" class="headerlink" title="复用组件"></a>复用组件</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1650898371618-003b92cc-7dbc-4717-97d7-fea8fc737de7.png#clientId=u8c7e26c3-0fca-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u03ba49df&name=reuse-component.png&originHeight=910&originWidth=1364&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=91457&status=done&style=none&taskId=ua36a5332-2693-45ee-ab55-6315eb94bee&title=" alt="reuse-component.png"></p><h2 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1650898378682-525dbcf6-4625-4ddd-9f89-d4395dd1574f.png#clientId=u8c7e26c3-0fca-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u3003532e&name=global-component.png&originHeight=823&originWidth=1924&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=120895&status=done&style=none&taskId=ub54def20-cbd4-455a-81e9-df19bd17b00&title=" alt="global-component.png"></p>]]></content>
    
    
    <categories>
      
      <category>前端教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>element-ui</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UserAgentUtils</title>
    <link href="/2022/04/25/yuque/UserAgentUtils/"/>
    <url>/2022/04/25/yuque/UserAgentUtils/</url>
    
    <content type="html"><![CDATA[<p>UserAgentUtils 是解析 User-Agent 的 Java 类库，能够识别客户端的浏览器和操作系统信息</p><h2 id="方法一：UserAgentUtils"><a href="#方法一：UserAgentUtils" class="headerlink" title="方法一：UserAgentUtils"></a>方法一：UserAgentUtils</h2><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>GitHub <a href="https://github.com/HaraldWalker/user-agent-utils">https://github.com/HaraldWalker/user-agent-utils</a></p><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;dependency&gt;<br>   &lt;groupId&gt;eu.bitwalker&lt;/groupId&gt;<br>   &lt;artifactId&gt;UserAgentUtils&lt;/artifactId&gt;<br>   &lt;version&gt;1.21&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//通过 request 获取用户的 Agent:</span><br>String agent = request.get<span class="hljs-constructor">Header(<span class="hljs-string">&quot;User-Agent&quot;</span>)</span>;<br><span class="hljs-comment">//解析 agent 字符串</span><br>UserAgent userAgent = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserAgent</span>.</span></span>parse<span class="hljs-constructor">UserAgentString(<span class="hljs-params">agent</span>)</span>;<br><br><span class="hljs-comment">//获取浏览器对象</span><br>Browser browser = userAgent.get<span class="hljs-constructor">Browser()</span>;<br><span class="hljs-comment">//获取操作系统对象</span><br>OperatingSystem operatingSystem = userAgent.get<span class="hljs-constructor">OperatingSystem()</span>;<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;浏览器名称:&quot;</span>+browser.get<span class="hljs-constructor">Name()</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;浏览器类型:&quot;</span>+browser.get<span class="hljs-constructor">BrowserType()</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;浏览器家族:&quot;</span>+browser.get<span class="hljs-constructor">Group()</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;浏览器生产厂商:&quot;</span>+browser.get<span class="hljs-constructor">Manufacturer()</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;浏览器使用的渲染引擎:&quot;</span>+browser.get<span class="hljs-constructor">RenderingEngine()</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;浏览器版本:&quot;</span>+userAgent.get<span class="hljs-constructor">BrowserVersion()</span>);<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;操作系统名称:&quot;</span>+operatingSystem.get<span class="hljs-constructor">Name()</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;设备类型:&quot;</span>+operatingSystem.get<span class="hljs-constructor">DeviceType()</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;操作系统家族:&quot;</span>+operatingSystem.get<span class="hljs-constructor">Group()</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;操作系统生产厂商:&quot;</span>+operatingSystem.get<span class="hljs-constructor">Manufacturer()</span>);<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">//结果<br>浏览器名称:Chrome 8<br>浏览器类型:WEB_BROWSER<br>浏览器家族:CHROME<br>浏览器生产厂商:GOOGLE<br>浏览器使用的渲染引擎:WEBKIT<br>浏览器版本:83.0.4103.61<br>操作系统名称:Mac OS X<br>设备类型:COMPUTER<br>操作系统家族:MAC_OS_X<br>操作系统生产厂商:APPLE<br></code></pre></td></tr></table></figure><h2 id="方法二：Hutool-UserAgentUtils"><a href="#方法二：Hutool-UserAgentUtils" class="headerlink" title="方法二：Hutool - UserAgentUtils"></a>方法二：Hutool - UserAgentUtils</h2><h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><p><a href="https://hutool.cn/docs/#/http/UA%E5%B7%A5%E5%85%B7%E7%B1%BB-UserAgentUtil">https://hutool.cn/docs/#/http/UA%E5%B7%A5%E5%85%B7%E7%B1%BB-UserAgentUtil</a></p><h3 id="Maven-1"><a href="#Maven-1" class="headerlink" title="Maven"></a>Maven</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"> &lt;dependency&gt;<br>    &lt;groupId&gt;cn.hutool&lt;/groupId&gt;<br>    &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;<br>    &lt;version&gt;5.3.6&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//通过 request 获取用户的 Agent</span><br>String agent = request.get<span class="hljs-constructor">Header(<span class="hljs-string">&quot;User-Agent&quot;</span>)</span>;<br><br>UserAgent ua = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserAgentUtil</span>.</span></span>parse(agent);<br>ua.get<span class="hljs-constructor">Browser()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>;<span class="hljs-comment">//Chrome</span><br>ua.get<span class="hljs-constructor">Version()</span>;<span class="hljs-comment">//14.0.835.163</span><br>ua.get<span class="hljs-constructor">Engine()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>;<span class="hljs-comment">//Webkit</span><br>ua.get<span class="hljs-constructor">EngineVersion()</span>;<span class="hljs-comment">//535.1</span><br>ua.get<span class="hljs-constructor">Os()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>;<span class="hljs-comment">//Windows 7</span><br>ua.get<span class="hljs-constructor">Platform()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>;<span class="hljs-comment">//Windows</span><br><br><span class="hljs-comment">//判断终端是否为移动终端</span><br>ua.is<span class="hljs-constructor">Mobile()</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java工具教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>userAgentUtils</tag>
      
      <tag>hutool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>更新Hexo</title>
    <link href="/2022/04/25/yuque/%E6%9B%B4%E6%96%B0Hexo/"/>
    <url>/2022/04/25/yuque/%E6%9B%B4%E6%96%B0Hexo/</url>
    
    <content type="html"><![CDATA[<h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">//以下命令分别执行即可<br>npm install -g npm-check     //安装npm-check<br>npm-check                    //查看系统插件是否需要升级<br>npm install -g npm-upgrade   //安装npm-upgrade<br>npm-upgrade        //更新package.json<br>//在执行npm-upgrade命令后会要求输入yes或者no，直接输入Yes或Y即可<br>npm update -g      //更新全局插件<br>npm update --save  //更新系统插件<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>hexo教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo-update</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot @Scope注解 prototype不生效</title>
    <link href="/2022/04/25/yuque/Spring%20Boot%20@Scope%E6%B3%A8%E8%A7%A3%20prototype%E4%B8%8D%E7%94%9F%E6%95%88/"/>
    <url>/2022/04/25/yuque/Spring%20Boot%20@Scope%E6%B3%A8%E8%A7%A3%20prototype%E4%B8%8D%E7%94%9F%E6%95%88/</url>
    
    <content type="html"><![CDATA[<p><code>@Scope</code> 注解 用于管理 Bean 为单例还是原型（多例）模式</p><p>Spring 默认为单例模式，现在切换为多例模式后不生效。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="问题代码-一"><a href="#问题代码-一" class="headerlink" title="问题代码 一"></a>问题代码 一</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IscpDatabaseManageServiceImpl</span> <span class="hljs-keyword">implements</span><br>        <span class="hljs-title class_">IIscpDatabaseManageService</span>, IscpDatabaseManageApi &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>传递 <code>proxyMode</code> 参数为 <code>ScopedProxyMode.TARGET_CLASS</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE,</span><br><span class="hljs-meta">        proxyMode = ScopedProxyMode.TARGET_CLASS)</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IscpDatabaseManageServiceImpl</span> <span class="hljs-keyword">implements</span><br>        <span class="hljs-title class_">IIscpDatabaseManageService</span>, IscpDatabaseManageApi &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="问题代码-二"><a href="#问题代码-二" class="headerlink" title="问题代码 二"></a>问题代码 二</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE,</span><br><span class="hljs-meta">        proxyMode = ScopedProxyMode.TARGET_CLASS)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IIscpDatabaseManageService</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>接口&#x2F;服务类不是一个 Bean&#x2F;Component ，故不生效。需要注解到服务实现类上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IIscpDatabaseManageService</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE,</span><br><span class="hljs-meta">        proxyMode = ScopedProxyMode.TARGET_CLASS)</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IscpDatabaseManageServiceImpl</span> <span class="hljs-keyword">implements</span><br>        <span class="hljs-title class_">IIscpDatabaseManageService</span>, IscpDatabaseManageApi &#123;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>问题汇总</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring boot</tag>
      
      <tag>annotation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot 8. 从 Reactive 到 WebFlux</title>
    <link href="/2022/04/25/yuque/Spring%20Boot%208.%20%E4%BB%8E%20Reactive%20%E5%88%B0%20WebFlux/"/>
    <url>/2022/04/25/yuque/Spring%20Boot%208.%20%E4%BB%8E%20Reactive%20%E5%88%B0%20WebFlux/</url>
    
    <content type="html"><![CDATA[<p>从 Reactive 到 WebFlux<br>PDF 版本:<a href="https://www.yuque.com/attachments/yuque/0/2022/pdf/28199557/1650898592026-9dda9930-771b-447a-89b7-4dea5a786ba7.pdf?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2022/pdf/28199557/1650898592026-9dda9930-771b-447a-89b7-4dea5a786ba7.pdf%22,%22name%22:%22%E7%AC%AC%E5%85%AB%E8%8A%82+%E4%BB%8E+Reactive+%E5%88%B0+WebFlux.pdf%22,%22size%22:697903,%22type%22:%22application/pdf%22,%22ext%22:%22pdf%22,%22status%22:%22done%22,%22taskId%22:%22u99fe3710-fbad-4891-bef5-65d7f1ba76f%22,%22taskType%22:%22upload%22,%22id%22:%22u36f2c701%22,%22card%22:%22file%22%7D">第八节 从 Reactive 到 WebFlux.pdf</a></p>]]></content>
    
    
    <categories>
      
      <category>深入理解SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot 7. 渐行渐远的 Servlet</title>
    <link href="/2022/04/25/yuque/Spring%20Boot%207.%20%E6%B8%90%E8%A1%8C%E6%B8%90%E8%BF%9C%E7%9A%84%20Servlet/"/>
    <url>/2022/04/25/yuque/Spring%20Boot%207.%20%E6%B8%90%E8%A1%8C%E6%B8%90%E8%BF%9C%E7%9A%84%20Servlet/</url>
    
    <content type="html"><![CDATA[<p>渐行渐远的 Servlet<br>PDF 版本:<a href="https://www.yuque.com/attachments/yuque/0/2022/pdf/28199557/1650898622524-58cfd94e-c7f1-43d4-945b-3003d6f74683.pdf?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2022/pdf/28199557/1650898622524-58cfd94e-c7f1-43d4-945b-3003d6f74683.pdf%22,%22name%22:%22%E7%AC%AC%E4%B8%83%E8%8A%82+%E6%B8%90%E8%A1%8C%E6%B8%90%E8%BF%9C%E7%9A%84+Servlet.pdf%22,%22size%22:408650,%22type%22:%22application/pdf%22,%22ext%22:%22pdf%22,%22status%22:%22done%22,%22taskId%22:%22ua5f7414e-1ad5-4e93-879e-8bad364cfb5%22,%22taskType%22:%22upload%22,%22id%22:%22u97b319d1%22,%22card%22:%22file%22%7D">第七节 渐行渐远的 Servlet.pdf</a></p>]]></content>
    
    
    <categories>
      
      <category>深入理解SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot 6. Web MVC REST 应用</title>
    <link href="/2022/04/25/yuque/Spring%20Boot%206.%20Web%20MVC%20REST%20%E5%BA%94%E7%94%A8/"/>
    <url>/2022/04/25/yuque/Spring%20Boot%206.%20Web%20MVC%20REST%20%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>Web MVC REST 应用<br>PDF 版本:<a href="https://www.yuque.com/attachments/yuque/0/2022/pdf/28199557/1650898646792-bae5b6c7-3e99-4474-b9db-37395bf8b07f.pdf?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2022/pdf/28199557/1650898646792-bae5b6c7-3e99-4474-b9db-37395bf8b07f.pdf%22,%22name%22:%22%E7%AC%AC%E5%85%AD%E8%8A%82+Web+MVC+REST+%E5%BA%94%E7%94%A8.pdf%22,%22size%22:479384,%22type%22:%22application/pdf%22,%22ext%22:%22pdf%22,%22status%22:%22done%22,%22taskId%22:%22u652f63a7-28ba-457c-8393-99d24265d9b%22,%22taskType%22:%22upload%22,%22id%22:%22uf66a1753%22,%22card%22:%22file%22%7D">第六节 Web MVC REST 应用.pdf</a></p>]]></content>
    
    
    <categories>
      
      <category>深入理解SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot 5. Web MVC 视图应用</title>
    <link href="/2022/04/25/yuque/Spring%20Boot%205.%20Web%20MVC%20%E8%A7%86%E5%9B%BE%E5%BA%94%E7%94%A8/"/>
    <url>/2022/04/25/yuque/Spring%20Boot%205.%20Web%20MVC%20%E8%A7%86%E5%9B%BE%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>Web MVC 视图应用<br>PDF 版本:<a href="https://www.yuque.com/attachments/yuque/0/2022/pdf/28199557/1650898690628-bdad27c2-b102-4a75-890c-007ab16963d8.pdf?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2022/pdf/28199557/1650898690628-bdad27c2-b102-4a75-890c-007ab16963d8.pdf%22,%22name%22:%22%E7%AC%AC%E4%BA%94%E8%8A%82+Web+MVC+%E8%A7%86%E5%9B%BE%E5%BA%94%E7%94%A8.pdf%22,%22size%22:455912,%22type%22:%22application/pdf%22,%22ext%22:%22pdf%22,%22status%22:%22done%22,%22taskId%22:%22u13a4e613-92b1-485c-becd-cd9969efc17%22,%22taskType%22:%22upload%22,%22id%22:%22u9adcb09f%22,%22card%22:%22file%22%7D">第五节 Web MVC 视图应用.pdf</a></p>]]></content>
    
    
    <categories>
      
      <category>深入理解SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot 4. Web MVC 核心</title>
    <link href="/2022/04/25/yuque/Spring%20Boot%204.%20Web%20MVC%20%E6%A0%B8%E5%BF%83/"/>
    <url>/2022/04/25/yuque/Spring%20Boot%204.%20Web%20MVC%20%E6%A0%B8%E5%BF%83/</url>
    
    <content type="html"><![CDATA[<p>Web MVC 核心<br>PDF 版本:<a href="https://www.yuque.com/attachments/yuque/0/2022/pdf/28199557/1650898710654-10782202-746d-4bef-ba3c-ba3d69baff76.pdf?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2022/pdf/28199557/1650898710654-10782202-746d-4bef-ba3c-ba3d69baff76.pdf%22,%22name%22:%22%E7%AC%AC%E5%9B%9B%E8%8A%82+Web+MVC+%E6%A0%B8%E5%BF%83.pdf%22,%22size%22:602978,%22type%22:%22application/pdf%22,%22ext%22:%22pdf%22,%22status%22:%22done%22,%22taskId%22:%22u00313647-860a-40c0-85eb-f488a3d3271%22,%22taskType%22:%22upload%22,%22id%22:%22uc6773845%22,%22card%22:%22file%22%7D">第四节 Web MVC 核心.pdf</a></p>]]></content>
    
    
    <categories>
      
      <category>深入理解SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot 3. 理解 SpringApplication</title>
    <link href="/2022/04/25/yuque/Spring%20Boot%203.%20%E7%90%86%E8%A7%A3%20SpringApplication/"/>
    <url>/2022/04/25/yuque/Spring%20Boot%203.%20%E7%90%86%E8%A7%A3%20SpringApplication/</url>
    
    <content type="html"><![CDATA[<p>理解 SpringApplication<br>PDF 版本:<a href="https://www.yuque.com/attachments/yuque/0/2022/pdf/28199557/1650898730766-3591ea75-dc65-47e8-aade-78fb84438735.pdf?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2022/pdf/28199557/1650898730766-3591ea75-dc65-47e8-aade-78fb84438735.pdf%22,%22name%22:%22%E7%AC%AC%E4%B8%89%E8%8A%82+%E7%90%86%E8%A7%A3+SpringApplication.pdf%22,%22size%22:323090,%22type%22:%22application/pdf%22,%22ext%22:%22pdf%22,%22status%22:%22done%22,%22taskId%22:%22u9589ead7-a380-4900-bbb7-1927af64d41%22,%22taskType%22:%22upload%22,%22id%22:%22u31c7730c%22,%22card%22:%22file%22%7D">第三节 理解 SpringApplication.pdf</a></p><h2 id="SpringApplication"><a href="#SpringApplication" class="headerlink" title="SpringApplication"></a><code>SpringApplication</code></h2><ul><li>定义 : Spring 应用引导类 , 提供便利的自定义行为方法</li><li>场景 : 嵌入式 Web 应用和非 Web 应用</li><li>运行 : <code>SpringApplication#run(String...)</code></li></ul><h2 id="SpringApplication-基本使用"><a href="#SpringApplication-基本使用" class="headerlink" title="SpringApplication 基本使用"></a><code>SpringApplication</code> 基本使用</h2><h3 id="SpringApplication-运行"><a href="#SpringApplication-运行" class="headerlink" title="SpringApplication 运行"></a><code>SpringApplication</code> 运行</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">SpringApplication.run(SpringBootApplication.class,args)<br></code></pre></td></tr></table></figure><h3 id="自定义-SpringApplication"><a href="#自定义-SpringApplication" class="headerlink" title="自定义 SpringApplication"></a>自定义 <code>SpringApplication</code></h3><h4 id="通过-SpringApplication-API-调整"><a href="#通过-SpringApplication-API-调整" class="headerlink" title="通过 SpringApplication API 调整"></a>通过 <code>SpringApplication</code> API 调整</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SpringApplication</span> <span class="hljs-variable">springApplication</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringApplication</span>(SpringApplicationApplication.class);<br>springApplication.setBannerMode(Banner.Mode.CONSOLE);<br>springApplication.setWebApplicationType(WebApplicationType.NONE);<br>springApplication.setAdditionalProfiles(<span class="hljs-string">&quot;prod&quot;</span>);<br>springApplication.setHeadless(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><h4 id="通过-SpringApplicationBuilder-API-调整"><a href="#通过-SpringApplicationBuilder-API-调整" class="headerlink" title="通过 SpringApplicationBuilder API 调整"></a>通过 <code>SpringApplicationBuilder</code> API 调整</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringApplicationBuilder</span>(SpringApplicationApplication.class)<br>        .bannerMode(Banner.Mode.CONSOLE)<br>        .web(WebApplicationType.NONE)<br>        .profiles(<span class="hljs-string">&quot;prod&quot;</span>)<br>        .headless(<span class="hljs-literal">true</span>)<br>        .run(args);<br></code></pre></td></tr></table></figure><h2 id="SpringApplication-准备阶段"><a href="#SpringApplication-准备阶段" class="headerlink" title="SpringApplication 准备阶段"></a><code>SpringApplication</code> 准备阶段</h2><h3 id="配置-Spring-Boot-Bean-来源"><a href="#配置-Spring-Boot-Bean-来源" class="headerlink" title="配置 Spring Boot Bean 来源"></a>配置 Spring Boot Bean 来源</h3><p>Java 配置 Class 或 XML 上下文配置文件集合 , 用于 Spring Boot <code>BeanDefinitionLoader</code> 读取 , 并且将配置源解析加载为 Spring Bean 定义</p><ul><li>数量 : 一个或多个以上</li></ul><h4 id="Java-配置-Class"><a href="#Java-配置-Class" class="headerlink" title="Java 配置 Class"></a>Java 配置 Class</h4><p>用于 Spring 注解驱动中 Java 配置类 , 大多数情况是 Spring 模式注解所标志的类 , 如 <code>@Configuration</code></p><h4 id="XML-上下文配置文件"><a href="#XML-上下文配置文件" class="headerlink" title="XML 上下文配置文件"></a>XML 上下文配置文件</h4><p>用于 Spring 传统配置驱动中的 XML 文件</p><h3 id="推断-Web-应用类型"><a href="#推断-Web-应用类型" class="headerlink" title="推断 Web 应用类型"></a>推断 Web 应用类型</h3><p>根据当前应用 ClassPath 中是否存在相关实现类来推断 Web 应用的类型 , 包括 :</p><ul><li>Web Reactive： <code>WebApplicationType.REACTIVE</code></li><li>Web Servlet：<code>WebApplicationType.SERVLET</code></li><li>非 Web： <code>WebApplicationType.NONE</code></li></ul><blockquote><p>参考方法： <code>org.springframework.boot.SpringApplication#deduceFromClasspath</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> WebApplicationType <span class="hljs-title function_">deduceFromClasspath</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (ClassUtils.isPresent(WEBFLUX_INDICATOR_CLASS, <span class="hljs-literal">null</span>) &amp;&amp; !ClassUtils.isPresent(WEBMVC_INDICATOR_CLASS, <span class="hljs-literal">null</span>)<br>&amp;&amp; !ClassUtils.isPresent(JERSEY_INDICATOR_CLASS, <span class="hljs-literal">null</span>)) &#123;<br><span class="hljs-keyword">return</span> WebApplicationType.REACTIVE;<br>&#125;<br><span class="hljs-keyword">for</span> (String className : SERVLET_INDICATOR_CLASSES) &#123;<br><span class="hljs-keyword">if</span> (!ClassUtils.isPresent(className, <span class="hljs-literal">null</span>)) &#123;<br><span class="hljs-keyword">return</span> WebApplicationType.NONE;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> WebApplicationType.SERVLET;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="推断-引导类-Main-Class"><a href="#推断-引导类-Main-Class" class="headerlink" title="推断 引导类 (Main Class)"></a>推断 引导类 (Main Class)</h3><p>根据 Main 线程执行堆栈判断实际的引导类</p><blockquote><p>参考方法： <code>org.springframework.boot.SpringApplication#deduceMainApplicationClass</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Class&lt;?&gt; deduceMainApplicationClass() &#123;<br><span class="hljs-keyword">try</span> &#123;<br>StackTraceElement[] stackTrace = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>().getStackTrace();<br><span class="hljs-keyword">for</span> (StackTraceElement stackTraceElement : stackTrace) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;main&quot;</span>.equals(stackTraceElement.getMethodName())) &#123;<br><span class="hljs-keyword">return</span> Class.forName(stackTraceElement.getClassName());<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">catch</span> (ClassNotFoundException ex) &#123;<br><span class="hljs-comment">// Swallow and continue</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="加载-应用上下文初始化器-ApplicationContextInitializer"><a href="#加载-应用上下文初始化器-ApplicationContextInitializer" class="headerlink" title="加载 应用上下文初始化器 (ApplicationContextInitializer)"></a>加载 应用上下文初始化器 (<code>ApplicationContextInitializer</code>)</h3><p>利用 Spring 工厂加载机制，实例化 <code>ApplicationContextInitializer</code> 实现类，并排序对象集合。</p><blockquote><ul><li>实现</li></ul></blockquote><blockquote><ul><li>技术</li><li>实现类：<code>org.springframework.core.io.support.SpringFactoriesLoader</code></li><li>配置资源： <code>META-INF/spring.factories</code></li><li>排序： <code>AnnotationAwareOrderComparator#sort</code></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> &lt;T&gt; Collection&lt;T&gt; <span class="hljs-title function_">getSpringFactoriesInstances</span><span class="hljs-params">(Class&lt;T&gt; type, Class&lt;?&gt;[] parameterTypes, Object... args)</span> &#123;<br><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> getClassLoader();<br><span class="hljs-comment">// Use names and ensure unique to protect against duplicates</span><br>Set&lt;String&gt; names = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;(SpringFactoriesLoader.loadFactoryNames(type, classLoader));<br>List&lt;T&gt; instances = createSpringFactoriesInstances(type, parameterTypes, classLoader, args, names);<br>AnnotationAwareOrderComparator.sort(instances);<br><span class="hljs-keyword">return</span> instances;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="加载应用事件监听器-ApplicationListener"><a href="#加载应用事件监听器-ApplicationListener" class="headerlink" title="加载应用事件监听器 (ApplicationListener)"></a>加载应用事件监听器 (<code>ApplicationListener</code>)</h3><p>利用 Spring 工厂加载机制，实例化 <code>ApplicationListener</code> 实现类，并排序对象集合</p><h2 id="SpringApplication-1"><a href="#SpringApplication-1" class="headerlink" title="SpringApplication"></a>SpringApplication</h2><h3 id="加载-SpringApplication-运行监听器（-SpringApplicationRunListeners-）"><a href="#加载-SpringApplication-运行监听器（-SpringApplicationRunListeners-）" class="headerlink" title="加载 SpringApplication 运行监听器（ SpringApplicationRunListeners ）"></a>加载 <code>SpringApplication</code> 运行监听器（ <code>SpringApplicationRunListeners</code> ）</h3><p>利用 Spring 工厂加载机制，读取 <code>SpringApplicationRunListener</code> 对象集合，并且封装到组合类 <code>SpringApplicationRunListeners</code></p><h3 id="运行-SpringApplication-运行监听器（-SpringApplicationRunListeners-）"><a href="#运行-SpringApplication-运行监听器（-SpringApplicationRunListeners-）" class="headerlink" title="运行 SpringApplication 运行监听器（ SpringApplicationRunListeners ）"></a>运行 <code>SpringApplication</code> 运行监听器（ <code>SpringApplicationRunListeners</code> ）</h3><p><code>SpringApplicationRunListener</code> 监听多个运行状态方法：</p><table><thead><tr><th>监听方法</th><th>阶段说明</th><th>Spring Boot 起始版本</th></tr></thead><tbody><tr><td><code>starting()</code></td><td>Spring 应用刚启动</td><td>1.0</td></tr><tr><td><code>environmentPrepared(ConfigurableEnvironment)</code></td><td><code>ConfigurableEnvironment</code></td><td></td></tr><tr><td>准备妥当，允许将其调整</td><td>1.0</td><td></td></tr><tr><td><code>contextPrepared(ConfigurableApplicationContext)</code></td><td><code>ConfigurableApplicationContext</code></td><td></td></tr><tr><td>准备妥当，允许将其调整</td><td>1.0</td><td></td></tr><tr><td><code>contextLoaded(ConfigurableApplicationContext)</code></td><td><code>ConfigurableApplicationContext</code></td><td></td></tr><tr><td>已装载，但仍未启动</td><td>1.0</td><td></td></tr><tr><td><code>started(ConfigurableApplicationContext)</code></td><td>ConfigurableApplicationContext 已启动，此时 Spring Bean 已初始化完成</td><td>2.0</td></tr><tr><td><code>running(ConfigurableApplicationContext)</code></td><td>Spring 应用正在运行</td><td>2.0</td></tr><tr><td><code>failed(ConfigurableApplicationContext,Throwable)</code></td><td>Spring 应用运行失败</td><td>2.0</td></tr></tbody></table><h3 id="监听-Spring-Boot-事件-x2F-Spring-事件"><a href="#监听-Spring-Boot-事件-x2F-Spring-事件" class="headerlink" title="监听 Spring Boot 事件 &#x2F; Spring 事件"></a>监听 Spring Boot 事件 &#x2F; Spring 事件</h3><p>Spring Boot 通过 <code>SpringApplicationRunListener</code> 的实现类 <code>EventPublishingRunListener</code> 利用 Spring Framework 事件 API ，广播 Spring Boot 事件。</p><h4 id="Spring-Framework-事件-x2F-监听器编程模型"><a href="#Spring-Framework-事件-x2F-监听器编程模型" class="headerlink" title="Spring Framework 事件&#x2F;监听器编程模型"></a>Spring Framework 事件&#x2F;监听器编程模型</h4><ul><li>Spring 应用事件<ul><li>普通应用事件： <code>ApplicationEvent</code></li><li>应用上下文事件： <code>ApplicationContextEvent</code></li></ul></li><li>Spring 应用监听器<ul><li>接口编程模型： <code>ApplicationListener</code></li><li>注解编程模型： <code>@EventListener</code></li></ul></li><li>Spring 应用事广播器<ul><li>接口：<code>ApplicationEventMulticaster</code></li><li>实现类： <code>SimpleApplicationEventMulticaster</code><ul><li>执行模式：同步或异步</li></ul></li></ul></li></ul><h4 id="EventPublishingRunListener-监听方法与-Spring-Boot-事件对应关系"><a href="#EventPublishingRunListener-监听方法与-Spring-Boot-事件对应关系" class="headerlink" title="EventPublishingRunListener 监听方法与 Spring Boot 事件对应关系"></a><code>EventPublishingRunListener</code> 监听方法与 Spring Boot 事件对应关系</h4><table><thead><tr><th>监听方法</th><th>Spring Boot 事件</th><th>Spring Boot 起始版本</th></tr></thead><tbody><tr><td><code>starting()</code></td><td><code>ApplicationStartingEvent</code></td><td>1.5</td></tr><tr><td><code>environmentPrepared(ConfigurableEnvironment)</code></td><td><code>ApplicationEnvironmentPreparedEvent</code></td><td>1.0</td></tr><tr><td><code>contextPrepared(ConfigurableApplicationContext)</code></td><td></td><td></td></tr><tr><td><code>contextLoaded(ConfigurableApplicationContext)</code></td><td><code>ApplicationPreparedEvent</code></td><td>1.0</td></tr><tr><td><code>started(ConfigurableApplicationContext)</code></td><td><code>ApplicationStartedEvent</code></td><td>2.0</td></tr><tr><td><code>running(ConfigurableApplicationContext)</code></td><td><code>ApplicationReadyEvent</code></td><td>2.0</td></tr><tr><td><code>failed(ConfigurableApplicationContext,Throwable)</code></td><td><code>ApplicationFailedEvent</code></td><td>1.0</td></tr></tbody></table><h3 id="创建-Spring-应用上下文（-ConfigurableApplicationContext-）"><a href="#创建-Spring-应用上下文（-ConfigurableApplicationContext-）" class="headerlink" title="创建 Spring 应用上下文（ ConfigurableApplicationContext ）"></a>创建 Spring 应用上下文（ <code>ConfigurableApplicationContext</code> ）</h3><p>根据准备阶段的推断 Web 应用类型创建对应的 <code>ConfigurableApplicationContext</code> 实例：</p><ul><li>Web Reactive： <code>AnnotationConfigReactiveWebServerApplicationContext</code></li><li>Web Servlet： <code>AnnotationConfigServletWebServerApplicationContext</code></li><li>非 Web： <code>AnnotationConfigApplicationContext</code></li></ul><h3 id="创建-Environment"><a href="#创建-Environment" class="headerlink" title="创建 Environment"></a>创建 <code>Environment</code></h3><p>根据准备阶段的推断 Web 应用类型创建对应的 <code>ConfigurableEnvironment</code> 实例：</p><ul><li>Web Reactive： <code>StandardEnvironment</code></li><li>Web Servlet： <code>StandardServletEnvironment</code></li><li>非 Web： <code>StandardEnvironment</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>深入理解SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot 2 单元测试多线程问题</title>
    <link href="/2022/04/25/yuque/Spring%20Boot%202%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%97%AE%E9%A2%98/"/>
    <url>/2022/04/25/yuque/Spring%20Boot%202%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p><code>junit</code> 单元测试不支持多线程</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>部分 Junit4 TestRunner 源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> SUCCESS_EXIT=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> FAILURE_EXIT=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> EXCEPTION_EXIT=<span class="hljs-number">2</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>    TestRunner aTestRunner=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TestRunner</span>();<br>    <span class="hljs-keyword">try</span>&#123;<br>        TestResult r=aTestRunner.start(args);<br>        <span class="hljs-keyword">if</span>(!r.wasSuccessful())<br>        System.exit(FAILURE_EXIT);<br>        System.exit(SUCCESS_EXIT);<br>    &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>        System.err.println(e.getMessage());<br>        System.exit(EXCEPTION_EXIT);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>TestResult 部分源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> List&lt;TestFailure&gt; fFailures = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br><span class="hljs-keyword">protected</span> List&lt;TestFailure&gt; fErrors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">wasSuccessful</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.failureCount() == <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">this</span>.errorCount() == <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">int</span> <span class="hljs-title function_">errorCount</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.fErrors.size();<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">int</span> <span class="hljs-title function_">failureCount</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.fFailures.size();<br>&#125;<br></code></pre></td></tr></table></figure><p>在 TestRunner 中可以看出，<br>如果是单线程，当测试主线程执行结束后，不管子线程是否结束，都会回调 TestResult 的 wasSuccessful 方法，然后判断结果是成功还是失败，最后调用相应的 System.exit()方法。<br>大家都知道这个方法是用来结束当前正在运行中的 java 虚拟机，jvm 都自身难保了，所以子线程也就对不住你咧…</p><h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><p>1.简单粗暴地让主线程休眠一段时间，然后让子线程能够运行结束。<br>但是这个方法的弊端是，你不知道子线程的运行时间，所以需要看脸-.-</p><p><code>Thread.sleep();</code></p><p>2.使用 CountDownLatch 工具类，让主线程阻塞，直到子线程运行结束或者阻塞超时，这个方法要比第一个方法好点。</p><p><code>CountDownLatch countDownLatch = new CountDownLatch(1);</code><br><code>countDownLatch.await(5, TimeUnit.MINUTES);</code></p><p>至于还有其他方法，笔者看到很多大神自己写的 Junit 支持多线程，有兴趣的读者自行度娘…</p><p>作者：Mr.Yanphet<br>链接：<a href="https://www.cnblogs.com/yanphet/p/5774291.html">https://www.cnblogs.com/yanphet/p/5774291.html</a><br>来源：cnblogs<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
    <categories>
      
      <category>问题汇总</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring boot</tag>
      
      <tag>junit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot 2 单元测试教程</title>
    <link href="/2022/04/25/yuque/Spring%20Boot%202%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%95%99%E7%A8%8B/"/>
    <url>/2022/04/25/yuque/Spring%20Boot%202%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>Spring Boot 2 单元测试示例<br>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="一、测试-Web-服务"><a href="#一、测试-Web-服务" class="headerlink" title="一、测试 Web 服务"></a>一、测试 Web 服务</h2><p>1、新建控制器类 <code>HelloController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、新建测试类 <code>HelloControllerTest.java</code></p><p>下面 WebEnvironment.RANDOM_PORT 会启动一个真实的 Web 容器，RANDOM_PORT 表示随机端口，如果想使用固定端口，可配置为<br>WebEnvironment.DEFINED_PORT，该属性会读取项目配置文件（如 application.properties）中的端口（server.port）。<br>如果没有配置，默认使用 8080 端口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.controller;<br><br><span class="hljs-keyword">import</span> org.junit.Assert;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.web.client.TestRestTemplate;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloControllerTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TestRestTemplate restTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testIndex</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> restTemplate.getForObject(<span class="hljs-string">&quot;/&quot;</span>,String.class);<br>        Assert.assertEquals(<span class="hljs-string">&quot;index&quot;</span>, result);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHello</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> restTemplate.getForObject(<span class="hljs-string">&quot;/&quot;</span>,String.class);<br>        Assert.assertEquals(<span class="hljs-string">&quot;Hello world&quot;</span>, result);<span class="hljs-comment">//这里故意写错</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 HelloControllerTest.java 代码中右键空白行可选择 Run ‘HelloControllerTest’，测试类里面所有方法。<br>（如果只想测试一个方法如 testIndex()，可在 testIndex()代码上右键选择 Run ‘testIndex()’）<br>运行结果如下，一个通过，一个失败。</p><p><img src="https://img2018.cnblogs.com/blog/201408/201909/201408-20190919231702307-124332010.png#crop=0&crop=0&crop=1&crop=1&id=l04W9&originHeight=275&originWidth=773&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="二、模拟-Web-测试"><a href="#二、模拟-Web-测试" class="headerlink" title="二、模拟 Web 测试"></a>二、模拟 Web 测试</h2><p>新建测试类 <code>HelloControllerMockTest.java</code></p><p>设置 WebEnvironment 属性为 WebEnvironment.MOCK，启动一个模拟的 Web 容器。<br>测试方法中使用 Spring 的 MockMvc 进行模拟测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.controller;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><span class="hljs-keyword">import</span> org.springframework.test.web.servlet.MockMvc;<br><span class="hljs-keyword">import</span> org.springframework.test.web.servlet.MvcResult;<br><span class="hljs-keyword">import</span> org.springframework.test.web.servlet.ResultActions;<br><span class="hljs-keyword">import</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders;<br><br><span class="hljs-keyword">import</span> java.net.URI;<br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK)</span><span class="hljs-comment">//MOCK为默认值，也可不设置</span><br><span class="hljs-meta">@AutoConfigureMockMvc</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloControllerMockTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MockMvc mvc;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">testIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ResultActions</span> <span class="hljs-variable">ra</span> <span class="hljs-operator">=</span> mvc.perform(MockMvcRequestBuilders.get(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URI</span>(<span class="hljs-string">&quot;/&quot;</span>)));<br>        <span class="hljs-type">MvcResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> ra.andReturn();<br>        System.out.println(result.getResponse().getContentAsString());<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHello</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ResultActions</span> <span class="hljs-variable">ra</span> <span class="hljs-operator">=</span> mvc.perform(MockMvcRequestBuilders.get(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URI</span>(<span class="hljs-string">&quot;/hello&quot;</span>)));<br>        <span class="hljs-type">MvcResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> ra.andReturn();<br>        System.out.println(result.getResponse().getContentAsString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>右键 Run ‘HelloControllerMockTest’，运行结果如下：</p><p><img src="https://img2018.cnblogs.com/blog/201408/201909/201408-20190919231749216-740758510.png#crop=0&crop=0&crop=1&crop=1&id=BEeLQ&originHeight=302&originWidth=552&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="三、测试业务组件"><a href="#三、测试业务组件" class="headerlink" title="三、测试业务组件"></a>三、测试业务组件</h2><p>1、新建服务类 <code>HelloService.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.service;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloService</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、新建测试类 <code>HelloServiceTest.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.service;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServiceTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> HelloService helloService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHello</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> helloService.hello();<br>        System.out.println(result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>右键 Run ‘HelloServiceTest’，运行结果如下：</p><p><img src="https://img2018.cnblogs.com/blog/201408/201909/201408-20190919231815927-455109392.png#crop=0&crop=0&crop=1&crop=1&id=f65LG&originHeight=299&originWidth=551&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="四、模拟业务组件"><a href="#四、模拟业务组件" class="headerlink" title="四、模拟业务组件"></a>四、模拟业务组件</h2><p>假设上面的<code>HelloService.java</code>是操作数据库或调用第三方接口，为了不让这些外部不稳定因素影响单元测试的运行结果，可使用 mock 来模拟某些组件的返回结果。</p><p>1、新建一个服务类 <code>MainService.java</code></p><p>里面的 main 方法会调用 HelloService 的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.service;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> HelloService helloService;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;调用业务方法&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> helloService.hello();<br>        System.out.println(<span class="hljs-string">&quot;返回结果：&quot;</span> + result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、新建测试类 <code>MainServiceMockTest.java</code></p><p>下面代码中，使用 MockBean 修饰需要模拟的组件 helloService，测试方法中使用 Mockito 的 API 模拟 helloService 的 hello 方法返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.service;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.mockito.BDDMockito;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.mock.mockito.MockBean;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainServiceMockTest</span> &#123;<br>    <span class="hljs-meta">@MockBean</span><br>    <span class="hljs-keyword">private</span> HelloService helloService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MainService mainService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMain</span><span class="hljs-params">()</span>&#123;<br>        BDDMockito.given(<span class="hljs-built_in">this</span>.helloService.hello()).willReturn(<span class="hljs-string">&quot;hello world&quot;</span>);<br>        mainService.main();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>右键 Run ‘MainServiceMockTest’，运行结果如下：</p><p><img src="https://img2018.cnblogs.com/blog/201408/201909/201408-20190919231835300-1576379959.png#crop=0&crop=0&crop=1&crop=1&id=AuzCr&originHeight=296&originWidth=536&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="五、IDEA-项目结构图"><a href="#五、IDEA-项目结构图" class="headerlink" title="五、IDEA 项目结构图"></a>五、IDEA 项目结构图</h2><p><img src="https://img2018.cnblogs.com/blog/201408/201909/201408-20190919232126907-1976103525.png#crop=0&crop=0&crop=1&crop=1&id=BTtTT&originHeight=545&originWidth=355&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>作者：gdjlc<br>链接：<a href="https://www.cnblogs.com/gdjlc/p/11553274.html">https://www.cnblogs.com/gdjlc/p/11553274.html</a><br>来源：cnblogs<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
    <categories>
      
      <category>中间件整合教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring boot</tag>
      
      <tag>junit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot 2. 走向自动装配</title>
    <link href="/2022/04/25/yuque/Spring%20Boot%202.%20%E8%B5%B0%E5%90%91%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
    <url>/2022/04/25/yuque/Spring%20Boot%202.%20%E8%B5%B0%E5%90%91%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/</url>
    
    <content type="html"><![CDATA[<p>走向自动装配<br>PDF 版本:<a href="https://www.yuque.com/attachments/yuque/0/2022/pdf/28199557/1650898816747-231323e7-f021-422f-afa1-a8c6f562ea01.pdf?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2022/pdf/28199557/1650898816747-231323e7-f021-422f-afa1-a8c6f562ea01.pdf%22,%22name%22:%22%E7%AC%AC%E4%BA%8C%E8%8A%82+%E8%B5%B0%E5%90%91%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D.pdf%22,%22size%22:351604,%22type%22:%22application/pdf%22,%22ext%22:%22pdf%22,%22status%22:%22done%22,%22taskId%22:%22u828fc425-412e-4067-a24e-aaecc98b8b4%22,%22taskType%22:%22upload%22,%22id%22:%22u074a53cd%22,%22card%22:%22file%22%7D">第二节 走向自动装配.pdf</a></p><h2 id="Spring-Framework-手动装配"><a href="#Spring-Framework-手动装配" class="headerlink" title="Spring Framework 手动装配"></a>Spring Framework 手动装配</h2><h3 id="Spring-模式注解装配"><a href="#Spring-模式注解装配" class="headerlink" title="Spring 模式注解装配"></a>Spring 模式注解装配</h3><p>定义: 一种用于声明在应用中扮演”组件”角色的注解</p><p>举例: <a href="/Component">@Component </a> , <a href="/Service">@Service </a> , <a href="/Configuration">@Configuration </a> 等</p><p>装配: <a href="context:component-scan">context:component-scan</a> 或 <a href="/ComponentScan">@ComponentScan </a></p><h3 id="模式注解-Stereotype-Annotations"><a href="#模式注解-Stereotype-Annotations" class="headerlink" title="模式注解(Stereotype Annotations)"></a><a href="https://github.com/spring-projects/spring-framework/wiki/spring-annotation-programming-model">模式注解(Stereotype Annotations)</a></h3><blockquote><p>A <strong><em>stereotype annotation</em></strong> is an annotation that is used to declare the role that a component plays within the application. For example, the <code>@Repository</code> annotation in the Spring Framework is a marker for any class that fulfills the role or <em>stereotype</em> of a repository (also known as Data Access Object or DAO).</p><p><code>@Component</code> is a generic stereotype for any Spring-managed component. Any component annotated with <code>@Component</code> is a candidate for component scanning. Similarly, any component annotated with an annotation that is itself meta-annotated with <code>@Component</code> is also a candidate for component scanning. For example, <code>@Service</code> is meta-annotated with <code>@Component</code>.</p><p>Core Spring provides several stereotype annotations out of the box, including but not limited to: <code>@Component</code>, <code>@Service</code>, <code>@Repository</code>, <code>@Controller</code>, <code>@RestController</code>, and <code>@Configuration</code>. <code>@Repository</code>, <code>@Service</code>, etc. are specializations of <code>@Component</code>.</p></blockquote><p>原型注释是用来声明组件在应用程序中扮演的角色的注释。例如，Spring 框架中的 <code>@Repository</code> 注释是满足存储库角色或构造型的任何类的标记(也称为数据访问对象或 DAO)。</p><p><code>@Component</code> 是任何 spring 管理组件的通用原型。任何用 <code>@Component</code> 注解的组件都是组件扫描的候选组件。类似地，任何用注释注释的组件(其本身是用<code>@Component</code> 元注释的)也是组件扫描的候选对象。例如，<code>@Service</code> 是用 <code>@Component</code> 进行元注释的。</p><p>Core Spring 提供了几个开箱即用的原型注释，包括但不限于:<code>@Component</code>、<code>@Service</code>、<code>@Repository</code>、<code>@Controller</code>、<code>@RestController</code>和<code>@Configuration</code>。<code>@Repository</code>， <code>@Service</code>等是<code>@Component</code>的专门化。</p><p>模式注解是一种用于 声明在应用中扮演’组件’角色的注解。如 Spring Framework 中的 <code>@Repository</code> 标注在任何类上, 用于扮演仓储角色的模式注解。</p><p><code>@Component</code> 作为一种由 Spring 容器托管的通用模式组件,任何被 <code>@Component</code> 标准的组件均为组件扫描的候选对象。类似地，凡是被</p><p><code>@Component</code> 元标注( <em>meta-annotated</em> )的注解,如 <code>@Service</code>  , 当任何组件标注它时,也被视作组件扫描的候选对象</p><h4 id="模式注解举例"><a href="#模式注解举例" class="headerlink" title="模式注解举例"></a>模式注解举例</h4><table><thead><tr><th>Spring Framework 注解</th><th>场景说明</th><th>起始版本</th></tr></thead><tbody><tr><td><code>@Repository</code></td><td>数据仓储模式注解</td><td>2.0</td></tr><tr><td><code>@Component</code></td><td>通用组件模式注解</td><td>2.5</td></tr><tr><td><code>@Service</code></td><td>服务模式注解</td><td>2.5</td></tr><tr><td><code>@Controller</code></td><td>Web 控制器模式注解</td><td>2.5</td></tr><tr><td><code>@Configuration</code></td><td>配置类模式注解</td><td>3.0</td></tr></tbody></table><h4 id="装配方式"><a href="#装配方式" class="headerlink" title="装配方式"></a>装配方式</h4><h5 id="lt-context-component-scan-gt-方式"><a href="#lt-context-component-scan-gt-方式" class="headerlink" title="&lt;context:component-scan&gt;方式"></a><code>&lt;context:component-scan&gt;</code>方式</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 激活注解驱动特性 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--找寻被 @Component 或者其派生Annotation标记的类(Class)， 将它们注册为Spring Bean --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.imooc.dive.in.spring.boot&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="ComponentScan-方式"><a href="#ComponentScan-方式" class="headerlink" title="@ComponentScan 方式"></a><code>@ComponentScan</code> 方式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ComponentScan(basePackages=&quot;com.imooc.dive.in.spring.boot&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfiguration</span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="自定义模式注解"><a href="#自定义模式注解" class="headerlink" title="自定义模式注解"></a>自定义模式注解</h4><h5 id="Component-“派生性”"><a href="#Component-“派生性”" class="headerlink" title="@Component “派生性”"></a><code>@Component</code> “派生性”</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 一级 &#123;<span class="hljs-doctag">@link</span> org.springframework.stereotype.Repository <span class="hljs-doctag">@Repository</span> &#125;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> &lt;a href =&#x27;jxh98@foxmail.com&#x27;&gt;Josway&lt;/a&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/9/2</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> FirstLevelRepository &#123;<br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>@Component</code><ul><li><code>@Repository</code><ul><li><code>FirstLevelRepository</code></li></ul></li></ul></li></ul><h5 id="Component-“层次性”"><a href="#Component-“层次性”" class="headerlink" title="@Component “层次性”"></a><code>@Component</code> “层次性”</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 二级 &#123;<span class="hljs-doctag">@link</span> org.springframework.stereotype.Repository <span class="hljs-doctag">@Repository</span> &#125;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> &lt;a href =&#x27;jxh98@foxmail.com&#x27;&gt;Josway&lt;/a&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/9/2</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@FirstLevelRepository</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SecondLevelRepository &#123;<br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>@Component</code><ul><li><code>@Repository</code><ul><li><code>FirstLevelRepository</code><ul><li><code>SecondLevelRepository</code></li></ul></li></ul></li></ul></li></ul><h3 id="Spring-Enable-模块装配"><a href="#Spring-Enable-模块装配" class="headerlink" title="Spring @Enable  模块装配"></a>Spring <a href="/Enable">@Enable </a> 模块装配</h3><ul><li>定义 : 具备相同领域的功能组件集合 , 组合所形成一个独立的单元 .</li><li>举例 : <a href="/EnableWebMvc">@EnableWebMvc </a> , @EnableAutoConfiguration 等</li><li>实现 : 注解方式 , 编程方式</li></ul><p>Spring Framework 3.1 开始支持”@Enable 模块驱动”。所谓”模块”是指具备相同领域的功能组件集合,<br>组合所形成一个独立的元。如 Web MVC 模块、Aspect 代理模块、Caching (缓存)模块、JMX (Java 管<br>理扩展)模块、Async (异步处理)模块等。</p><h4 id="Enable-注解模块举例"><a href="#Enable-注解模块举例" class="headerlink" title="@Enable 注解模块举例"></a><code>@Enable</code> 注解模块举例</h4><p>| 框架实现 | <code>@Enable</code></p><p>注解模块 | 激活模块 |<br>| — | — | — |<br>| Spring Framework | <code>@EnableWebMvc</code> | Web Mvc 模块 |<br>| | <code>@EnableTransactionManagement</code> | 事务管理模块 |<br>| | <code>@EnableCaching</code> | Caching 模块 |<br>| | <code>@EnableMBeanExport</code> | JMX 模块 |<br>| | <code>@EnableAsync</code> | 异步处理模块 |<br>| | <code>@EnableWebFlux</code> | Web Flux 模块 |<br>| | <code>@EnableAspectJAutoProxy</code> | AspectJ 代理模块 |<br>| | | |<br>| Spring Boot | <code>@EnableAutoConfiguration</code> | 自动装配模块 |<br>| | <code>@EnableManagementContext</code> | Actuator 管理模块 |<br>| | <code>@EnableConfigurationProperties</code> | 配置属性绑定模块 |<br>| | <code>@EnableOAuth2Sso</code> | OAuth2 单点登录模块 |<br>| | | |<br>| Spring Cloud | <code>@EnableEurekaServer</code> | Eureka 服务器模块 |<br>| | <a href="/EnableConfigServer">@EnableConfigServer </a> | 配置服务器模块 |<br>| | <a href="/EnableFeignClients">@EnableFeignClients </a> | Feign 客户端模块 |<br>| | <a href="/EnableZuulProxy">@EnableZuulProxy </a> | 服务网关 Zuul 模块 |<br>| | <a href="/EnableCircuitBreaker">@EnableCircuitBreaker </a> | 服务熔断模块 |</p><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><h5 id="注解驱动方式"><a href="#注解驱动方式" class="headerlink" title="注解驱动方式"></a>注解驱动方式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Import(DelegatingWebMvcConfiguration.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableWebMvc &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DelegatingWebMvcConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebMvcConfigurationSupport</span> &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="接口编程方式"><a href="#接口编程方式" class="headerlink" title="接口编程方式"></a>接口编程方式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Import(CachingConfigurationSelector.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableCaching &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CachingConfigurationSelector</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AdviceModeImportSelector</span>&lt;EnableCaching&gt; &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Returns &#123;<span class="hljs-doctag">@link</span> ProxyCachingConfiguration&#125; or &#123;<span class="hljs-doctag">@code</span> AspectJCachingConfiguration&#125;</span><br><span class="hljs-comment"> * for &#123;<span class="hljs-doctag">@code</span> PROXY&#125; and &#123;<span class="hljs-doctag">@code</span> ASPECTJ&#125; values of &#123;<span class="hljs-doctag">@link</span> EnableCaching#mode()&#125;,</span><br><span class="hljs-comment"> * respectively. Potentially includes corresponding JCache configuration as well.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String[] selectImports(AdviceMode adviceMode) &#123;<br><span class="hljs-keyword">switch</span> (adviceMode) &#123;<br><span class="hljs-keyword">case</span> PROXY:<br><span class="hljs-keyword">return</span> getProxyImports();<br><span class="hljs-keyword">case</span> ASPECTJ:<br><span class="hljs-keyword">return</span> getAspectJImports();<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="自定义-Enable-注解"><a href="#自定义-Enable-注解" class="headerlink" title="自定义 @Enable 注解"></a>自定义 <code>@Enable</code> 注解</h4><h5 id="基于注解驱动实现-EnableHelloWorld"><a href="#基于注解驱动实现-EnableHelloWorld" class="headerlink" title="基于注解驱动实现 - @EnableHelloWorld"></a>基于注解驱动实现 - <code>@EnableHelloWorld</code></h5><p>TODO</p><h5 id="基于接口驱动实现-EnableServer"><a href="#基于接口驱动实现-EnableServer" class="headerlink" title="基于接口驱动实现 - @EnableServer"></a>基于接口驱动实现 - <code>@EnableServer</code></h5><p><code>HelloWorldImportSelector</code>-&gt;<code>HelloWorldConfiguration</code>-&gt;<code>helloWorld</code></p><h3 id="Spring-条件装配"><a href="#Spring-条件装配" class="headerlink" title="Spring 条件装配"></a>Spring 条件装配</h3><ul><li>Bean 装配的前置判断</li><li><a href="/Profile">@Profile </a> , <a href="/Conditional">@Conditional </a></li><li>注解方式 , 编程方式</li></ul><p>从 Spring Framework 3.1 开始 , 允许在 Bean 装配时增加前置判断条件.</p><h4 id="条件注解举例"><a href="#条件注解举例" class="headerlink" title="条件注解举例"></a>条件注解举例</h4><table><thead><tr><th>Spring 注解</th><th>场景说明</th><th>起始版本</th></tr></thead><tbody><tr><td><a href="/Profile">@Profile </a></td><td>配置化条件装配</td><td>3.1</td></tr><tr><td><a href="/Conditional">@Conditional </a></td><td>编程条件装配</td><td>4.0</td></tr></tbody></table><h4 id="实现方式-1"><a href="#实现方式-1" class="headerlink" title="实现方式"></a>实现方式</h4><h5 id="配置方式-Profile"><a href="#配置方式-Profile" class="headerlink" title="配置方式 - @Profile"></a>配置方式 - <code>@Profile</code></h5><h5 id="编程方式-Conditional"><a href="#编程方式-Conditional" class="headerlink" title="编程方式 - @Conditional"></a>编程方式 - <code>@Conditional</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.boot.autoconfigure.condition;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.Documented;<br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Conditional;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> Conditional <span class="hljs-doctag">@Conditional</span>&#125; that only matches when the specified classes are on</span><br><span class="hljs-comment"> * the classpath.</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * A &#123;<span class="hljs-doctag">@link</span> #value()&#125; can be safely specified on &#123;<span class="hljs-doctag">@code</span> <span class="hljs-doctag">@Configuration</span>&#125; classes as the</span><br><span class="hljs-comment"> * annotation metadata is parsed by using ASM before the class is loaded. Extra care is</span><br><span class="hljs-comment"> * required when placed on &#123;<span class="hljs-doctag">@code</span> <span class="hljs-doctag">@Bean</span>&#125; methods, consider isolating the condition in a</span><br><span class="hljs-comment"> * separate &#123;<span class="hljs-doctag">@code</span> Configuration&#125; class, in particular if the return type of the method</span><br><span class="hljs-comment"> * matches the &#123;<span class="hljs-doctag">@link</span> #value target of the condition&#125;.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Phillip Webb</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Conditional(OnClassCondition.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> ConditionalOnClass &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The classes that must be present. Since this annotation is parsed by loading class</span><br><span class="hljs-comment"> * bytecode, it is safe to specify classes here that may ultimately not be on the</span><br><span class="hljs-comment"> * classpath, only if this annotation is directly on the affected component and</span><br><span class="hljs-comment"> * &lt;b&gt;not&lt;/b&gt; if this annotation is used as a composed, meta-annotation. In order to</span><br><span class="hljs-comment"> * use this annotation as a meta-annotation, only use the &#123;<span class="hljs-doctag">@link</span> #name&#125; attribute.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> the classes that must be present</span><br><span class="hljs-comment"> */</span><br>Class&lt;?&gt;[] value() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The classes names that must be present.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> the class names that must be present.</span><br><span class="hljs-comment"> */</span><br>String[] name() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="自定义条件装配"><a href="#自定义条件装配" class="headerlink" title="自定义条件装配"></a>自定义条件装配</h4><h5 id="基于配置方式实现-Profile"><a href="#基于配置方式实现-Profile" class="headerlink" title="基于配置方式实现 - @Profile"></a>基于配置方式实现 - <code>@Profile</code></h5><p>计算服务 , 多整数求和 sum</p><p>@Profile(“Java7”) : for 循环 实现</p><p>@Profile(“Java8”) : lambda 表达式   实现</p><h5 id="基于编程方式实现-ConditionalOnSystemProperty"><a href="#基于编程方式实现-ConditionalOnSystemProperty" class="headerlink" title="基于编程方式实现 - @ConditionalOnSystemProperty"></a>基于编程方式实现 - <code>@ConditionalOnSystemProperty</code></h5><h2 id="Spring-Boot-自动装配"><a href="#Spring-Boot-自动装配" class="headerlink" title="Spring Boot 自动装配"></a>Spring Boot 自动装配</h2><p>在 Spring Boot 场景下 , 基于约定大于配置的原则 , 实现 Spring 组件自动装配的目的 . 其中使用了</p><h3 id="底层装配技术"><a href="#底层装配技术" class="headerlink" title="底层装配技术"></a>底层装配技术</h3><ul><li>Spring 模式注解装配</li><li>Spring <code>@Enable</code> 模块装配</li><li>Spring 条件装配</li><li>Spring 工厂加载机制<ul><li>实现类 : <code>SpringFactoriesLoader</code></li><li>配置资源 : <code>META-INF/spring.factories</code></li></ul></li></ul><h3 id="自动装配举例"><a href="#自动装配举例" class="headerlink" title="自动装配举例"></a>自动装配举例</h3><p>参考 <code>META-INF/spring.factories</code></p><h3 id="实现方式-2"><a href="#实现方式-2" class="headerlink" title="实现方式"></a>实现方式</h3><ol><li>激活自动装配 - <code>@EnableAutoConfiguration</code></li><li>实现自动装配 - <code>XXXAutoConfiguration</code></li><li>配置自动装配实现 - <code>META-INF/spring.factories</code></li></ol><h3 id="自定义自动装配"><a href="#自定义自动装配" class="headerlink" title="自定义自动装配"></a>自定义自动装配</h3><p><code>HelloWorldAutoConfiguration</code></p><ul><li>条件判断 : <code>user.name == &quot;josway&quot;</code></li><li>模式注解 : <code>@Configuration</code></li><li><code>@Enable</code> 模块 : <code>@EnableHelloWorld</code> -&gt; <code>HelloWorldImportSelector</code> -&gt; <code>HelloWorldConfiguration</code> -&gt; <code>helloWorld</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>深入理解SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot 1. 总览-核心特性</title>
    <link href="/2022/04/25/yuque/Spring%20Boot%201.%20%E6%80%BB%E8%A7%88-%E6%A0%B8%E5%BF%83%E7%89%B9%E6%80%A7/"/>
    <url>/2022/04/25/yuque/Spring%20Boot%201.%20%E6%80%BB%E8%A7%88-%E6%A0%B8%E5%BF%83%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<p>总览-核心特性<br>PDF 版本:<a href="https://www.yuque.com/attachments/yuque/0/2022/pdf/28199557/1650898841669-9392a1db-ebc5-4a5d-adcd-da8b8e20c2bc.pdf?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2022/pdf/28199557/1650898841669-9392a1db-ebc5-4a5d-adcd-da8b8e20c2bc.pdf%22,%22name%22:%22%E7%AC%AC%E4%B8%80%E8%8A%82+%E7%B3%BB%E5%88%97%E6%80%BB%E8%A7%88-%E6%A0%B8%E5%BF%83%E7%89%B9%E6%80%A7.pdf%22,%22size%22:314157,%22type%22:%22application/pdf%22,%22ext%22:%22pdf%22,%22status%22:%22done%22,%22taskId%22:%22u0984f805-153f-418b-aad4-76df9dce391%22,%22taskType%22:%22upload%22,%22id%22:%22u11bfeaba%22,%22card%22:%22file%22%7D">第一节 系列总览-核心特性.pdf</a></p><h2 id="Spring-Boot-三大特性"><a href="#Spring-Boot-三大特性" class="headerlink" title="Spring Boot 三大特性"></a>Spring Boot 三大特性</h2><h3 id="组件-自动-装配-Web-MVC-Web-Flux-JDBC-等"><a href="#组件-自动-装配-Web-MVC-Web-Flux-JDBC-等" class="headerlink" title="组件 自动 装配: Web MVC , Web Flux ,JDBC 等"></a>组件 自动 装配: Web MVC , Web Flux ,JDBC 等</h3><ul><li>激活: <code>@EnableAutoConfiguration</code></li><li>配置: <code>/METE-INF/spring.factories</code> (元信息目录,工厂机制,key value 形式)</li><li>实现: <code>XXXAutoConfiguration</code></li></ul><h3 id="嵌入式的-Web-容器-Tomcat-Jetty-以及-Undertow"><a href="#嵌入式的-Web-容器-Tomcat-Jetty-以及-Undertow" class="headerlink" title="嵌入式的 Web 容器: Tomcat , Jetty 以及 Undertow"></a>嵌入式的 Web 容器: Tomcat , Jetty 以及 Undertow</h3><ul><li>Web Servlet: Tomcat , Jetty 和 Undertow</li><li>Web Reactive: Netty Web Server</li></ul><h3 id="生产准备特性-指标-健康检查-外部配置化"><a href="#生产准备特性-指标-健康检查-外部配置化" class="headerlink" title="生产准备特性: 指标 , 健康检查 , 外部配置化"></a>生产准备特性: 指标 , 健康检查 , 外部配置化</h3><ul><li>指标(Metrics): &#x2F;actuator&#x2F;metrics</li><li>健康检查(Health Check): &#x2F;actuator&#x2F;health</li><li>外部配置化(Externalized Conﬁguration): &#x2F;actuator&#x2F;configprops</li></ul><h2 id="Web-应用"><a href="#Web-应用" class="headerlink" title="Web 应用"></a>Web 应用</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="传统-Servlet-应用"><a href="#传统-Servlet-应用" class="headerlink" title="传统 Servlet 应用"></a>传统 Servlet 应用</h3><h4 id="Servlet-组件-Servlet-Filter-Listener"><a href="#Servlet-组件-Servlet-Filter-Listener" class="headerlink" title="Servlet 组件: Servlet , Filter , Listener"></a>Servlet 组件: Servlet , Filter , Listener</h4><ul><li>Servlet<ul><li>实现<ul><li><code>@WebServlet</code></li><li>HttpServlet</li><li>注册</li></ul></li><li>URL 映射<ul><li><code>@WebServlet(urlPatterns = &quot;/my/servlet&quot;)</code></li></ul></li><li>注册<ul><li><code>@ServletComponentScan(basePackages = &quot;com.example.demo.web.servlet&quot;)</code></li></ul></li></ul></li><li>Filter</li><li>Listener  (在 Servlet 里面的一种事件监听者模式的实现. ServletContextListener , RequestListener)</li></ul><h4 id="Servlet-注册-Servlet-注解-Spring-Bean-RegistrationBean"><a href="#Servlet-注册-Servlet-注解-Spring-Bean-RegistrationBean" class="headerlink" title="Servlet 注册: Servlet 注解 , Spring Bean , RegistrationBean"></a>Servlet 注册: Servlet 注解 , Spring Bean , RegistrationBean</h4><h5 id="Servlet-注解"><a href="#Servlet-注解" class="headerlink" title="Servlet 注解"></a>Servlet 注解</h5><ul><li><code>@ServletComponentScan</code><ul><li><code>@WebServlet</code></li><li><code>@WebFilter</code></li><li><code>@WebListener</code></li></ul></li></ul><h5 id="Spring-Bean"><a href="#Spring-Bean" class="headerlink" title="Spring Bean"></a>Spring Bean</h5><ul><li><code>@Bean</code><ul><li>Servlet</li><li>Filter</li><li>Listener</li></ul></li></ul><h5 id="RegisterationBean"><a href="#RegisterationBean" class="headerlink" title="RegisterationBean"></a>RegisterationBean</h5><ul><li><code>ServletRegisteration</code></li><li><code>FilterRegisteration</code></li><li><code>ServletListenerRegisteration</code></li></ul><h4 id="异步非阻塞-异步-Servlet-非阻塞-Servlet-Servlet-3-0"><a href="#异步非阻塞-异步-Servlet-非阻塞-Servlet-Servlet-3-0" class="headerlink" title="异步非阻塞: 异步 Servlet , 非阻塞 Servlet (Servlet 3.0 )"></a>异步非阻塞: 异步 Servlet , 非阻塞 Servlet (Servlet 3.0 )</h4><h5 id="异步-Servlet"><a href="#异步-Servlet" class="headerlink" title="异步 Servlet"></a>异步 Servlet</h5><ul><li><code>javax.serlvet.ServletRequest#startAsync()</code></li><li><code>javax.serlvet.AsyncContext</code></li></ul><h5 id="非阻塞-Servlet"><a href="#非阻塞-Servlet" class="headerlink" title="非阻塞 Servlet"></a>非阻塞 Servlet</h5><ul><li><code>javax.serlvet.ServletInputStream#setReadListener</code><ul><li><code>javax.serlvet.ReadListener</code></li></ul></li><li><code>javax.serlvet.ServletOutputStream#setWriteListener</code><ul><li><code>javax.servlet.WriteListener</code></li></ul></li></ul><h3 id="Spring-Web-MVC-应用"><a href="#Spring-Web-MVC-应用" class="headerlink" title="Spring Web MVC 应用"></a>Spring Web MVC 应用</h3><h4 id="Web-MVC-视图-模板引擎-内容协商-异常处理等"><a href="#Web-MVC-视图-模板引擎-内容协商-异常处理等" class="headerlink" title="Web MVC 视图: 模板引擎 , 内容协商 , 异常处理等"></a>Web MVC 视图: 模板引擎 , 内容协商 , 异常处理等</h4><ul><li><code>ViewResolver</code></li><li><code>View</code></li></ul><h5 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h5><ul><li>Thymeleaf</li><li>Freemarker</li><li>JSP</li></ul><h5 id="内容协商"><a href="#内容协商" class="headerlink" title="内容协商"></a>内容协商</h5><ul><li><code>ContentNegotiaionConfigurer</code></li><li><code>ContentNegotiaionStrategy</code></li><li><code>ContentNegotiaionViewResolver</code></li></ul><h5 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h5><ul><li><code>@ExceptionHandler</code></li><li><code>HandlerExceptionResolver</code><ul><li><code>ExceptionHandlerExceptionResolver</code></li></ul></li><li><code>BasicErrorController</code> (Spring Boot)</li></ul><h4 id="Web-MVC-REST-资源服务-资源跨域-服务发现等"><a href="#Web-MVC-REST-资源服务-资源跨域-服务发现等" class="headerlink" title="Web MVC REST: 资源服务 , 资源跨域 , 服务发现等"></a>Web MVC REST: 资源服务 , 资源跨域 , 服务发现等</h4><h5 id="资源服务"><a href="#资源服务" class="headerlink" title="资源服务"></a>资源服务</h5><ul><li><code>@RequestMapping</code><ul><li><code>@GetMapping</code> (查)</li><li><code>@PostMapping</code> (增)</li><li><code>@PutMapping</code> (改)</li><li><code>@DeleteMapping</code> (删)</li><li>…</li></ul></li><li><code>@ResponseBody</code></li><li><code>@RequestBody</code></li></ul><h5 id="资源跨域"><a href="#资源跨域" class="headerlink" title="资源跨域"></a>资源跨域</h5><ul><li><code>CrossOrigin</code></li><li><code>WebMvcConfigurer#addCorsMappings</code></li><li>传统解决方案<ul><li>iFrame</li><li>JSONP</li></ul></li></ul><h5 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h5><ul><li>HATEOS</li></ul><h4 id="Web-MVC-核心-核心架构-处理流程-核心组件"><a href="#Web-MVC-核心-核心架构-处理流程-核心组件" class="headerlink" title="Web MVC 核心:   核心架构 , 处理流程 , 核心组件"></a>Web MVC 核心:   核心架构 , 处理流程 , 核心组件</h4><h5 id="核心架构"><a href="#核心架构" class="headerlink" title="核心架构"></a>核心架构</h5><h5 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h5><h5 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h5><ul><li><code>DispatcherServlet</code></li><li><code>HandlerMapping</code></li><li><code>HandlerAdapter</code></li><li><code>ViewResolver</code></li><li>…</li></ul><h3 id="Spring-Web-Flux-应用"><a href="#Spring-Web-Flux-应用" class="headerlink" title="Spring Web Flux 应用"></a>Spring Web Flux 应用</h3><h4 id="Reactor-基础"><a href="#Reactor-基础" class="headerlink" title="Reactor 基础"></a>Reactor 基础</h4><h5 id="Java-Lambda"><a href="#Java-Lambda" class="headerlink" title="Java Lambda"></a>Java Lambda</h5><h5 id="Mono"><a href="#Mono" class="headerlink" title="Mono"></a>Mono</h5><h5 id="Flux"><a href="#Flux" class="headerlink" title="Flux"></a>Flux</h5><h4 id="Web-Flux-核心"><a href="#Web-Flux-核心" class="headerlink" title="Web Flux 核心"></a>Web Flux 核心</h4><h5 id="Web-MVC-注解兼容"><a href="#Web-MVC-注解兼容" class="headerlink" title="Web MVC 注解兼容"></a>Web MVC 注解兼容</h5><ul><li><code>@Controller</code></li><li><code>@RequestMapping</code></li><li><code>@ResponseBody</code></li><li><code>@RequestBody</code></li><li>…</li></ul><h5 id="函数式声明"><a href="#函数式声明" class="headerlink" title="函数式声明"></a>函数式声明</h5><ul><li><code>RouterFunction</code></li></ul><h5 id="异步非阻塞"><a href="#异步非阻塞" class="headerlink" title="异步非阻塞"></a>异步非阻塞</h5><ul><li>Servlet 3.1</li><li>Netty Reactor</li></ul><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><h5 id="页面渲染"><a href="#页面渲染" class="headerlink" title="页面渲染"></a>页面渲染</h5><h5 id="REST-应用"><a href="#REST-应用" class="headerlink" title="REST 应用"></a>REST 应用</h5><h5 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h5><h3 id="Web-Server-应用"><a href="#Web-Server-应用" class="headerlink" title="Web Server 应用"></a>Web Server 应用</h3><h4 id="切换-Web-Server"><a href="#切换-Web-Server" class="headerlink" title="切换 Web Server"></a>切换 Web Server</h4><h5 id="切换其他-Servlet-容器"><a href="#切换其他-Servlet-容器" class="headerlink" title="切换其他 Servlet 容器"></a>切换其他 Servlet 容器</h5><ul><li>Tomcat -&gt; Jetty</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span>        <span class="hljs-comment">&lt;!-- Exclude the Tomcat dependency --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span> <span class="hljs-comment">&lt;!-- Use Jetty instead --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="替换-Servlet-容器"><a href="#替换-Servlet-容器" class="headerlink" title="替换 Servlet 容器"></a>替换 Servlet 容器</h5><ul><li>WebFlux</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--        &lt;dependency&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;exclusions&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--                &lt;!– Exclude the Tomcat dependency –&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--                &lt;exclusion&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--                    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--                    &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--                &lt;/exclusion&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;/exclusions&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;/dependency&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;!– Use Jetty instead –&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;dependency&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;artifactId&gt;spring-boot-starter-jetty&lt;/artifactId&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;/dependency&gt;--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="自定义-Servlet-Web-Server"><a href="#自定义-Servlet-Web-Server" class="headerlink" title="自定义 Servlet Web Server"></a>自定义 Servlet Web Server</h4><ul><li><code>WebServerFactoryCustomizer</code></li></ul><h4 id="自定义-Reactive-Web-Server"><a href="#自定义-Reactive-Web-Server" class="headerlink" title="自定义 Reactive Web Server"></a>自定义 Reactive Web Server</h4><ul><li><code>ReactiveWebServerFactoryCustomizer</code></li></ul><h2 id="数据相关"><a href="#数据相关" class="headerlink" title="数据相关"></a>数据相关</h2><h3 id="关系型数据"><a href="#关系型数据" class="headerlink" title="关系型数据"></a>关系型数据</h3><h4 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h4><h5 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h5><ul><li><code>javax.sql.DataSource</code></li></ul><h5 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h5><h5 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h5><ul><li><code>DataSourceAutoConfiguration</code></li></ul><h4 id="JPA"><a href="#JPA" class="headerlink" title="JPA"></a>JPA</h4><h5 id="依赖-1"><a href="#依赖-1" class="headerlink" title="依赖"></a>依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="实体映射关系"><a href="#实体映射关系" class="headerlink" title="实体映射关系"></a>实体映射关系</h5><ul><li><code>@javax.persistence.OneToOne</code></li><li><code>@javax.persistence.OneToMany</code></li><li><code>@javax.persistence.ManyToOne</code></li><li><code>@javax.persistence.ManyToMany</code></li><li>…</li></ul><h5 id="实体操作"><a href="#实体操作" class="headerlink" title="实体操作"></a>实体操作</h5><ul><li><code>javax.persistence.EntityManager</code></li></ul><h5 id="自动装配-1"><a href="#自动装配-1" class="headerlink" title="自动装配"></a>自动装配</h5><ul><li><code>HibernateJpaAutoConfiguration</code></li></ul><h4 id="事务（Transaction）"><a href="#事务（Transaction）" class="headerlink" title="事务（Transaction）"></a>事务（Transaction）</h4><h5 id="依赖-2"><a href="#依赖-2" class="headerlink" title="依赖"></a>依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="Spring-事务抽象"><a href="#Spring-事务抽象" class="headerlink" title="Spring 事务抽象"></a>Spring 事务抽象</h5><ul><li><code>PlatformTransactionManager</code></li></ul><h5 id="JDBC-事务处理"><a href="#JDBC-事务处理" class="headerlink" title="JDBC 事务处理"></a>JDBC 事务处理</h5><ul><li><code>DataSourceTransactionManager</code></li></ul><h5 id="自动装配-2"><a href="#自动装配-2" class="headerlink" title="自动装配"></a>自动装配</h5><ul><li><code>TransactionAutoConfiguration</code></li></ul><h2 id="功能扩展"><a href="#功能扩展" class="headerlink" title="功能扩展"></a>功能扩展</h2><h3 id="Spring-Boot-应用"><a href="#Spring-Boot-应用" class="headerlink" title="Spring Boot 应用"></a>Spring Boot 应用</h3><h4 id="SpringApplication"><a href="#SpringApplication" class="headerlink" title="SpringApplication"></a>SpringApplication</h4><h5 id="失败分析"><a href="#失败分析" class="headerlink" title="失败分析"></a>失败分析</h5><ul><li><code>FailureAnalysisReporter</code></li></ul><h5 id="应用特性"><a href="#应用特性" class="headerlink" title="应用特性"></a>应用特性</h5><ul><li><code>SpringApplication</code> Fluent API</li></ul><h5 id="Spring-Boot-配置"><a href="#Spring-Boot-配置" class="headerlink" title="Spring Boot 配置"></a>Spring Boot 配置</h5><ul><li>外部化配置<ul><li><code>ConfigurationProperty</code></li></ul></li><li><code>@Profile</code></li><li>配置属性<ul><li><code>PropertySources</code></li></ul></li></ul><h4 id="Spring-Boot-Starter"><a href="#Spring-Boot-Starter" class="headerlink" title="Spring Boot Starter"></a>Spring Boot Starter</h4><h2 id="运维管理"><a href="#运维管理" class="headerlink" title="运维管理"></a>运维管理</h2><h3 id="Spring-Boot-Actuator"><a href="#Spring-Boot-Actuator" class="headerlink" title="Spring Boot Actuator"></a>Spring Boot Actuator</h3><h4 id="依赖-3"><a href="#依赖-3" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="端点（Endpoints）"><a href="#端点（Endpoints）" class="headerlink" title="端点（Endpoints）"></a>端点（Endpoints）</h4><h5 id="Web-Endpoints"><a href="#Web-Endpoints" class="headerlink" title="Web Endpoints"></a>Web Endpoints</h5><h5 id="JMX-Endpoints"><a href="#JMX-Endpoints" class="headerlink" title="JMX Endpoints"></a>JMX Endpoints</h5><h4 id="健康检查（Health-Checks）"><a href="#健康检查（Health-Checks）" class="headerlink" title="健康检查（Health Checks）"></a>健康检查（Health Checks）</h4><h5 id="Health"><a href="#Health" class="headerlink" title="Health"></a><code>Health</code></h5><h5 id="HealthIndicator"><a href="#HealthIndicator" class="headerlink" title="HealthIndicator"></a><code>HealthIndicator</code></h5><h4 id="指标（Metrics）"><a href="#指标（Metrics）" class="headerlink" title="指标（Metrics）"></a>指标（Metrics）</h4><h5 id="内建-Metrics"><a href="#内建-Metrics" class="headerlink" title="内建 Metrics"></a>内建 Metrics</h5><ul><li>Web Endpoint : <code>/actuator/metrics</code></li></ul><h5 id="自定义-Metrics"><a href="#自定义-Metrics" class="headerlink" title="自定义 Metrics"></a>自定义 Metrics</h5>]]></content>
    
    
    <categories>
      
      <category>深入理解SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring</title>
    <link href="/2022/04/25/yuque/Spring/"/>
    <url>/2022/04/25/yuque/Spring/</url>
    
    <content type="html"><![CDATA[<p>Spring Framework<br>Xmind 版本:<a href="https://www.yuque.com/attachments/yuque/0/2022/xmind/28199557/1650898862195-d777bad9-529a-48dd-9939-eb06943a7ece.xmind?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2022/xmind/28199557/1650898862195-d777bad9-529a-48dd-9939-eb06943a7ece.xmind%22,%22name%22:%22Spring.xmind%22,%22size%22:368645,%22type%22:%22%22,%22ext%22:%22xmind%22,%22status%22:%22done%22,%22taskId%22:%22u0c52d2e9-430a-4f52-99b6-de930009419%22,%22taskType%22:%22upload%22,%22id%22:%22u23414779%22,%22card%22:%22file%22%7D">Spring.xmind</a></p><h2 id="控制反转-IoC-容器"><a href="#控制反转-IoC-容器" class="headerlink" title="控制反转(IoC)容器"></a>控制反转(IoC)容器</h2><p>Inversion of Control<br>Spring 容器是 Spring 框架的核心。容器将创建对象，把它们连接在一起，配置它们，并管理他们的整个生命周期从创建到销毁。Spring 容器使用依赖注入（DI）来管理组成一个应用程序的组件。这些对象被称为 Spring Beans，我们将在下一章中进行讨论。</p><p>通过阅读配置元数据提供的指令，容器知道对哪些对象进行实例化，配置和组装。配置元数据可以通过 XML，Java 注释或 Java 代码来表示。下图是 Spring 如何工作的高级视图。 Spring IoC 容器利用 Java 的 POJO 类和配置元数据来生成完全配置和可执行的系统或应用程序。</p><p>IOC 容器具有依赖注入功能的容器，它可以创建对象，IOC 容器负责实例化、定位、配置应用程序中的对象及建立这些对象间的依赖。通常 new 一个实例，控制权由程序员控制，而”控制反转”是指 new 实例工作不由程序员来做而是交给 Spring 容器来做。在 Spring 中 BeanFactory 是 IOC 容器的实际代表者。</p><p>ApplicationContext 容器包括 BeanFactory 容器的所有功能，所以通常不建议使用 BeanFactory。BeanFactory 仍然可以用于轻量级的应用程序，如移动设备或基于 applet 的应用程序，其中它的数据量和速度是显著。</p><h3 id="BeanFactory-容器"><a href="#BeanFactory-容器" class="headerlink" title="BeanFactory 容器"></a>BeanFactory 容器</h3><p>这是一个最简单的容器，它主要的功能是为依赖注入 （DI） 提供支持，这个容器接口在 org.springframework.beans.factory.BeanFactory 中被定义。BeanFactory 和相关的接口，比如 BeanFactoryAware、DisposableBean、InitializingBean，仍旧保留在 Spring 中，主要目的是向后兼容已经存在的和那些 Spring 整合在一起的第三方框架。</p><p>在 Spring 中，有大量对 BeanFactory 接口的实现。其中，最常被使用的是 XmlBeanFactory 类。这个容器从一个 XML 文件中读取配置元数据，由这些元数据来生成一个被配置化的系统或者应用。</p><p>在资源宝贵的移动设备或者基于 applet 的应用当中， BeanFactory 会被优先选择。否则，一般使用的是 ApplicationContext，除非你有更好的理由选择 BeanFactory。</p><ul><li>org.springframework.beans.factory.xml.XmlBeanFactory<br>这个容器从一个 XML 文件中读取配置元数据，由这些元数据来生成一个被配置化的系统或者应用。</li><li>org.springframework.beans.factory.BeanFactoryAware<ul><li>setBeanFactory(BeanFactory beanFactory)</li></ul></li><li>org.springframework.beans.factory.DisposableBean<ul><li>destory()</li></ul></li><li>org.springframework.beans.factory.InitializingBean<ul><li>afterPropertiesSet()</li></ul></li></ul><h3 id="ApplicationContext-容器"><a href="#ApplicationContext-容器" class="headerlink" title="ApplicationContext 容器"></a>ApplicationContext 容器</h3><p>Application Context 是 BeanFactory 的子接口，也被称为 Spring 上下文。</p><p>Application Context 是 spring 中较高级的容器。和 BeanFactory 类似，它可以加载配置文件中定义的 bean，将所有的 bean 集中在一起，当有请求的时候分配 bean。 另外，它增加了企业所需要的功能，比如，从属性文件中解析文本信息和将事件传递给所指定的监听器。这个容器在 org.springframework.context.ApplicationContext interface 接口中定义。</p><p>ApplicationContext 包含 BeanFactory 所有的功能，一般情况下，相对于 BeanFactory，ApplicationContext 会更加优秀。当然，BeanFactory 仍可以在轻量级应用中使用，比如移动设备或者基于 applet 的应用程序。</p><p>最常被使用的 ApplicationContext 接口实现：</p><ul><li>org.springframework.context.support.FileSystemXmlApplicationContext</li><li>org.springframework.context.support.ClassPathXmlApplicationContext</li><li>WebXmlApplicationContext</li></ul><h3 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h3><ul><li>定义<br>被称作 bean 的对象是构成应用程序的支柱也是由 Spring IoC 容器管理的。bean 是一个被实例化，组装，并通过 Spring IoC 容器所管理的对象。这些 bean 是由用容器提供的配置元数据创建的，例如，已经在先前章节看到的，在 XML 的表单中的 定义。<br>bean 定义包含称为配置元数据的信息，下述容器也需要知道配置元数据：<br>如何创建一个 bean<br>bean 的生命周期的详细信息<br>bean 的依赖关系<ul><li>class<br>这个属性是强制性的，并且指定用来创建 bean 的 bean 类。</li><li>name<br>这个属性指定唯一的 bean 标识符。在基于 XML 的配置元数据中，你可以使用 ID 和&#x2F;或 name 属性来指定 bean 标识符。</li><li>scope<br>这个属性指定由特定的 bean 定义创建的对象的作用域，它将会在 bean 作用域的章节中进行讨论。</li><li>constructor-arg<br>它是用来注入依赖关系的。</li><li>properties<br>它是用来注入依赖关系的。</li><li>autowiring mode<br>它是用来注入依赖关系的</li><li>lazy-initialization mode<br>延迟初始化的 bean 告诉 IoC 容器在它第一次被请求时，而不是在启动时去创建一个 bean 实例。</li><li>initialization 方法<br>在 bean 的所有必需的属性被容器设置之后，调用回调方法。</li><li>destruction 方法<br>当包含该 bean 的容器被销毁时，使用回调方法。</li></ul></li><li>作用域<br>当在 Spring 中定义一个 bean 时，你必须声明该 bean 的作用域的选项。例如，为了强制 Spring 在每次需要时都产生一个新的 bean 实例，你应该声明 bean 的作用域的属性为 prototype。同理，如果你想让 Spring 在每次需要时都返回同一个 bean 实例，你应该声明 bean 的作用域的属性为 singleton。<br>Spring 框架支持以下五个作用域，分别为 singleton、prototype、request、session 和 global session，5 种作用域说明如下所示。<ul><li>singleton<br>在 spring IoC 容器仅存在一个 Bean 实例，Bean 以单例方式存在，默认值</li><li>prototype<br>每次从容器中调用 Bean 时，都返回一个新的实例，即每次调用 getBean()时，相当于执行 newXxxBean()</li><li>request<br>每次 HTTP 请求都会创建一个新的 Bean，该作用域仅适用于 WebApplicationContext 环境</li><li>session<br>同一个 HTTP Session 共享一个 Bean，不同 Session 使用不同的 Bean，仅适用于 WebApplicationContext 环境</li><li>global-session<br>一般用于 Portlet 应用环境，该作用域仅适用于 WebApplicationContext 环境</li></ul></li><li>生命周期<br>理解 Spring bean 的生命周期很容易。当一个 bean 被实例化时，它可能需要执行一些初始化使它转换成可用状态。同样，当 bean 不再需要，并且从容器中移除时，可能需要做一些清除工作。<br>尽管还有一些在 Bean 实例化和销毁之间发生的活动，但是本章将只讨论两个重要的生命周期回调方法，它们在 bean 的初始化和销毁的时候是必需的。<br>为了定义安装和拆卸一个 bean，我们只要声明带有 init-method 和&#x2F;或 destroy-method 参数的 。init-method 属性指定一个方法，在实例化 bean 时，立即调用该方法。同样，destroy-method 指定一个方法，只有从容器中移除 bean 之后，才能调用该方法。<br>Bean 的生命周期可以表达为：Bean 的定义——Bean 的初始化——Bean 的使用——Bean 的销毁<ul><li>初始化回调<ul><li>org.springframework.beans.factory.InitializingBean<ul><li>afterPropertiesSet()</li></ul></li></ul></li><li>销毁回调<ul><li>org.springframework.beans.factory.DisposableBean<ul><li>destroy()</li></ul></li></ul></li></ul></li><li>后置处理器<br>Bean 后置处理器允许在调用初始化方法前后对 Bean 进行额外的处理。<br>BeanPostProcessor 接口定义回调方法，你可以实现该方法来提供自己的实例化逻辑，依赖解析逻辑等。你也可以在 Spring 容器通过插入一个或多个 BeanPostProcessor 的实现来完成实例化，配置和初始化一个 bean 之后实现一些自定义逻辑回调方法。<br>你可以配置多个 BeanPostProcessor 接口，通过设置 BeanPostProcessor 实现的 Ordered 接口提供的 order 属性来控制这些 BeanPostProcessor 接口的执行顺序。<br>BeanPostProcessor 可以对 bean（或对象）实例进行操作，这意味着 Spring IoC 容器实例化一个 bean 实例，然后 BeanPostProcessor 接口进行它们的工作。<ul><li>org.springframework.beans.factory.config.BeanPostProcessor<br>ApplicationContext 会自动检测由 BeanPostProcessor 接口的实现定义的 bean，注册这些 bean 为后置处理器，然后通过在容器中创建 bean，在适当的时候调用它。<br>在你自定义的的 BeanPostProcessor 接口实现类中，要实现以下的两个抽象方法  BeanPostProcessor.postProcessBeforeInitialization(Object, String) 和  BeanPostProcessor.postProcessAfterInitialization(Object, String) 和，注意命名要准确<br>否则会出现： “ The type InitHelloWorld must implement the inherited abstract method BeanPostProcessor.postProcessBeforeInitialization(Object, String) ”之类的错误 - Object postProcessBeforeInitialization(Object bean, String beanName) - Object postProcessAfterInitialization(Object bean, String beanName)</li></ul></li><li>定义继承<br>bean 定义可以包含很多的配置信息，包括构造函数的参数，属性值，容器的具体信息例如初始化方法，静态工厂方法名，等等。<br>子 bean 的定义继承父定义的配置数据。子定义可以根据需要重写一些值，或者添加其他值。<br>Spring Bean 定义的继承与 Java 类的继承无关，但是继承的概念是一样的。你可以定义一个父 bean 的定义作为模板和其他子 bean 就可以从父 bean 中继承所需的配置。<br>当你使用基于 XML 的配置元数据时，通过使用父属性，指定父 bean 作为该属性的值来表明子 bean 的定义。</li></ul><h2 id="依赖注入-DI"><a href="#依赖注入-DI" class="headerlink" title="依赖注入(DI)"></a>依赖注入(DI)</h2><p>Dependency Injection<br>每个基于应用程序的 java 都有几个对象，由这些对象一起工作来呈现出终端用户所看到的工作的应用程序。当编写一个复杂的 Java 应用程序时，应用程序类应该尽可能独立于其他 Java 类来增加这些类重用的可能性，并且在做单元测试时，测试独立于其他类的独立性。依赖注入（或有时称为布线）有助于把这些类粘合在一起，同时保持他们独立。</p><h3 id="基于构造函数的依赖注入"><a href="#基于构造函数的依赖注入" class="headerlink" title="基于构造函数的依赖注入"></a>基于构造函数的依赖注入</h3><p>当容器调用带有一组参数的类构造函数时，基于构造函数的 DI 就完成了，其中每个参数代表一个对其他类的依赖。</p><h3 id="基于设值函数的依赖注入"><a href="#基于设值函数的依赖注入" class="headerlink" title="基于设值函数的依赖注入"></a>基于设值函数的依赖注入</h3><p>当容器调用一个无参的构造函数或一个无参的静态 factory 方法来初始化你的 bean 后，通过容器在你的 bean 上调用设值函数，基于设值函数的 DI 就完成了。</p><h3 id="注入内部-Beans"><a href="#注入内部-Beans" class="headerlink" title="注入内部 Beans"></a>注入内部 Beans</h3><p>正如你所知道的 Java 内部类是在其他类的范围内被定义的，同理，inner beans 是在其他 bean 的范围内定义的 bean。因此或元素中的元素称为内部 bean。</p><h3 id="注入集合"><a href="#注入集合" class="headerlink" title="注入集合"></a>注入集合</h3><p>你已经看到了如何使用 value 属性来配置基本数据类型和在你的 bean 配置文件中使用标签的 ref 属性来配置对象引用。这两种情况下处理奇异值传递给一个 bean。</p><p>现在如果你想传递多个值，如 Java Collection 类型 List、Set、Map 和 Properties，应该怎么做呢。为了处理这种情况，Spring 提供了四种类型的集合的配置元素，如下所示。</p><ul><li>它有助于连线，如注入一列值，允许重复。</li><li>它有助于连线一组值，但不能重复。</li><li><pre><code class="hljs"> 它可以用来注入名称-值对的集合，其中名称和值可以是任何类型。</code></pre></li><li><pre><code class="hljs"> 它可以用来注入名称-值对的集合，其中名称和值都是字符串类型。</code></pre></li></ul><h2 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h2><h3 id="自动装配-byName"><a href="#自动装配-byName" class="headerlink" title="自动装配 byName"></a>自动装配 byName</h3><p>这种模式由属性名称指定自动装配。Spring 容器看作 beans，在 XML 配置文件中 beans 的 auto-wire 属性设置为 byName。然后，它尝试将它的属性与配置文件中定义为相同名称的 beans 进行匹配和连接。如果找到匹配项，它将注入这些 beans，否则，它将抛出异常。</p><p>例如，在配置文件中，如果一个 bean 定义设置为自动装配 byName，并且它包含 spellChecker 属性（即，它有一个 setSpellChecker(…) 方法），那么 Spring 就会查找定义名为 spellChecker 的 bean，并且用它来设置这个属性。你仍然可以使用   标签连接其余的属性。</p><h3 id="自动装配-byType"><a href="#自动装配-byType" class="headerlink" title="自动装配 byType"></a>自动装配 byType</h3><p>这种模式由属性类型指定自动装配。Spring 容器看作 beans，在 XML 配置文件中 beans 的 autowire 属性设置为 byType。然后，如果它的 type 恰好与配置文件中 beans 名称中的一个相匹配，它将尝试匹配和连接它的属性。如果找到匹配项，它将注入这些 beans，否则，它将抛出异常。</p><p>例如，在配置文件中，如果一个 bean 定义设置为自动装配 byType，并且它包含 SpellChecker 类型的 spellChecker 属性，那么 Spring 就会查找定义名为 SpellChecker 的 bean，并且用它来设置这个属性。你仍然可以使用   标签连接其余属性。下面的例子将说明这个概念，你会发现和上面的例子没有什么区别，除了 XML 配置文件已经被改变。</p><h3 id="由构造函数自动装配"><a href="#由构造函数自动装配" class="headerlink" title="由构造函数自动装配"></a>由构造函数自动装配</h3><p>这种模式与 byType 非常相似，但它应用于构造器参数。Spring 容器看作 beans，在 XML 配置文件中 beans 的 autowire 属性设置为 constructor。然后，它尝试把它的构造函数的参数与配置文件中 beans 名称中的一个进行匹配和连线。如果找到匹配项，它会注入这些 bean，否则，它会抛出异常。</p><p>例如，在配置文件中，如果一个 bean 定义设置为通过构造函数自动装配，而且它有一个带有 SpellChecker 类型的参数之一的构造函数，那么 Spring 就会查找定义名为 SpellChecker 的 bean，并用它来设置构造函数的参数。你仍然可以使用   标签连接其余属性。</p><h2 id="Web-MVC-框架"><a href="#Web-MVC-框架" class="headerlink" title="Web MVC 框架"></a>Web MVC 框架</h2><p>MVC 框架提供了模型-视图-控制的体系结构和可以用来开发灵活、松散耦合的 web 应用程序的组件。MVC 模式导致了应用程序的不同方面(输入逻辑、业务逻辑和 UI 逻辑)的分离，同时提供了在这些元素之间的松散耦合。</p><p>模型封装了应用程序数据，并且通常它们由 POJO 组成。</p><p>视图主要用于呈现模型数据，并且通常它生成客户端的浏览器可以解释的 HTML 输出。</p><p>控制器主要用于处理用户请求，并且构建合适的模型并将其传递到视图呈现。</p><h3 id="DispatcherServlet"><a href="#DispatcherServlet" class="headerlink" title="DispatcherServlet"></a>DispatcherServlet</h3><p>Spring Web 模型-视图-控制（MVC）框架是围绕 DispatcherServlet 设计的，DispatcherServlet 用来处理所有的 HTTP 请求和响应。Spring Web MVC DispatcherServlet 的请求处理的工作流程：</p><p>下面是对应于 DispatcherServlet 传入 HTTP 请求的事件序列：</p><p>收到一个 HTTP 请求后，DispatcherServlet 根据 HandlerMapping 来选择并且调用适当的控制器。</p><p>控制器接受请求，并基于使用的 GET 或 POST 方法来调用适当的 service 方法。Service 方法将设置基于定义的业务逻辑的模型数据，并返回视图名称到 DispatcherServlet 中。</p><p>DispatcherServlet 会从 ViewResolver 获取帮助，为请求检取定义视图。</p><p>一旦确定视图，DispatcherServlet 将把模型数据传递给视图，最后呈现在浏览器中。<br>上面所提到的所有组件，即 HandlerMapping、Controller 和 ViewResolver 是 WebApplicationContext 的一部分，而 WebApplicationContext 是带有一些对 web 应用程序必要的额外特性的 ApplicationContext 的扩展。</p><h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2><p>一个数据库事务是一个被视为单一的工作单元的操作序列。这些操作应该要么完整地执行，要么完全不执行。事务管理是一个重要组成部分，RDBMS 面向企业应用程序，以确保数据完整性和一致性。事务的概念可以描述为具有以下四个关键属性说成是 ACID：</p><h3 id="org-springframework-transaction-PlatformTransactionManager"><a href="#org-springframework-transaction-PlatformTransactionManager" class="headerlink" title="org.springframework.transaction.PlatformTransactionManager"></a>org.springframework.transaction.PlatformTransactionManager</h3><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>原子性<br>事务应该当作一个单独单元的操作，这意味着整个序列操作要么是成功，要么是失败的。</li><li>一致性<br>这表示数据库的引用完整性的一致性，表中唯一的主键等。</li><li>隔离性<br>可能同时处理很多有相同的数据集的事务，每个事务应该与其他事务隔离，以防止数据损坏。</li><li>持久性<br>一个事务一旦完成全部操作后，这个事务的结果必须是永久性的，不能因系统故障而从数据库中删除。</li></ul><h3 id="编程式事务"><a href="#编程式事务" class="headerlink" title="编程式事务"></a>编程式事务</h3><p>这意味着你在编程的帮助下有管理事务。这给了你极大的灵活性，但却很难维护。</p><h3 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h3><p>这意味着你从业务代码中分离事务管理。你仅仅使用注释或 XML 配置来管理事务。</p><h3 id="事务管理的五大属性"><a href="#事务管理的五大属性" class="headerlink" title="事务管理的五大属性"></a>事务管理的五大属性</h3><ul><li>隔离级别</li><li>传播行为</li><li>是否只读</li><li>事务超时</li><li>回滚规则</li></ul><h2 id="JDBC-框架"><a href="#JDBC-框架" class="headerlink" title="JDBC 框架"></a>JDBC 框架</h2><p>在使用普通的 JDBC 数据库时，就会很麻烦的写不必要的代码来处理异常，打开和关闭数据库连接等。但 Spring JDBC 框架负责所有的低层细节，从开始打开连接，准备和执行 SQL 语句，处理异常，处理事务，到最后关闭连接。</p><p>所以当从数据库中获取数据时，你所做的是定义连接参数，指定要执行的 SQL 语句，每次迭代完成所需的工作。</p><p>Spring JDBC 提供几种方法和数据库中相应的不同的类与接口。我将给出使用 JdbcTemplate 类框架的经典和最受欢迎的方法。这是管理所有数据库通信和异常处理的中央框架类。</p><h3 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h3><p>JdbcTemplate 类执行 SQL 查询、更新语句和存储过程调用，执行迭代结果集和提取返回参数值。它也捕获 JDBC 异常并转换它们到 org.springframework.dao 包中定义的通用类、更多的信息、异常层次结构。</p><p>JdbcTemplate 类的实例是线程安全配置的。所以你可以配置 JdbcTemplate 的单个实例，然后将这个共享的引用安全地注入到多个 DAOs 中。</p><p>使用 JdbcTemplate 类时常见的做法是在你的 Spring 配置文件中配置数据源，然后共享数据源 bean 依赖注入到 DAO 类中，并在数据源的设值函数中创建了 JdbcTemplate。</p><h3 id="SimpleJdbcCall"><a href="#SimpleJdbcCall" class="headerlink" title="SimpleJdbcCall"></a>SimpleJdbcCall</h3><p>SimpleJdbcCall 类可以被用于调用一个包含 IN 和 OUT 参数的存储过程。你可以在处理任何一个 RDBMS 时使用这个方法，就像 Apache Derby， DB2， MySQL， Microsoft SQL Server， Oracle，和 Sybase。</p><h2 id="面向切面编程-AOP"><a href="#面向切面编程-AOP" class="headerlink" title="面向切面编程(AOP)"></a>面向切面编程(AOP)</h2><p>Spring 框架的一个关键组件是面向方面的编程(AOP)框架。面向方面的编程需要把程序逻辑分解成不同的部分称为所谓的关注点。跨一个应用程序的多个点的功能被称为横切关注点，这些横切关注点在概念上独立于应用程序的业务逻辑。有各种各样的常见的很好的方面的例子，如日志记录、审计、声明式事务、安全性和缓存等。</p><p>在 OOP 中，关键单元模块度是类，而在 AOP 中单元模块度是方面。依赖注入帮助你对应用程序对象相互解耦和 AOP 可以帮助你从它们所影响的对象中对横切关注点解耦。AOP 是像编程语言的触发物，如 Perl，.NET，Java 或者其他。</p><p>Spring AOP 模块提供拦截器来拦截一个应用程序，例如，当执行一个方法时，你可以在方法执行之前或之后添加额外的功能。</p><h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><ul><li>Aspect<br>一个模块具有一组提供横切需求的 APIs。例如，一个日志模块为了记录日志将被 AOP 方面调用。应用程序可以拥有任意数量的方面，这取决于需求。</li><li>Join point<br>在你的应用程序中它代表一个点，你可以在插件 AOP 方面。你也能说，它是在实际的应用程序中，其中一个操作将使用 Spring AOP 框架。</li><li>Advice<br>这是实际行动之前或之后执行的方法。这是在程序执行期间通过 Spring AOP 框架实际被调用的代码。</li><li>Pointcut<br>这是一组一个或多个连接点，通知应该被执行。你可以使用表达式或模式指定切入点正如我们将在 AOP 的例子中看到的。</li><li>Introduction<br>引用允许你添加新方法或属性到现有的类中。</li><li>Target object<br>被一个或者多个方面所通知的对象，这个对象永远是一个被代理对象。也称为被通知对象。</li><li>Weaving<br>Weaving 把方面连接到其它的应用程序类型或者对象上，并创建一个被通知的对象。这些可以在编译时，类加载时和运行时完成。</li></ul><h3 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h3><ul><li>前置通知<br>在一个方法执行之前，执行通知。</li><li>后置通知<br>在一个方法执行之后，不考虑其结果，执行通知。</li><li>返回后通知<br>在一个方法执行之后，只有在方法成功完成时，才能执行通知。</li><li>抛出异常后通知<br>在一个方法执行之后，只有在方法退出抛出异常时，才能执行通知。</li><li>环绕通知<br>在建议方法调用之前和之后，执行通知。</li></ul><h3 id="基于-AOP-的-XML-架构"><a href="#基于-AOP-的-XML-架构" class="headerlink" title="基于 AOP 的 XML 架构"></a>基于 AOP 的 XML 架构</h3><h3 id="基于-AOP-的-AspectJ"><a href="#基于-AOP-的-AspectJ" class="headerlink" title="基于 AOP 的 @AspectJ "></a>基于 AOP 的 <a href="/AspectJ">@AspectJ </a></h3><p><a href="/AspectJ">@AspectJ </a> 作为通过 Java 5 注释注释的普通的 Java 类，它指的是声明 aspects 的一种风格。通过在你的基于架构的 XML 配置文件中包含以下元素，<a href="/AspectJ">@AspectJ </a> 支持是可用的。</p><p>aop:aspectj-autoproxy&#x2F;</p><h2 id="基于注解的配置"><a href="#基于注解的配置" class="headerlink" title="基于注解的配置"></a>基于注解的配置</h2><p>从 Spring 2.5 开始就可以使用注解来配置依赖注入。而不是采用 XML 来描述一个 bean 连线，你可以使用相关类，方法或字段声明的注解，将 bean 配置移动到组件类本身。</p><p>在 XML 注入之前进行注解注入，因此后者的配置将通过两种方式的属性连线被前者重写。</p><p>注解连线在默认情况下在 Spring 容器中不打开。因此，在可以使用基于注解的连线之前，我们将需要在我们的 Spring 配置文件中启用它。</p><h3 id="Required-注解"><a href="#Required-注解" class="headerlink" title="@Required  注解"></a><a href="/Required">@Required </a> 注解</h3><p><a href="/Required">@Required </a> 注释应用于 bean 属性的 setter 方法，它表明受影响的 bean 属性在配置时必须放在 XML 配置文件中，否则容器就会抛出一个 BeanInitializationException 异常。下面显示的是一个使用 <a href="/Required">@Required </a> 注释的示例。</p><h3 id="Autowired-注解"><a href="#Autowired-注解" class="headerlink" title="@Autowired  注解"></a><a href="/Autowired">@Autowired </a> 注解</h3><p>使用 Spring 开发时，进行配置主要有两种方式，一是 xml 的方式，二是 java config 的方式。Spring 技术自身也在不断的发展和改变，从当前 Springboot 的火热程度来看，java config 的应用是越来越广泛了，在使用 java config 的过程当中，我们不可避免的会有各种各样的注释打交道，其中，我们使用最多的注释应该就是 <a href="/Autowired">@Autowired </a> 注释了。这个注释的功能就是为我们注入一个定义好的 bean。</p><p><a href="/Autowired">@Autowired </a> 注释的作用到底是什么？</p><p><a href="/Autowired">@Autowired </a> 这个注释我们经常在使用，现在，我想问的是，它的作用到底是什么呢?</p><p>首先，我们从所属范围来看，事实上这个注释是属于 Spring 的容器配置的一个注释，与它同属容器配置的注释还有：@Required,@Primary, <a href="/Qualifier">@Qualifier </a> 等等。因此 <a href="/Autowired">@Autowired </a> 注释是一个用于容器 ( container ) 配置的注释。</p><p>其次，我们可以直接从字面意思来看，<a href="/autowired">@autowired </a> 注释来源于英文单词 autowire,这个单词的意思是自动装配的意思。自动装配又是什么意思？这个词语本来的意思是指的一些工业上的用机器代替人口，自动将一些需要完成的组装任务，或者别的一些任务完成。而在 Spring 的世界当中，自动装配指的就是使用将 Spring 容器中的 bean 自动的和我们需要这个 bean 的类组装在一起。</p><h3 id="Qualifier-注解"><a href="#Qualifier-注解" class="headerlink" title="@Qualifier  注解"></a><a href="/Qualifier">@Qualifier </a> 注解</h3><p>可能会有这样一种情况，当你创建多个具有相同类型的 bean 时，并且想要用一个属性只为它们其中的一个进行装配，在这种情况下，你可以使用 <a href="/Qualifier">@Qualifier </a> 注释和 <a href="/Autowired">@Autowired </a> 注释通过指定哪一个真正的 bean 将会被装配来消除混乱。</p><h3 id="JSR-250-注解"><a href="#JSR-250-注解" class="headerlink" title="JSR-250 注解"></a>JSR-250 注解</h3><p>Spring 还使用基于 JSR-250 注释，它包括 @PostConstruct， <a href="/PreDestroy">@PreDestroy </a> 和 <a href="/Resource">@Resource </a> 注释。因为你已经有了其他的选择，尽管这些注释并不是真正所需要的，但是关于它们仍然让我给出一个简短的介绍。</p><ul><li><a href="/PostConstruct">@PostConstruct </a> 注释 和 <a href="/PreDestroy">@PreDestroy </a> 注解<br>为了定义一个 bean 的安装和卸载，我们使用 init-method 和&#x2F;或 destroy-method 参数简单的声明一下 。init-method 属性指定了一个方法，该方法在 bean 的实例化阶段会立即被调用。同样地，destroy-method 指定了一个方法，该方法只在一个 bean 从容器中删除之前被调用。<br>你可以使用 <a href="/PostConstruct">@PostConstruct </a> 注释作为初始化回调函数的一个替代，<a href="/PreDestroy">@PreDestroy </a> 注释作为销毁回调函数的一个替代，其解释如下示例所示。</li><li><a href="/Resource">@Resource </a> 注解<br>你可以在字段中或者 setter 方法中使用 <a href="/Resource">@Resource </a> 注释，它和在 Java EE 5 中的运作是一样的。<a href="/Resource">@Resource </a> 注释使用一个 ‘name’ 属性，该属性以一个 bean 名称的形式被注入。</li></ul><h3 id="基于-Java-的配置"><a href="#基于-Java-的配置" class="headerlink" title="基于 Java 的配置"></a>基于 Java 的配置</h3><p>到目前为止，你已经看到如何使用 XML 配置文件来配置 Spring bean。如果你熟悉使用 XML 配置，那么我会说，不需要再学习如何进行基于 Java 的配置是，因为你要达到相同的结果，可以使用其他可用的配置。</p><p>基于 Java 的配置选项，可以使你在不用配置 XML 的情况下编写大多数的 Spring，但是一些有帮助的基于 Java 的注解，解释如下：</p><ul><li><a href="/Configuration">@Configuration </a> 和 <a href="/Bean">@Bean </a> 注解<br>带有 <a href="/Configuration">@Configuration </a> 的注解类表示这个类可以使用 Spring IoC 容器作为 bean 定义的来源。<a href="/Bean">@Bean </a> 注解告诉 Spring，一个带有 <a href="/Bean">@Bean </a> 的注解方法将返回一个对象，该对象应该被注册为在 Spring 应用程序上下文中的 bean。<ul><li>initMethod()</li><li>destroyMethod()</li></ul></li><li><a href="/Import">@Import </a> 注解<br><a href="/import">@import </a> 注解允许从另一个配置类中加载 <a href="/Bean">@Bean </a> 定义。</li><li><a href="/Scope">@Scope </a> 注解<br>默认范围是单实例，但是你可以重写带有 <a href="/Scope">@Scope </a> 注解的该方法。</li></ul><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><p>你已经看到了在所有章节中 Spring 的核心是 ApplicationContext，它负责管理 beans 的完整生命周期。当加载 beans 时，ApplicationContext 发布某些类型的事件。例如，当上下文启动时，ContextStartedEvent 发布，当上下文停止时，ContextStoppedEvent 发布。</p><p>通过 ApplicationEvent 类和 ApplicationListener 接口来提供在 ApplicationContext 中处理事件。如果一个 bean 实现 ApplicationListener，那么每次 ApplicationEvent 被发布到 ApplicationContext 上，那个 bean 会被通知。</p><p>由于 Spring 的事件处理是单线程的，所以如果一个事件被发布，直至并且除非所有的接收者得到的该消息，该进程被阻塞并且流程将不会继续。因此，如果事件处理被使用，在设计应用程序时应注意。</p><ul><li>ContextRefreshedEvent<br>ApplicationContext 被初始化或刷新时，该事件被发布。这也可以在 ConfigurableApplicationContext 接口中使用 refresh() 方法来发生。</li><li></li></ul><p>ContextStartedEvent</p><p>当使用 ConfigurableApplicationContext 接口中的 start() 方法启动 ApplicationContext 时，该事件被发布。你可以调查你的数据库，或者你可以在接受到这个事件后重启任何停止的应用程序。</p><ul><li>ContextStoppedEvent<br>当使用 ConfigurableApplicationContext 接口中的 stop() 方法停止 ApplicationContext 时，发布这个事件。你可以在接受到这个事件后做必要的清理的工作。</li><li>ContextClosedEvent<br>当使用 ConfigurableApplicationContext 接口中的 close() 方法关闭 ApplicationContext 时，该事件被发布。一个已关闭的上下文到达生命周期末端；它不能被刷新或重启。</li><li>RequestHandledEvent<br>这是一个 web-specific 事件，告诉所有 bean HTTP 请求已经被服务。</li></ul><h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3>]]></content>
    
    
    <categories>
      
      <category>Spring知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React 入门</title>
    <link href="/2022/04/25/yuque/React%20%E5%85%A5%E9%97%A8/"/>
    <url>/2022/04/25/yuque/React%20%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p>React 相关教程</p><h2 id="react-学习过程中，相关的文档。"><a href="#react-学习过程中，相关的文档。" class="headerlink" title="react 学习过程中，相关的文档。"></a>react 学习过程中，相关的文档。</h2><p><a href="https://react.docschina.org/docs/getting-started.html">https://react.docschina.org/docs/getting-started.html</a></p><p><a href="https://docs.npmjs.com/getting-started">https://docs.npmjs.com/getting-started</a></p><p><a href="https://yarn.bootcss.com/docs/getting-started/">https://yarn.bootcss.com/docs/getting-started/</a></p><p><a href="https://ant.design/docs/react/practical-projects-cn">https://ant.design/docs/react/practical-projects-cn</a></p><p><a href="https://dvajs.com/guide/getting-started.html">https://dvajs.com/guide/getting-started.html</a></p><p><a href="https://umijs.org/zh-CN/docs/getting-started">https://umijs.org/zh-CN/docs/getting-started</a></p><p><a href="https://pro.ant.design/docs/getting-started-cn">https://pro.ant.design/docs/getting-started-cn</a></p><p>循序渐进，从入门到入土。</p><h2 id="react-基础教程"><a href="#react-基础教程" class="headerlink" title="react 基础教程"></a>react 基础教程</h2><p><a href="https://www.bilibili.com/video/BV1wy4y1D7JT">https://www.bilibili.com/video/BV1wy4y1D7JT</a></p>]]></content>
    
    
    <categories>
      
      <category>前端教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QLExpress</title>
    <link href="/2022/04/25/yuque/QLExpress/"/>
    <url>/2022/04/25/yuque/QLExpress/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/alibaba/QLExpress">https://github.com/alibaba/QLExpress</a></p><h2 id="性能上"><a href="#性能上" class="headerlink" title="性能上:"></a>性能上:</h2><p>大众化工具&gt;小众化工具(内部工具实现上有很多可以优化的点)</p><p>强类型 &gt; 弱类型（在两者都很成熟稳定的情况下）</p><h2 id="稳定性上"><a href="#稳定性上" class="headerlink" title="稳定性上:"></a>稳定性上:</h2><p>简单的设计原理&gt;强大的开源社区&gt;小众化工具引擎</p><p>语法的灵活性:</p><p>代码越多、越复杂的实现方式功能会涵盖越多，语法糖、容错性、兼容性</p>]]></content>
    
    
    <categories>
      
      <category>Java工具教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QLExpress</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目</title>
    <link href="/2022/04/25/yuque/%E9%A1%B9%E7%9B%AE/"/>
    <url>/2022/04/25/yuque/%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<p>项目<br>四川大学华西第二医院数据中心项目<br>数据质量模块前后台开发。</p><p>重庆市中医院医院信息平台数据中心建设<br>数据质量模块前后台差异化需求开发。</p><p>广东省卫生和计划生育委员会全民健康信息平台项目<br>数据采集平台前后台差异化需求开发。</p><p>国家卫生健康委员会统计信息中心卫生信息 OID 项目<br>主导后台开发，多模块前后台开发。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Oh My Zsh 安装</title>
    <link href="/2022/04/25/yuque/Oh%20My%20Zsh%20%E5%AE%89%E8%A3%85/"/>
    <url>/2022/04/25/yuque/Oh%20My%20Zsh%20%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>Oh My Zsh 快速安装</p><h2 id="安装-zsh"><a href="#安装-zsh" class="headerlink" title="安装 zsh"></a>安装 zsh</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install zsh<br></code></pre></td></tr></table></figure><h2 id="将-shell-改为-zsh"><a href="#将-shell-改为-zsh" class="headerlink" title="将 shell 改为 zsh"></a>将 shell 改为 zsh</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">chsh -s /bin/zsh<br></code></pre></td></tr></table></figure><h2 id="接下来下载-oh-my-zsh"><a href="#接下来下载-oh-my-zsh" class="headerlink" title="接下来下载 oh my zsh"></a>接下来下载 oh my zsh</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://gitee.com/mirrors/oh-my-zsh.git<br></code></pre></td></tr></table></figure><h2 id="按照-README-md，手动安装。安装好了，重新打开终端。"><a href="#按照-README-md，手动安装。安装好了，重新打开终端。" class="headerlink" title="按照 README.md，手动安装。安装好了，重新打开终端。"></a>按照 README.md，手动安装。安装好了，重新打开终端。</h2><h2 id="推荐两个插件"><a href="#推荐两个插件" class="headerlink" title="推荐两个插件"></a>推荐两个插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="hljs-variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions<br>git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="hljs-variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting<br>nano ~/.zshrc<br></code></pre></td></tr></table></figure><p>找到 plugins&#x3D;(git)，改为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">plugins=(git zsh-autosuggestions zsh-syntax-highlighting)<br></code></pre></td></tr></table></figure><p>保存后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure><h2 id="主题的安装"><a href="#主题的安装" class="headerlink" title="主题的安装"></a>主题的安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> --depth=1 https://gitee.com/romkatv/powerlevel10k.git <span class="hljs-variable">$&#123;ZSH_CUSTOM:-<span class="hljs-variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k<br>nano ~/.zshrc<br></code></pre></td></tr></table></figure><p>找到 ZSH_THEME，改为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ZSH_THEME=<span class="hljs-string">&quot;powerlevel10k/powerlevel10k&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>安装教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bash</tag>
      
      <tag>zsh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Npm和Yarn配置加速镜像</title>
    <link href="/2022/04/25/yuque/Npm%E5%92%8CYarn%E9%85%8D%E7%BD%AE%E5%8A%A0%E9%80%9F%E9%95%9C%E5%83%8F/"/>
    <url>/2022/04/25/yuque/Npm%E5%92%8CYarn%E9%85%8D%E7%BD%AE%E5%8A%A0%E9%80%9F%E9%95%9C%E5%83%8F/</url>
    
    <content type="html"><![CDATA[<p>Npm 和 Yarn 配置加速镜像</p><h2 id="Npm-配置"><a href="#Npm-配置" class="headerlink" title="Npm 配置"></a>Npm 配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 持久使用</span><br>npm config <span class="hljs-built_in">set</span> registry https://registry.npm.taobao.org<br><span class="hljs-comment"># 配置后可通过下面方式来验证是否成功</span><br>npm config get registry<br><span class="hljs-comment"># 或</span><br>npm info express<br></code></pre></td></tr></table></figure><h2 id="通过-npm-安装-yarn"><a href="#通过-npm-安装-yarn" class="headerlink" title="通过 npm 安装 yarn"></a>通过 npm 安装 yarn</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g yarn<br></code></pre></td></tr></table></figure><h2 id="Yarn-配置"><a href="#Yarn-配置" class="headerlink" title="Yarn 配置"></a>Yarn 配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 持久使用</span><br>yarn config <span class="hljs-built_in">set</span> registry https://registry.npm.taobao.org<br><span class="hljs-comment"># 配置后可通过下面方式来验证是否成功</span><br>yarn config get registry<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>镜像加速</category>
      
    </categories>
    
    
    <tags>
      
      <tag>npm</tag>
      
      <tag>yarn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NIO</title>
    <link href="/2022/04/25/yuque/NIO/"/>
    <url>/2022/04/25/yuque/NIO/</url>
    
    <content type="html"><![CDATA[<p>java.nio<br><a href="https://www.yuque.com/attachments/yuque/0/2022/xmind/28199557/1650900937005-272d1fde-9b02-44a9-a94b-5f0f836461c2.xmind?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2022/xmind/28199557/1650900937005-272d1fde-9b02-44a9-a94b-5f0f836461c2.xmind%22,%22name%22:%22NIO.xmind%22,%22size%22:4859164,%22type%22:%22%22,%22ext%22:%22xmind%22,%22status%22:%22done%22,%22taskId%22:%22u4ca91284-6480-407a-958a-231546ec002%22,%22taskType%22:%22transfer%22,%22id%22:%22u2868a093%22,%22card%22:%22file%22%7D">NIO.xmind</a></p><h2 id="1、Java-NIO-简介"><a href="#1、Java-NIO-简介" class="headerlink" title="1、Java NIO 简介"></a>1、Java NIO 简介</h2><p>Java NIO（New IO）是从 Java 1.4 版本开始引入的<br>一个新的 IO API，可以替代标准的 Java IO API。<br>NIO 与原来的 IO 有同样的作用和目的，但是使用<br>的方式完全不同，NIO 支持面向缓冲区的、基于<br>通道的 IO 操作。NIO 将以更加高效的方式进行文<br>件的读写操作。</p><h2 id="2、Java-NIO-与-IO-的主要区别"><a href="#2、Java-NIO-与-IO-的主要区别" class="headerlink" title="2、Java NIO 与 IO 的主要区别"></a>2、Java NIO 与 IO 的主要区别</h2><p>IO | NIO<br>面向流(Stream Oriented) | 面向缓冲区(Buffer Oriented)<br>阻塞 IO(Blocking IO) | 非阻塞 IO(Non Blocking IO)<br>(无) | 选择器(Selectors)</p><h2 id="3、缓冲区-Buffer-和通道-Channel"><a href="#3、缓冲区-Buffer-和通道-Channel" class="headerlink" title="3、缓冲区(Buffer)和通道(Channel)"></a>3、缓冲区(Buffer)和通道(Channel)</h2><p>Java NIO 系统的核心在于：通道(Channel)和缓冲区 (Buffer)。通道表示打开到 IO 设备(例如：文件、 套接字)的连接。若需要使用 NIO 系统，需要获取 用于连接 IO 设备的通道以及用于容纳数据的缓冲 区。然后操作缓冲区，对数据进行处理。</p><h3 id="简而言之，Channel-负责传输，-Buffer-负责存储"><a href="#简而言之，Channel-负责传输，-Buffer-负责存储" class="headerlink" title="简而言之，Channel 负责传输， Buffer 负责存储"></a>简而言之，Channel 负责传输， Buffer 负责存储</h3><h3 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h3><p>缓冲区（Buffer）：一个用于特定基本数据类 型的容器。由 java.nio 包定义的，所有缓冲区 都是 Buffer 抽象类的子类。<br>Java NIO 中的 Buffer 主要用于与 NIO 通道进行 交互，数据是从通道读入缓冲区，从缓冲区写 入通道中的 。<br>Buffer 就像一个数组，可以保存多个相同类型的数据。根 据数据类型不同(boolean 除外) ，有以下 Buffer 常用子类：<br>ByteBuffer<br>CharBuffer<br>ShortBuffer<br>IntBuffer<br>LongBuffer<br>FloatBuffer<br>DoubleBuffer<br>上述 Buffer 类 他们都采用相似的方法进行管理数据，只是各自 管理的数据类型不同而已。都是通过如下方法获取一个 Buffer 对象：<br>static XxxBuffer allocate(int capacity) : 创建一个容量为 capacity 的 XxxBuffer 对象</p><ul><li>缓冲区的基本属性<br>Buffer 中的重要概念：<br>容量 (capacity) ：表示 Buffer 最大数据容量，缓冲区容量不能为负，并且创 建后不能更改。<br>限制 (limit)：第一个不应该读取或写入的数据的索引，即位于 limit 后的数据 不可读写。缓冲区的限制不能为负，并且不能大于其容量。<br>位置 (position)：下一个要读取或写入的数据的索引。缓冲区的位置不能为 负，并且不能大于其限制<br>标记 (mark)与重置 (reset)：标记是一个索引，通过 Buffer 中的 mark() 方法 指定 Buffer 中一个特定的 position，之后可以通过调用 reset() 方法恢复到这 个 position.<br>标记、位置、限制、容量遵守以下不变式： 0 &lt;&#x3D; mark &lt;&#x3D; position &lt;&#x3D; limit &lt;&#x3D; capacity</li><li>Buffer 的常用方法</li><li>缓冲区的数据操作<br>Buffer 所有子类提供了两个用于数据操作的方法：get() 与 put() 方法<br>获取 Buffer 中的数据<br>get() ：读取单个字节<br>get(byte[] dst)：批量读取多个字节到 dst 中<br>get(int index)：读取指定索引位置的字节(不会移动 position)<br>放入数据到 Buffer 中<br>put(byte b)：将给定单个字节写入缓冲区的当前位置<br>put(byte[] src)：将 src 中的字节写入缓冲区的当前位置<br>put(int index, byte b)：将指定字节写入缓冲区的索引位置(不会移动 position)</li><li>直接与非直接缓冲区<br>字节缓冲区要么是直接的，要么是非直接的。如果为直接字节缓冲区，则 Java 虚拟机会尽最大努力直接在 此缓冲区上执行本机 I&#x2F;O 操作。也就是说，在每次调用基础操作系统的一个本机 I&#x2F;O 操作之前（或之后）， 虚拟机都会尽量避免将缓冲区的内容复制到中间缓冲区中（或从中间缓冲区中复制内容）。<br>直接字节缓冲区可以通过调用此类的 allocateDirect() 工厂方法来创建。此方法返回的缓冲区进行分配和取消 分配所需成本通常高于非直接缓冲区。直接缓冲区的内容可以驻留在常规的垃圾回收堆之外，因此，它们对 应用程序的内存需求量造成的影响可能并不明显。所以，建议将直接缓冲区主要分配给那些易受基础系统的 本机 I&#x2F;O 操作影响的大型、持久的缓冲区。一般情况下，最好仅在直接缓冲区能在程序性能方面带来明显好 处时分配它们。<br>直接字节缓冲区还可以通过 FileChannel 的 map() 方法 将文件区域直接映射到内存中来创建。该方法返回 MappedByteBuffer 。Java 平台的实现有助于通过 JNI 从本机代码创建直接字节缓冲区。如果以上这些缓冲区 中的某个缓冲区实例指的是不可访问的内存区域，则试图访问该区域不会更改该缓冲区的内容，并且将会在 访问期间或稍后的某个时间导致抛出不确定的异常。<br>字节缓冲区是直接缓冲区还是非直接缓冲区可通过调用其 isDirect() 方法来确定。提供此方法是为了能够在 性能关键型代码中执行显式缓冲区管理。<ul><li>非直接缓冲区</li><li>直接缓冲区</li></ul></li></ul><h3 id="通道"><a href="#通道" class="headerlink" title="通道"></a>通道</h3><p>通道（Channel）：由 java.nio.channels 包定义 的。Channel 表示 IO 源与目标打开的连接。 Channel 类似于传统的“流”。只不过 Channel 本身不能直接访问数据，Channel 只能与 Buffer 进行交互。<br>Java 为 Channel 接口提供的最主要实现类如下：<br>FileChannel：用于读取、写入、映射和操作文件的通道。<br>DatagramChannel：通过 UDP 读写网络中的数据通道。<br>SocketChannel：通过 TCP 读写网络中的数据。<br>ServerSocketChannel：可以监听新进来的 TCP 连接，对每一个新进来 的连接都会创建一个 SocketChannel。</p><ul><li>通道</li><li>通道</li><li>通道</li><li>获取通道<br>获取通道的一种方式是对支持通道的对象调用 getChannel() 方法。支持通道的类如下：<br>FileInputStream<br>FileOutputStream<br>RandomAccessFile<br>DatagramSocket<br>Socket<br>ServerSocket<br>获取通道的其他方式是使用 Files 类的静态方法 newByteChannel() 获 取字节通道。或者通过通道的静态方法 open() 打开并返回指定通道。</li><li>通道的数据传输</li><li>分散(Scatter)和聚集(Gather)<ul><li>分散读取（Scattering Reads）<br>是指从 Channel 中读取的数据“分 散”到多个 Buffer 中。<br>注意：按照缓冲区的顺序，从 Channel 中读取的数据依次将 Buffer 填满。</li><li>聚集写入（Gathering Writes）<br>是指将多个 Buffer 中的数据“聚集” 到 Channel。<br>注意：按照缓冲区的顺序，写入 position 和 limit 之间的数据到 Channel 。</li></ul></li><li>transferFrom()<br>将数据从源通道传输到其他 Channel 中：</li><li>transferTo()<br>将数据从源通道传输到其他 Channel 中：</li></ul><h2 id="4、文件通道-FileChannel"><a href="#4、文件通道-FileChannel" class="headerlink" title="4、文件通道(FileChannel)"></a>4、文件通道(FileChannel)</h2><h3 id="FileChannel-的常用方法"><a href="#FileChannel-的常用方法" class="headerlink" title="FileChannel 的常用方法"></a>FileChannel 的常用方法</h3><h2 id="5、NIO-的非阻塞式网络通信"><a href="#5、NIO-的非阻塞式网络通信" class="headerlink" title="5、NIO 的非阻塞式网络通信"></a>5、NIO 的非阻塞式网络通信</h2><p>传统的 IO 流都是阻塞式的。也就是说，当一个线程调用 read() 或 write() 时，该线程被阻塞，直到有一些数据被读取或写入，该线程在此期间不 能执行其他任务。因此，在完成网络通信进行 IO 操作时，由于线程会 阻塞，所以服务器端必须为每个客户端都提供一个独立的线程进行处理， 当服务器端需要处理大量客户端时，性能急剧下降。<br>Java NIO 是非阻塞模式的。当线程从某通道进行读写数据时，若没有数 据可用时，该线程可以进行其他任务。线程通常将非阻塞 IO 的空闲时 间用于在其他通道上执行 IO 操作，所以单独的线程可以管理多个输入 和输出通道。因此，NIO 可以让服务器端使用一个或有限几个线程来同 时处理连接到服务器端的所有客户端。</p><h3 id="1、选择器-Selector"><a href="#1、选择器-Selector" class="headerlink" title="1、选择器(Selector)"></a>1、选择器(Selector)</h3><p>选择器（Selector） 是 SelectableChannle 对象的多路复用器，Selector 可 以同时监控多个 SelectableChannel 的 IO 状况，也就是说，利用 Selector 可使一个单独的线程管理多个 Channel。Selector 是非阻塞 IO 的核心。</p><ul><li>选择器（Selector）的应用<ul><li>子主题 1</li><li>子主题 2</li></ul></li><li>SelectionKey<ul><li>子主题 1</li><li>子主题 2</li></ul></li><li>Selector 的常用方法</li></ul><h3 id="2、SocketChannel、ServerSocketChannel、DatagramChannel"><a href="#2、SocketChannel、ServerSocketChannel、DatagramChannel" class="headerlink" title="2、SocketChannel、ServerSocketChannel、DatagramChannel"></a>2、SocketChannel、ServerSocketChannel、DatagramChannel</h3><ul><li>SocketChannel<br>Java NIO 中的 SocketChannel 是一个连接到 TCP 网 络套接字的通道。<br>操作步骤：<br>打开 SocketChannel<br>读写数据<br>关闭 SocketChannel<br>Java NIO 中的 ServerSocketChannel 是一个可以 监听新进来的 TCP 连接的通道，就像标准 IO 中 的 ServerSocket 一样。</li><li>DatagramChannel<br>Java NIO 中的 DatagramChannel 是一个能收发 UDP 包的通道。<br>操作步骤：<br>打开 DatagramChannel<br>接收&#x2F;发送数据</li></ul><h2 id="6、管道-Pipe"><a href="#6、管道-Pipe" class="headerlink" title="6、管道(Pipe)"></a>6、管道(Pipe)</h2><p>Java NIO 管道是 2 个线程之间的单向数据连接。 Pipe 有一个 source 通道和一个 sink 通道。数据会 被写到 sink 通道，从 source 通道读取。</p><h3 id="向管道写数据"><a href="#向管道写数据" class="headerlink" title="向管道写数据"></a>向管道写数据</h3><h3 id="从管道读取数据"><a href="#从管道读取数据" class="headerlink" title="从管道读取数据"></a>从管道读取数据</h3><h2 id="7、Java-NIO2-Path、Paths-与-Files"><a href="#7、Java-NIO2-Path、Paths-与-Files" class="headerlink" title="7、Java NIO2 (Path、Paths 与 Files )"></a>7、Java NIO2 (Path、Paths 与 Files )</h2><p>随着 JDK 7 的发布，Java 对 NIO 进行了极大的扩 展，增强了对文件处理和文件系统特性的支持， 以至于我们称他们为 NIO.2。因为 NIO 提供的 一些功能，NIO 已经成为文件处理中越来越重 要的部分。</p><h3 id="Path-与-Paths"><a href="#Path-与-Paths" class="headerlink" title="Path 与 Paths"></a>Path 与 Paths</h3><p>java.nio.file.Path 接口代表一个平台无关的平台路径，描述了目 录结构中文件的位置。</p><h3 id="Files-类"><a href="#Files-类" class="headerlink" title="Files 类"></a>Files 类</h3><p>java.nio.file.Files 用于操作文件或目录的工具类。</p><h3 id="自动资源管理"><a href="#自动资源管理" class="headerlink" title="自动资源管理"></a>自动资源管理</h3><p>Java 7 增加了一个新特性，该特性提供了另外 一种管理资源的方式，这种方式能自动关闭文 件。这个特性有时被称为自动资源管理 (Automatic Resource Management, ARM)， 该特 性以 try 语句的扩展版为基础。自动资源管理 主要用于，当不再需要文件（或其他资源）时， 可以防止无意中忘记释放它们。</p>]]></content>
    
    
    <categories>
      
      <category>Java知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL新建用户及用户授权</title>
    <link href="/2022/04/25/yuque/MySQL%E6%96%B0%E5%BB%BA%E7%94%A8%E6%88%B7%E5%8F%8A%E7%94%A8%E6%88%B7%E6%8E%88%E6%9D%83/"/>
    <url>/2022/04/25/yuque/MySQL%E6%96%B0%E5%BB%BA%E7%94%A8%E6%88%B7%E5%8F%8A%E7%94%A8%E6%88%B7%E6%8E%88%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<p>MySQL 新建用户及用户授权 SQL 语句。</p><h2 id="必要步骤"><a href="#必要步骤" class="headerlink" title="必要步骤"></a>必要步骤</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">use mysql;<br></code></pre></td></tr></table></figure><h2 id="用户增删改查"><a href="#用户增删改查" class="headerlink" title="用户增删改查"></a>用户增删改查</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 增<br># 指定ip：<span class="hljs-number">192.118</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span>的mjj用户登录<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;alex&#x27;</span>@<span class="hljs-string">&#x27;192.118.1.1&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123&#x27;</span>;<br># 指定ip：<span class="hljs-number">192.118</span><span class="hljs-number">.1</span>.开头的mjj用户登录<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;alex&#x27;</span>@<span class="hljs-string">&#x27;192.118.1.%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123&#x27;</span>;<br># 指定任何ip的mjj用户登录<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;alex&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123&#x27;</span>;<br><br># 删<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;IP地址&#x27;</span>;<br><br># 改用户<br>rename <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;IP地址&#x27;</span> <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;新用户名&#x27;</span>@<span class="hljs-string">&#x27;IP地址&#x27;</span>;<br><br># 改密码<br><span class="hljs-keyword">set</span> password <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;IP地址&#x27;</span><span class="hljs-operator">=</span>Password(<span class="hljs-string">&#x27;新密码&#x27;</span>);<br><br># 查<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">User</span>,Host <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span>;<br></code></pre></td></tr></table></figure><h2 id="当前的用户授权管理"><a href="#当前的用户授权管理" class="headerlink" title="当前的用户授权管理"></a>当前的用户授权管理</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 查看权限<br><span class="hljs-keyword">show</span> grants <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;用户&#x27;</span>@<span class="hljs-string">&#x27;IP地址&#x27;</span>;<br><br># 授予root账户远程访问权限<br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br><br># 授权 mjj用户仅对db1.t1文件有查询、插入和更新的操作<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span> ,<span class="hljs-keyword">insert</span>,<span class="hljs-keyword">update</span> <span class="hljs-keyword">on</span> db1.t1 <span class="hljs-keyword">to</span> &quot;alex&quot;@<span class="hljs-string">&#x27;%&#x27;</span>;<br><br># 表示有所有的权限，除了<span class="hljs-keyword">grant</span>这个命令，这个命令是root才有的。mjj用户对db1下的t1文件有任意操作<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> privileges  <span class="hljs-keyword">on</span> db1.t1 <span class="hljs-keyword">to</span> &quot;alex&quot;@<span class="hljs-string">&#x27;%&#x27;</span>;<br># mjj用户对db1数据库中的文件执行任何操作<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> privileges  <span class="hljs-keyword">on</span> db1.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> &quot;alex&quot;@<span class="hljs-string">&#x27;%&#x27;</span>;<br># mjj用户对所有数据库中文件有任何操作<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> privileges  <span class="hljs-keyword">on</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span>  <span class="hljs-keyword">to</span> &quot;alex&quot;@<span class="hljs-string">&#x27;%&#x27;</span>;<br><br>#取消权限<br><br># 取消mjj用户对db1的t1文件的任意操作<br><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> db1.t1 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;alex&#x27;</span>@&quot;%&quot;;<br><br># 取消来自远程服务器的mjj用户对数据库db1的所有表的所有权限<br><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> db1.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;alex&#x27;</span>@&quot;%&quot;;<br><br># 取消来自远程服务器的mjj用户所有数据库的所有的表的权限<br><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">all</span> privileges <span class="hljs-keyword">on</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;alex&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微软输入法小鹤双拼快速配置</title>
    <link href="/2022/04/25/yuque/%E5%BE%AE%E8%BD%AF%E8%BE%93%E5%85%A5%E6%B3%95%E5%B0%8F%E9%B9%A4%E5%8F%8C%E6%8B%BC%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/04/25/yuque/%E5%BE%AE%E8%BD%AF%E8%BE%93%E5%85%A5%E6%B3%95%E5%B0%8F%E9%B9%A4%E5%8F%8C%E6%8B%BC%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>微软输入法小鹤双拼快速配置</p><ol><li><code>win + R</code>，输入 <code>regedit</code>，打开注册表</li><li>找到 <code>计算机\HKEY_CURRENT_USER\Software\Microsoft\InputMethod\Settings\CHS</code> 项</li><li>新建一个名为 <code>UserDefinedDoublePinyinScheme0</code> 的字符串值，值为 <code>小鹤双拼*2*^*iuvdjhcwfg^xmlnpbksqszxkrltvyovt</code></li><li>打开微软拼音输入法-常规，把 小鹤双拼 设置为双拼的默认选择即可。</li></ol><h2 id="快速方案"><a href="#快速方案" class="headerlink" title="快速方案"></a>快速方案</h2><p>1、安装注册表文件（新建文件 <code>小鹤双拼.reg</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">Windows Registry Editor Version 5.00<br>[HKEY_CURRENT_USER\Software\Microsoft\InputMethod\Settings\CHS]<br><span class="hljs-string">&quot;UserDefinedDoublePinyinScheme0&quot;</span>=<span class="hljs-string">&quot;小鹤双拼*2*^*iuvdjhcwfg^xmlnpbksqszxkrltvyovt&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Windows教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
      <tag>input</tag>
      
      <tag>小鹤双拼</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven打包时打入本地Jar包</title>
    <link href="/2022/04/25/yuque/Maven%E6%89%93%E5%8C%85%E6%97%B6%E6%89%93%E5%85%A5%E6%9C%AC%E5%9C%B0Jar%E5%8C%85/"/>
    <url>/2022/04/25/yuque/Maven%E6%89%93%E5%8C%85%E6%97%B6%E6%89%93%E5%85%A5%E6%9C%AC%E5%9C%B0Jar%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<p>在开发项目时，有些 jar 包是非 maven 仓库提供的第三方 jar 包，比如七牛的 sdk，阿里的 sdk 等等。<br>在项目开发时，有以下两个方案来引入、打包。</p><h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><p>jar 包路径：<code>src/main/resources/lib/*.jar</code></p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>jar 包路径：<code>src/main/resources/lib/cachejdbc.jar</code></p><p>jar 包以 scope 为 system 的方式导入 pom 文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.intersys.jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>CacheDriver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2016.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>system<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">systemPath</span>&gt;</span>$&#123;project.basedir&#125;/src/main/resources/lib/cachejdbc.jar<span class="hljs-tag">&lt;/<span class="hljs-name">systemPath</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="jar-包配置"><a href="#jar-包配置" class="headerlink" title="jar 包配置"></a>jar 包配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>repackage<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">includeSystemScope</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">includeSystemScope</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="war-包配置"><a href="#war-包配置" class="headerlink" title="war 包配置"></a>war 包配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-war-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">webResources</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources/lib/<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">targetPath</span>&gt;</span>WEB-INF/lib<span class="hljs-tag">&lt;/<span class="hljs-name">targetPath</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.jar<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">webResources</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Maven相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MapStruct</title>
    <link href="/2022/04/25/yuque/MapStruct/"/>
    <url>/2022/04/25/yuque/MapStruct/</url>
    
    <content type="html"><![CDATA[<ul><li>VO（View Object）：视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。</li><li>DTO（Data Transfer Object）：数据传输对象，这个概念来源于 J2EE 的设计模式，原来的目的是为了 EJB 的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。</li><li>BO（Business Object）：业务对象， 由 Service 层输出的封装业务逻辑的对象。</li><li>PO（Persistent Object）：持久化对象，它跟持久层（通常是关系型数据库）的数据结构形成一一对应的映射关系，如果持久层是关系型数据库，那么，数据表中的每个字段（或若干个）就对应 PO 的一个（或若干个）属性。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1650899793213-5e9739f6-4a3b-4f50-a937-c2cc3b026080.png#clientId=u914d9efd-401d-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=uc98fe514&margin=%5Bobject%20Object%5D&name=vo-dto-bo-po.png&originHeight=843&originWidth=603&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=46894&status=done&style=none&taskId=uc77b9714-c68f-4706-9dd7-9b0829e410b&title=" alt="vo-dto-bo-po.png"></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="User"><a href="#User" class="headerlink" title="User"></a>User</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * User</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> &lt;a href =&#x27;jxh98@foxmail.com&#x27;&gt;Josway&lt;/a&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/8/28</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String gender;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Person"><a href="#Person" class="headerlink" title="Person"></a>Person</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Person</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> &lt;a href =&#x27;jxh98@foxmail.com&#x27;&gt;Josway&lt;/a&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/8/28</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-keyword">private</span> Date birthday;<br>    <span class="hljs-keyword">private</span> User user;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="PersonDTO"><a href="#PersonDTO" class="headerlink" title="PersonDTO"></a>PersonDTO</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * PersonDTO</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> &lt;a href =&#x27;jxh98@foxmail.com&#x27;&gt;Josway&lt;/a&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/8/28</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonDTO</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 对应 Person.user.age</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 对应 Person.user.gender</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 与 DO 里面的字段名称(birthDay)不一致</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Date birth;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 对 DO 里面的字段(birthDay)进行拓展,dateFormat 的形式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String birthDateFormat;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 对 DO 里面的字段(birthDay)进行拓展,expression 的形式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String birthExpressionFormat;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="PersonConverter"><a href="#PersonConverter" class="headerlink" title="PersonConverter"></a>PersonConverter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.mapstruct.Mapper;<br><span class="hljs-keyword">import</span> org.mapstruct.Mapping;<br><span class="hljs-keyword">import</span> org.mapstruct.Mappings;<br><span class="hljs-keyword">import</span> org.mapstruct.factory.Mappers;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * PersonConverter</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> &lt;a href =&#x27;jxh98@foxmail.com&#x27;&gt;Josway&lt;/a&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/8/28</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PersonConverter</span> &#123;<br><br>    <span class="hljs-type">PersonConverter</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> Mappers.getMapper(PersonConverter.class);<br><br>    <span class="hljs-meta">@Mappings(&#123;</span><br><span class="hljs-meta">            @Mapping(source = &quot;birthday&quot;, target = &quot;birth&quot;),</span><br><span class="hljs-meta">            @Mapping(source = &quot;birthday&quot;, target = &quot;birthDateFormat&quot;, dateFormat = &quot;yyyy-MM-dd HH:mm:ss&quot;),</span><br><span class="hljs-meta">            @Mapping(target = &quot;birthExpressionFormat&quot;, expression = &quot;java(org.apache.commons.lang3.time.DateFormatUtils.format(person.getBirthday(),\&quot;yyyy-MM-dd HH:mm:ss\&quot;))&quot;),</span><br><span class="hljs-meta">            @Mapping(source = &quot;user.age&quot;, target = &quot;age&quot;),</span><br><span class="hljs-meta">            @Mapping(source = &quot;user.gender&quot;, target = &quot;gender&quot;),</span><br><span class="hljs-meta">            @Mapping(target = &quot;email&quot;, ignore = true)</span><br><span class="hljs-meta">    &#125;)</span><br>    PersonDTO <span class="hljs-title function_">domain2dto</span><span class="hljs-params">(Person person)</span>;<br><br>    List&lt;PersonDTO&gt; <span class="hljs-title function_">domain2dto</span><span class="hljs-params">(List&lt;Person&gt; people)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://mapstruct.org/">https://mapstruct.org/</a><br><a href="https://juejin.im/post/6844904046097072141">https://juejin.im/post/6844904046097072141</a><br><a href="https://juejin.im/entry/6844903620874338317">https://juejin.im/entry/6844903620874338317</a><br><a href="https://www.jianshu.com/p/3f20ca1a93b0">https://www.jianshu.com/p/3f20ca1a93b0</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java工具教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MapStruct</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes安装</title>
    <link href="/2022/04/25/yuque/Kubernetes%E5%AE%89%E8%A3%85/"/>
    <url>/2022/04/25/yuque/Kubernetes%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>K8S 快速安装</p><h2 id="Centos7-安装"><a href="#Centos7-安装" class="headerlink" title="Centos7 安装"></a>Centos7 安装</h2><h3 id="前置条件需要安装-Docker"><a href="#前置条件需要安装-Docker" class="headerlink" title="前置条件需要安装 Docker!!!"></a>前置条件需要安装 Docker!!!</h3><h4 id="安装必要的一些系统工具"><a href="#安装必要的一些系统工具" class="headerlink" title="安装必要的一些系统工具"></a>安装必要的一些系统工具</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum install -y yum-utils device-mapper-persistent-data lvm2<br></code></pre></td></tr></table></figure><h4 id="添加软件源信息"><a href="#添加软件源信息" class="headerlink" title="添加软件源信息"></a>添加软件源信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><h4 id="更新并安装-Docker-CE"><a href="#更新并安装-Docker-CE" class="headerlink" title="更新并安装 Docker-CE"></a>更新并安装 Docker-CE</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo yum makecache fast<br>sudo yum -y <span class="hljs-keyword">install</span> docker-ce<br></code></pre></td></tr></table></figure><h4 id="开启-Docker-服务"><a href="#开启-Docker-服务" class="headerlink" title="开启 Docker 服务"></a>开启 Docker 服务</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">sudo service docker <span class="hljs-literal">start</span><br></code></pre></td></tr></table></figure><h4 id="安装校验"><a href="#安装校验" class="headerlink" title="安装校验"></a>安装校验</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">sudo docker <span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><h3 id="一-准备工作-所有节点执行"><a href="#一-准备工作-所有节点执行" class="headerlink" title="一:准备工作(所有节点执行)"></a>一:准备工作(所有节点执行)</h3><ul><li>需要 Root 权限执行以下命令!</li></ul><h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl stop firewalld<br>systemctl <span class="hljs-built_in">disable</span> firewalld<br></code></pre></td></tr></table></figure><h4 id="关闭-Selinux"><a href="#关闭-Selinux" class="headerlink" title="关闭 Selinux"></a>关闭 Selinux</h4><ul><li>临时禁用</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">setenforce 0<br></code></pre></td></tr></table></figure><ul><li>永久禁用</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed -i <span class="hljs-string">&#x27;s/SELINUX=permissive/SELINUX=disabled/&#x27;</span> /etc/sysconfig/selinux<br>sed -i <span class="hljs-string">&quot;s/SELINUX=enforcing/SELINUX=disabled/g&quot;</span> /etc/selinux/config<br></code></pre></td></tr></table></figure><h4 id="禁用交换分区"><a href="#禁用交换分区" class="headerlink" title="禁用交换分区"></a>禁用交换分区</h4><ul><li>临时禁用</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">swapoff -a<br></code></pre></td></tr></table></figure><ul><li>永久禁用</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed -i <span class="hljs-string">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab<br></code></pre></td></tr></table></figure><h4 id="修改内核参数"><a href="#修改内核参数" class="headerlink" title="修改内核参数"></a>修改内核参数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="hljs-string">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="hljs-string">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="hljs-string">EOF</span><br>sysctl --system<br></code></pre></td></tr></table></figure><h3 id="二-安装-master-节点-Master-节点"><a href="#二-安装-master-节点-Master-节点" class="headerlink" title="二:安装 master 节点 (Master 节点)"></a>二:安装 master 节点 (Master 节点)</h3><h4 id="安装-kubeadm、kubelet、kubectl"><a href="#安装-kubeadm、kubelet、kubectl" class="headerlink" title="安装 kubeadm、kubelet、kubectl"></a>安装 kubeadm、kubelet、kubectl</h4><ul><li>由于官方 k8s 源在 google，国内无法访问，这里使用阿里云 yum 源</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="hljs-string">[kubernetes]</span><br><span class="hljs-string">name=Kubernetes</span><br><span class="hljs-string">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="hljs-string">enabled=1</span><br><span class="hljs-string">gpgcheck=1</span><br><span class="hljs-string">repo_gpgcheck=1</span><br><span class="hljs-string">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h4 id="安装-kubeadm、kubectl、kubelet"><a href="#安装-kubeadm、kubectl、kubelet" class="headerlink" title="安装 kubeadm、kubectl、kubelet"></a>安装 kubeadm、kubectl、kubelet</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y kubelet kubeadm kubectl<br></code></pre></td></tr></table></figure><h4 id="启动-kubelet-服务"><a href="#启动-kubelet-服务" class="headerlink" title="启动 kubelet 服务"></a>启动 kubelet 服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> kubelet &amp;&amp; systemctl start kubelet<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>安装教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JUC</title>
    <link href="/2022/04/25/yuque/JUC/"/>
    <url>/2022/04/25/yuque/JUC/</url>
    
    <content type="html"><![CDATA[<p>java.util.concurrent<br>Xmind 版本:<a href="https://www.yuque.com/attachments/yuque/0/2022/xmind/28199557/1650899834517-4c8816ac-d776-4da5-873c-3fbfc2344fae.xmind?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2022/xmind/28199557/1650899834517-4c8816ac-d776-4da5-873c-3fbfc2344fae.xmind%22,%22name%22:%22JUC.xmind%22,%22size%22:293253,%22type%22:%22%22,%22ext%22:%22xmind%22,%22status%22:%22done%22,%22taskId%22:%22u4e76b167-481f-4647-b627-beade893dcd%22,%22taskType%22:%22upload%22,%22id%22:%22u8a3e4c7f%22,%22card%22:%22file%22%7D">JUC.xmind</a></p><h2 id="1、Java-JUC-简介"><a href="#1、Java-JUC-简介" class="headerlink" title="1、Java JUC 简介"></a>1、Java JUC 简介</h2><h3 id="在-Java-5-0-提供了-java-util-concurrent-（简称-JUC-）包，在此包中增加了在并发编程中很常用的实用工具类，用于定义类似于线程的自定义子系统，包括线程池、异步-IO-和轻量级任务框架。提供可调的、灵活的线程池。还提供了设计用于多线程上下文中的-Collection-实现等。"><a href="#在-Java-5-0-提供了-java-util-concurrent-（简称-JUC-）包，在此包中增加了在并发编程中很常用的实用工具类，用于定义类似于线程的自定义子系统，包括线程池、异步-IO-和轻量级任务框架。提供可调的、灵活的线程池。还提供了设计用于多线程上下文中的-Collection-实现等。" class="headerlink" title="在 Java 5.0 提供了 java.util.concurrent （简称 JUC ）包，在此包中增加了在并发编程中很常用的实用工具类，用于定义类似于线程的自定义子系统，包括线程池、异步 IO 和轻量级任务框架。提供可调的、灵活的线程池。还提供了设计用于多线程上下文中的 Collection 实现等。"></a>在 Java 5.0 提供了 java.util.concurrent （简称 JUC ）包，在此包中增加了在并发编程中很常用的实用工具类，用于定义类似于线程的自定义子系统，包括线程池、异步 IO 和轻量级任务框架。提供可调的、灵活的线程池。还提供了设计用于多线程上下文中的 Collection 实现等。</h3><h2 id="2、volatile-关键字-内存可见性"><a href="#2、volatile-关键字-内存可见性" class="headerlink" title="2、volatile 关键字-内存可见性"></a>2、volatile 关键字-内存可见性</h2><h3 id="内存可见性"><a href="#内存可见性" class="headerlink" title="内存可见性"></a>内存可见性</h3><ul><li>内存可见性（Memory Visibility）是指当某个线程正在使用对象状态而另一个线程在同时修改该状态，需要确保当一个线程修改了对象状态后，其他线程能够看到发生的状态变化。</li><li>可见性错误是指当读操作与写操作在不同的线程中执行时，我们无法确保执行读操作的线程能适时地看到其他线程写入的值，有时甚至是根本不可能的事情。</li><li>我们可以通过同步来保证对象被安全地发布。除此之外我们也可以使用一种更加轻量级的 volatile 变量。</li></ul><h3 id="volatile-关键字"><a href="#volatile-关键字" class="headerlink" title="volatile 关键字"></a>volatile 关键字</h3><ul><li>Java 提供了一种稍弱的同步机制，即 volatile 变量，用来确保将变量的更新操作通知到其他线程。可以将 volatile 看做一个轻量级的锁，但是又与锁有些不同：<ul><li>对于多线程，不是一种互斥关系</li><li>不能保证变量状态的“原子性操作”</li></ul></li></ul><h2 id="3、原子变量-CAS-算法"><a href="#3、原子变量-CAS-算法" class="headerlink" title="3、原子变量-CAS 算法"></a>3、原子变量-CAS 算法</h2><h3 id="CAS-算法"><a href="#CAS-算法" class="headerlink" title="CAS 算法"></a>CAS 算法</h3><ul><li>CAS (Compare-And-Swap) 是一种硬件对并发的支持，针对多处理器操作而设计的处理器中的一种特殊指令，用于管理对共享数据的并发访问。</li><li>CAS 是一种无锁的非阻塞算法的实现。</li><li>CAS 包含了 3 个操作数：<ul><li>需要读写的内存值 V</li><li>进行比较的值 A</li><li>拟写入的新值 B</li></ul></li><li>当且仅当 V 的值等于 A 时，CAS 通过原子方式用新值 B 来更新 V 的值，否则不会执行任何操作。</li></ul><h3 id="原子变量"><a href="#原子变量" class="headerlink" title="原子变量"></a>原子变量</h3><ul><li>类的小工具包，支持在单个变量上解除锁的线程安全编程。事实上，此包中的类可将 volatile 值、字段和数组元素的概念扩展到那些也提供原子条件更新操作的类。</li><li>类 AtomicBoolean、AtomicInteger、AtomicLong 和 AtomicReference 的实例各自提供对相应类型单个变量的访问和更新。每个类也为该类型提供适当的实用工具方法。</li><li>AtomicIntegerArray、AtomicLongArray 和 AtomicReferenceArray 类进一步扩展了原子操作，对这些类型的数组提供了支持。这些类在为其数组元素提供 volatile 访问语义方面也引人注目，这对于普通数组来说是不受支持的。</li><li>*核心方法：boolean compareAndSet(expectedValue, updateValue)</li><li>java.util.concurrent.atomic 包下提供了一些原子操作的常用类:<ul><li>AtomicBoolean 、AtomicInteger 、AtomicLong 、 AtomicReference</li><li>AtomicIntegerArray 、AtomicLongArray</li><li>AtomicMarkableReference</li><li>AtomicReferenceArray</li><li>AtomicStampedReference</li></ul></li></ul><h2 id="4、ConcurrentHashMap-锁分段机制"><a href="#4、ConcurrentHashMap-锁分段机制" class="headerlink" title="4、ConcurrentHashMap 锁分段机制"></a>4、ConcurrentHashMap 锁分段机制</h2><h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><ul><li>Java 5.0 在 java.util.concurrent 包中提供了多种并发容器类来改进同步容器的性能。</li><li>ConcurrentHashMap 同步容器类是 Java 5 增加的一个线程安全的哈希表。对与多线程的操作，介于 HashMap 与 Hashtable 之间。内部采用“锁分段”机制替代 Hashtable 的独占锁。进而提高性能。</li><li>此包还提供了设计用于多线程上下文中的 Collection 实现：<br>ConcurrentHashMap、ConcurrentSkipListMap、ConcurrentSkipListSet、CopyOnWriteArrayList 和 CopyOnWriteArraySet。当期望许多线程访问一个给定 collection 时，ConcurrentHashMap 通常优于同步的 HashMap，ConcurrentSkipListMap 通常优于同步的 TreeMap。当期望的读数和遍历远远大于列表的更新数时，CopyOnWriteArrayList 优于同步的 ArrayList。</li></ul><h2 id="5、CountDownLatch-闭锁"><a href="#5、CountDownLatch-闭锁" class="headerlink" title="5、CountDownLatch 闭锁"></a>5、CountDownLatch 闭锁</h2><h3 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h3><ul><li>Java 5.0 在 java.util.concurrent 包中提供了多种并发容器类来改进同步容器的性能。</li><li>CountDownLatch 一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待。</li><li>闭锁可以延迟线程的进度直到其到达终止状态，闭锁可以用来确保某些活动直到其他活动都完成才继续执行：<ul><li>确保某个计算在其需要的所有资源都被初始化之后才继续执行;</li><li>确保某个服务在其依赖的所有其他服务都已经启动之后才启动;</li><li>等待直到某个操作所有参与者都准备就绪再继续执行。</li></ul></li></ul><h2 id="6、实现-Callable-接口"><a href="#6、实现-Callable-接口" class="headerlink" title="6、实现 Callable 接口"></a>6、实现 Callable 接口</h2><h3 id="Callable-接口"><a href="#Callable-接口" class="headerlink" title="Callable 接口"></a>Callable 接口</h3><ul><li>Java 5.0 在 java.util.concurrent 提供了一个新的创建执行线程的方式：Callable 接口</li><li>Callable 接口类似于 Runnable，两者都是为那些其实例可能被另一个线程执行的类设计的。但是 Runnable 不会返回结果，并且无法抛出经过检查的异常。</li><li>Callable 需要依赖 FutureTask ，FutureTask 也可以用作闭锁。</li></ul><h2 id="7、Lock-同步锁"><a href="#7、Lock-同步锁" class="headerlink" title="7、Lock 同步锁"></a>7、Lock 同步锁</h2><h3 id="显示锁-Lock"><a href="#显示锁-Lock" class="headerlink" title="显示锁 Lock"></a>显示锁 Lock</h3><ul><li>在 Java 5.0 之前，协调共享对象的访问时可以使用的机制只有 synchronized 和 volatile 。Java 5.0 后增加了一些新的机制，但并不是一种替代内置锁的方法，而是当内置锁不适用时，作为一种可选择的高级功能。</li><li>ReentrantLock 实现了 Lock 接口，并提供了与 synchronized 相同的互斥性和内存可见性。但相较于 synchronized 提供了更高的处理锁的灵活性。</li></ul><h2 id="8、Condition-控制线程通信"><a href="#8、Condition-控制线程通信" class="headerlink" title="8、Condition 控制线程通信"></a>8、Condition 控制线程通信</h2><h3 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h3><ul><li>Condition 接口描述了可能会与锁有关联的条件变量。这些变量在用法上与使用 Object.wait 访问的隐式监视器类似，但提供了更强大的功能。需要特别指出的是，单个 Lock 可能与多个 Condition 对象关联。为了避免兼容性问题，Condition 方法的名称与对应的 Object 版本中的不同。</li><li>在 Condition 对象中，与 wait、notify 和 notifyAll 方法对应的分别是 await、signal 和 signalAll。</li><li>Condition 实例实质上被绑定到一个锁上。要为特定 Lock 实例获得 Condition 实例，请使用其 newCondition() 方法。</li></ul><h2 id="9、线程按序交替"><a href="#9、线程按序交替" class="headerlink" title="9、线程按序交替"></a>9、线程按序交替</h2><h3 id="线程按序交替"><a href="#线程按序交替" class="headerlink" title="线程按序交替"></a>线程按序交替</h3><ul><li>编写一个程序，开启 3 个线程，这三个线程的 ID 分别为 A、B、C，每个线程将自己的 ID 在屏幕上打印 10 遍，要求输出的结果必须按顺序显示。<ul><li>如：ABCABCABC…… 依次递归</li></ul></li></ul><h2 id="10、ReadWriteLock-读写锁"><a href="#10、ReadWriteLock-读写锁" class="headerlink" title="10、ReadWriteLock 读写锁"></a>10、ReadWriteLock 读写锁</h2><h3 id="读-写锁-ReadWriteLock"><a href="#读-写锁-ReadWriteLock" class="headerlink" title="读-写锁 ReadWriteLock"></a>读-写锁 ReadWriteLock</h3><ul><li>ReadWriteLock 维护了一对相关的锁，一个用于只读操作，另一个用于写入操作。只要没有 writer，读取锁可以由多个 reader 线程同时保持。写入锁是独占的。</li><li>ReadWriteLock 读取操作通常不会改变共享资源，但执行写入操作时，必须独占方式来获取锁。对于读取操作占多数的数据结构。 ReadWriteLock 能提供比独占锁更高的并发性。而对于只读的数据结构，其中包含的不变性可以完全不需要考虑加锁操作。</li></ul><h2 id="11、线程八锁"><a href="#11、线程八锁" class="headerlink" title="11、线程八锁"></a>11、线程八锁</h2><h3 id="线程八锁"><a href="#线程八锁" class="headerlink" title="线程八锁"></a>线程八锁</h3><ul><li>一个对象里面如果有多个 synchronized 方法，某一个时刻内，只要一个线程去调用其中的一个 synchronized 方法了，其它的线程都只能等待，换句话说，某一个时刻内，只能有唯一一个线程去访问这些 synchronized 方法</li><li>锁的是当前对象 this，被锁定后，其它的线程都不能进入到当前对象的其它的 synchronized 方法</li><li>加个普通方法后发现和同步锁无关</li><li>换成两个对象后，不是同一把锁了，情况立刻变化。</li><li>都换成静态同步方法后，情况又变化</li><li>所有的非静态同步方法用的都是同一把锁——实例对象本身，也就是说如果一个实例对象的非静态同步方法获取锁后，该实例对象的其他非静态同步方法必须等待获取锁的方法释放锁后才能获取锁，可是别的实例对象的非静态同步方法因为跟该实例对象的非静态同步方法用的是不同的锁，所以毋须等待该实例对象已获取锁的非静态同步方法释放锁就可以获取他们自己的锁。</li><li>所有的静态同步方法用的也是同一把锁——类对象本身，这两把锁是两个不同的对象，所以静态同步方法与非静态同步方法之间是不会有竞态条件的。但是一旦一个静态同步方法获取锁后，其他的静态同步方法都必须等待该方法释放锁后才能获取锁，而不管是同一个实例对象的静态同步方法之间，还是不同的实例对象的静态同步方法之间，只要它们同一个类的实例对象</li></ul><h2 id="12、线程池"><a href="#12、线程池" class="headerlink" title="12、线程池"></a>12、线程池</h2><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><ul><li>第四种获取线程的方法：线程池，一个 ExecutorService，它使用可能的几个池线程之一执行每个提交的任务，通常使用 Executors 工厂方法配置。</li><li>线程池可以解决两个不同问题：由于减少了每个任务调用的开销，它们通常可以在执行大量异步任务时提供增强的性能，并且还可以提供绑定和管理资源（包括执行任务集时使用的线程）的方法。每个 ThreadPoolExecutor 还维护着一些基本的统计数据，如完成的任务数。</li><li>为了便于跨大量上下文使用，此类提供了很多可调整的参数和扩展钩子 (hook)。但是，强烈建议程序员使用较为方便的 Executors 工厂方法 ：<ul><li>Executors.newCachedThreadPool()（无界线程池，可以进行自动线程回收）</li><li>Executors.newFixedThreadPool(int)（固定大小线程</li><li>Executors.newSingleThreadExecutor()（单个后台线程）</li><li>它们均为大多数使用场景预定义了设置。</li></ul></li></ul><h2 id="13、线程调度"><a href="#13、线程调度" class="headerlink" title="13、线程调度"></a>13、线程调度</h2><h3 id="ScheduledExecutorService"><a href="#ScheduledExecutorService" class="headerlink" title="ScheduledExecutorService"></a>ScheduledExecutorService</h3><ul><li>一个 ExecutorService，可安排在给定的延迟后运行或定<br>期执行的命令。</li></ul><h2 id="14、ForkJoinPool-分支-x2F-合并框架-工作窃取"><a href="#14、ForkJoinPool-分支-x2F-合并框架-工作窃取" class="headerlink" title="14、ForkJoinPool 分支&#x2F;合并框架 工作窃取"></a>14、ForkJoinPool 分支&#x2F;合并框架 工作窃取</h2><h3 id="Fork-x2F-Join-框架"><a href="#Fork-x2F-Join-框架" class="headerlink" title="Fork&#x2F;Join 框架"></a>Fork&#x2F;Join 框架</h3><ul><li>Fork&#x2F;Join 框架：就是在必要的情况下，将一个大任务，进行拆分(fork)成若干个小任务（拆到不可再拆时），再将一个个的小任务运算的结果进行 join 汇总。</li></ul><h3 id="Fork-x2F-Join-框架与线程池的区别"><a href="#Fork-x2F-Join-框架与线程池的区别" class="headerlink" title="Fork&#x2F;Join 框架与线程池的区别"></a>Fork&#x2F;Join 框架与线程池的区别</h3><ul><li>采用 “工作窃取”模式（work-stealing）：<br>当执行新的任务时它可以将其拆分分成更小的任务执行，并将小任务加到线程队列中，然后再从一个随机线程的队列中偷一个并把它放在自己的队列中。</li><li>相对于一般的线程池实现，fork&#x2F;join 框架的优势体现在对其中包含的任务的处理方式上.在一般的线程池中，如果一个线程正在执行的任务由于某些原因无法继续运行，那么该线程会处于等待状态。而在 fork&#x2F;join 框架实现中，如果某个子问题由于等待另外一个子问题的完成而无法继续运行。那么处理该子问题的线程会主动寻找其他尚未运行的子问题来执行.这种方式减少了线程的等待时间，提高了性能。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JUC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins安装</title>
    <link href="/2022/04/25/yuque/Jenkins%E5%AE%89%E8%A3%85/"/>
    <url>/2022/04/25/yuque/Jenkins%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>Jenkins 快速安装</p><h2 id="优秀教程"><a href="#优秀教程" class="headerlink" title="优秀教程"></a>优秀教程</h2><p><a href="https://testerhome.com/topics/19064">https://testerhome.com/topics/19064</a><br><a href="https://www.cnblogs.com/zhuochong/p/10082372.html">https://www.cnblogs.com/zhuochong/p/10082372.html</a><br><a href="https://www.cnblogs.com/a8457013/p/8515342.html">https://www.cnblogs.com/a8457013/p/8515342.html</a></p><h2 id="普通安装-Windows"><a href="#普通安装-Windows" class="headerlink" title="普通安装 (Windows)"></a>普通安装 (Windows)</h2><h3 id="启动-Jenkins"><a href="#启动-Jenkins" class="headerlink" title="启动 Jenkins"></a>启动 Jenkins</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar jenkins.war --httpPort=8080<br></code></pre></td></tr></table></figure><p>这一步 console 会出现密码,保存备用.</p><h4 id="手动修改配置文件"><a href="#手动修改配置文件" class="headerlink" title="手动修改配置文件"></a>手动修改配置文件</h4><p>将<br><code>C:\Users\Administrator\.jenkins\hudson.model.UpdateCenter.xml</code><br>改为<br><code>https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</code><br>后<br>重启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar jenkins.war --httpPort=8080<br></code></pre></td></tr></table></figure><p>然后将下载好的 <code>C:\Users\Administrator\.jenkins\updates\default.json</code> 中的<br><code>http://www.google.com/</code> 改为 <code>http://www.baidu.com</code><br><code>https://updates.jenkins.io/download/plugins/</code> 改为<br><code>https://mirrors.tuna.tsinghua.edu.cn/jenkins/plugins/</code></p><h4 id="直接配置代理-暂时无效"><a href="#直接配置代理-暂时无效" class="headerlink" title="直接配置代理(暂时无效)"></a>直接配置代理(暂时无效)</h4><p><a href="http://localhost:8080/pluginManager/advanced">http://localhost:8080/pluginManager/advanced</a></p><h3 id="开始-Jenkins"><a href="#开始-Jenkins" class="headerlink" title="开始 Jenkins"></a>开始 Jenkins</h3><p>进入<br><a href="http://localhost:8080/">http://localhost:8080/</a><br>输入密码 如果忘记可以查看<br><code>C:\Users\Administrator\.jenkins\secrets\initialAdminPassword</code></p><h2 id="Docker-方式安装"><a href="#Docker-方式安装" class="headerlink" title="Docker 方式安装"></a>Docker 方式安装</h2><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p><a href="https://hub.docker.com/r/jenkinsci/blueocean">https://hub.docker.com/r/jenkinsci/blueocean</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull jenkinsci/blueocean<br></code></pre></td></tr></table></figure><p>选择的镜像是 Jenkins-blueocean Jenkins 海洋版，为什么选这个？</p><p>踩坑：普通的 Jenkins 在部署的时候不少人都遇到过，插件下不下来，但是在海洋版没有这个问题（最主要原因）</p><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run \<br>--name jenkinsci-blueocean -u root \<br>-d -p 8080:8080 -p 50000:50000 \<br>-v /data/jenkins:/var/jenkins_home \<br>-v /var/run/docker.sock:/var/run/docker.sock jenkinsci/blueocean<br></code></pre></td></tr></table></figure><h3 id="查看密码"><a href="#查看密码" class="headerlink" title="查看密码"></a>查看密码</h3><p>不进入容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /data/jenkins/secrets/initialAdminPassword<br></code></pre></td></tr></table></figure><p>进入容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it xxxx (容器 ID) /bin/bash<br><span class="hljs-built_in">cat</span> (网页提示的路径)<br></code></pre></td></tr></table></figure><h3 id="通过日志查看密码"><a href="#通过日志查看密码" class="headerlink" title="通过日志查看密码"></a>通过日志查看密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker logs -f xxxx (容器 ID)<br></code></pre></td></tr></table></figure><h2 id="安装推荐插件即可"><a href="#安装推荐插件即可" class="headerlink" title="安装推荐插件即可"></a>安装推荐插件即可</h2><h3 id="额外安装"><a href="#额外安装" class="headerlink" title="额外安装"></a>额外安装</h3><ul><li>Maven Integration plugin：有了它在新建 Job 时才能有 Maven 项目可以选择</li><li>Deploy to container Plugin：将 war 包部署到 tomcatshang</li><li>Publish Over SSH：通过 ssh 推送文件，并可以执行 shell 命令</li></ul><blockquote><p>插件安装完成后最好重启一下 jenkins</p></blockquote><h3 id="指定-Jenkins-的-JDK-和-MAVEN"><a href="#指定-Jenkins-的-JDK-和-MAVEN" class="headerlink" title="指定 Jenkins 的 JDK 和 MAVEN"></a>指定 Jenkins 的 JDK 和 MAVEN</h3><p>直接拷贝相应的 JDK 和 MAVEN 到 Docker 容器中 , 可以使用</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">wget jdkurl<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span><br>wget mavenurl<span class="hljs-selector-class">.tar</span>.gz<br></code></pre></td></tr></table></figure><p>然后在<code>全局工具配置中</code>镜像设置,取消选定 <code>自动安装</code> 填入绝对路径即可.</p>]]></content>
    
    
    <categories>
      
      <category>安装教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java SPI 机制</title>
    <link href="/2022/04/25/yuque/Java%20SPI%20%E6%9C%BA%E5%88%B6/"/>
    <url>/2022/04/25/yuque/Java%20SPI%20%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="一、什么是-SPI"><a href="#一、什么是-SPI" class="headerlink" title="一、什么是 SPI"></a>一、什么是 SPI</h3><p>SPI ，全称为 Service Provider Interface，是一种服务发现机制。它通过在 ClassPath 路径下的 META-INF&#x2F;services 文件夹查找文件，自动加载文件里所定义的类。</p><p>这一机制为很多框架扩展提供了可能，比如在 Dubbo、JDBC 中都使用到了 SPI 机制。我们先通过一个很简单的例子来看下它是怎么用的。</p><h4 id="1、小栗子"><a href="#1、小栗子" class="headerlink" title="1、小栗子"></a>1、小栗子</h4><p>首先，我们需要定义一个接口，SPIService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.viewscenes.netsupervisor.spi;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SPIService</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后，定义两个实现类，没别的意思，只输入一句话。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.viewscenes.netsupervisor.spi;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpiImpl1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SPIService</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;SpiImpl1.execute()&quot;</span>);<br>    &#125;<br>&#125;<br>----------------------我是乖巧的分割线----------------------<br><span class="hljs-keyword">package</span> com.viewscenes.netsupervisor.spi;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpiImpl2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SPIService</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;SpiImpl2.execute()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后呢，要在 ClassPath 路径下配置添加一个文件。文件名字是接口的全限定类名，内容是实现类的全限定类名，多个实现类用换行符分隔。<br>文件路径如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/13230160-91052eb44fd645ac.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/468/format/webp#crop=0&crop=0&crop=1&crop=1&id=iFs2X&originHeight=103&originWidth=468&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>SPI 配置文件位置</p><p>内容就是实现类的全限定类名：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">com<span class="hljs-selector-class">.viewscenes</span><span class="hljs-selector-class">.netsupervisor</span><span class="hljs-selector-class">.spi</span><span class="hljs-selector-class">.SpiImpl1</span><br>com<span class="hljs-selector-class">.viewscenes</span><span class="hljs-selector-class">.netsupervisor</span><span class="hljs-selector-class">.spi</span><span class="hljs-selector-class">.SpiImpl2</span><br></code></pre></td></tr></table></figure><h4 id="2、测试"><a href="#2、测试" class="headerlink" title="2、测试"></a>2、测试</h4><p>然后我们就可以通过<code>ServiceLoader.load或者Service.providers</code>方法拿到实现类的实例。其中，<code>Service.providers</code>包位于<code>sun.misc.Service</code>，而<code>ServiceLoader.load</code>包位于<code>java.util.ServiceLoader</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Iterator&lt;SPIService&gt; providers = Service.providers(SPIService.class);<br>        ServiceLoader&lt;SPIService&gt; load = ServiceLoader.load(SPIService.class);<br><br>        <span class="hljs-keyword">while</span>(providers.hasNext()) &#123;<br>            <span class="hljs-type">SPIService</span> <span class="hljs-variable">ser</span> <span class="hljs-operator">=</span> providers.next();<br>            ser.execute();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;--------------------------------&quot;</span>);<br>        Iterator&lt;SPIService&gt; iterator = load.iterator();<br>        <span class="hljs-keyword">while</span>(iterator.hasNext()) &#123;<br>            <span class="hljs-type">SPIService</span> <span class="hljs-variable">ser</span> <span class="hljs-operator">=</span> iterator.next();<br>            ser.execute();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>两种方式的输出结果是一致的：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">SpiImpl1<span class="hljs-selector-class">.execute</span>()<br>SpiImpl2<span class="hljs-selector-class">.execute</span>()<br>--------------------------------<br>SpiImpl1<span class="hljs-selector-class">.execute</span>()<br>SpiImpl2<span class="hljs-selector-class">.execute</span>()<br></code></pre></td></tr></table></figure><h3 id="二、源码分析"><a href="#二、源码分析" class="headerlink" title="二、源码分析"></a>二、源码分析</h3><p>我们看到一个位于<code>sun.misc包</code>，一个位于<code>java.util包</code>，sun 包下的源码看不到。我们就以 ServiceLoader.load 为例，通过源码看看它里面到底怎么做的。</p><h4 id="1、ServiceLoader"><a href="#1、ServiceLoader" class="headerlink" title="1、ServiceLoader"></a>1、ServiceLoader</h4><p>首先，我们先来了解下 ServiceLoader，看看它的类结构。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceLoader</span>&lt;S&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterable</span>&lt;S&gt;<br>    <span class="hljs-comment">//配置文件的路径</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;META-INF/services/&quot;</span>;<br>    <span class="hljs-comment">//加载的服务类或接口</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Class&lt;S&gt; service;<br>    <span class="hljs-comment">//已加载的服务类集合</span><br>    <span class="hljs-keyword">private</span> LinkedHashMap&lt;String,S&gt; providers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;();<br>    <span class="hljs-comment">//类加载器</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ClassLoader loader;<br>    <span class="hljs-comment">//内部类，真正加载服务类</span><br>    <span class="hljs-keyword">private</span> LazyIterator lookupIterator;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、Load"><a href="#2、Load" class="headerlink" title="2、Load"></a>2、Load</h4><p>load 方法创建了一些属性，重要的是实例化了内部类，LazyIterator。最后返回 ServiceLoader 的实例。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dart">public <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServiceLoader</span>&lt;<span class="hljs-title">S</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterable</span>&lt;<span class="hljs-title">S</span>&gt;</span><br><span class="hljs-class">    <span class="hljs-title">private</span> <span class="hljs-title">ServiceLoader</span>(<span class="hljs-title">Class</span>&lt;<span class="hljs-title">S</span>&gt; <span class="hljs-title">svc</span>, <span class="hljs-title">ClassLoader</span> <span class="hljs-title">cl</span>) </span>&#123;<br>        <span class="hljs-comment">//要加载的接口</span><br>        service = Objects.requireNonNull(svc, <span class="hljs-string">&quot;Service interface cannot be null&quot;</span>);<br>        <span class="hljs-comment">//类加载器</span><br>        loader = (cl == <span class="hljs-keyword">null</span>) ? ClassLoader.getSystemClassLoader() : cl;<br>        <span class="hljs-comment">//访问控制器</span><br>        acc = (System.getSecurityManager() != <span class="hljs-keyword">null</span>) ? AccessController.getContext() : <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">//先清空</span><br>        providers.clear();<br>        <span class="hljs-comment">//实例化内部类</span><br>        LazyIterator lookupIterator = <span class="hljs-keyword">new</span> LazyIterator(service, loader);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、查找实现类"><a href="#3、查找实现类" class="headerlink" title="3、查找实现类"></a>3、查找实现类</h4><p>查找实现类和创建实现类的过程，都在 LazyIterator 完成。当我们调用 iterator.hasNext 和 iterator.next 方法的时候，实际上调用的都是 LazyIterator 的相应方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Iterator&lt;S&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Iterator</span>&lt;S&gt;() &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> lookupIterator.hasNext();<br>        &#125;<br>        <span class="hljs-keyword">public</span> S <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> lookupIterator.next();<br>        &#125;<br>        .......<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>所以，我们重点关注 lookupIterator.hasNext()方法，它最终会调用到 hasNextService。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs dart">private <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LazyIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator</span>&lt;<span class="hljs-title">S</span>&gt;</span>&#123;<br>    Class&lt;S&gt; service;<br>    ClassLoader loader;<br>    Enumeration&lt;URL&gt; configs = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-built_in">Iterator</span>&lt;<span class="hljs-built_in">String</span>&gt; pending = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-built_in">String</span> nextName = <span class="hljs-keyword">null</span>;<br>    private boolean hasNextService() &#123;<br>        <span class="hljs-comment">//第二次调用的时候，已经解析完成了，直接返回</span><br>        <span class="hljs-keyword">if</span> (nextName != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (configs == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">//META-INF/services/ 加上接口的全限定类名，就是文件服务类的文件</span><br>            <span class="hljs-comment">//META-INF/services/com.viewscenes.netsupervisor.spi.SPIService</span><br>            <span class="hljs-built_in">String</span> fullName = PREFIX + service.getName();<br>            <span class="hljs-comment">//将文件路径转成URL对象</span><br>            configs = loader.getResources(fullName);<br>        &#125;<br>        <span class="hljs-keyword">while</span> ((pending == <span class="hljs-keyword">null</span>) || !pending.hasNext()) &#123;<br>            <span class="hljs-comment">//解析URL文件对象，读取内容，最后返回</span><br>            pending = parse(service, configs.nextElement());<br>        &#125;<br>        <span class="hljs-comment">//拿到第一个实现类的类名</span><br>        nextName = pending.next();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、创建实例"><a href="#4、创建实例" class="headerlink" title="4、创建实例"></a>4、创建实例</h4><p>当然，调用 next 方法的时候，实际调用到的是，lookupIterator.nextService。它通过反射的方式，创建实现类的实例并返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterator</span>&lt;S&gt;&#123;<br>    <span class="hljs-keyword">private</span> S <span class="hljs-title function_">nextService</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//全限定类名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">cn</span> <span class="hljs-operator">=</span> nextName;<br>        nextName = <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">//创建类的Class对象</span><br>        Class&lt;?&gt; c = Class.forName(cn, <span class="hljs-literal">false</span>, loader);<br>        <span class="hljs-comment">//通过newInstance实例化</span><br>        <span class="hljs-type">S</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> service.cast(c.newInstance());<br>        <span class="hljs-comment">//放入集合，返回实例</span><br>        providers.put(cn, p);<br>        <span class="hljs-keyword">return</span> p;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看到这儿，我想已经很清楚了。获取到类的实例，我们自然就可以对它为所欲为了！</p><h3 id="三、JDBC-中的应用"><a href="#三、JDBC-中的应用" class="headerlink" title="三、JDBC 中的应用"></a>三、JDBC 中的应用</h3><p>我们开头说，SPI 机制为很多框架的扩展提供了可能，其实 JDBC 就应用到了这一机制。回忆一下 JDBC 获取数据库连接的过程。在早期版本中，需要先设置数据库驱动的连接，再通过 DriverManager.getConnection 获取一个 Connection。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">String</span> url = <span class="hljs-string">&quot;jdbc:mysql:///consult?serverTimezone=UTC&quot;</span>;<br><span class="hljs-built_in">String</span> user = <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-built_in">String</span> password = <span class="hljs-string">&quot;root&quot;</span>;<br><br>Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>Connection connection = DriverManager.getConnection(url, user, password);<br></code></pre></td></tr></table></figure><p>在较新版本中(具体哪个版本，笔者没有验证)，设置数据库驱动连接，这一步骤就不再需要，那么它是怎么分辨是哪种数据库的呢？答案就在 SPI。</p><h4 id="1、加载"><a href="#1、加载" class="headerlink" title="1、加载"></a>1、加载</h4><p>我们把目光回到<code>DriverManager</code>类，它在静态代码块里面做了一件比较重要的事。很明显，它已经通过 SPI 机制， 把数据库驱动连接初始化了。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DriverManager</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        loadInitialDrivers();<br>        println(<span class="hljs-string">&quot;JDBC DriverManager initialized&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>具体过程还得看 loadInitialDrivers，它在里面查找的是 Driver 接口的服务类，所以它的文件路径就是：META-INF&#x2F;services&#x2F;java.sql.Driver。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DriverManager</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadInitialDrivers</span><span class="hljs-params">()</span> &#123;<br>        AccessController.doPrivileged(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrivilegedAction</span>&lt;Void&gt;() &#123;<br>            <span class="hljs-keyword">public</span> Void <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-comment">//很明显，它要加载Driver接口的服务类，Driver接口的包为:java.sql.Driver</span><br>                <span class="hljs-comment">//所以它要找的就是META-INF/services/java.sql.Driver文件</span><br>                ServiceLoader&lt;Driver&gt; loadedDrivers = ServiceLoader.load(Driver.class);<br>                Iterator&lt;Driver&gt; driversIterator = loadedDrivers.iterator();<br>                <span class="hljs-keyword">try</span>&#123;<br>                    <span class="hljs-comment">//查到之后创建对象</span><br>                    <span class="hljs-keyword">while</span>(driversIterator.hasNext()) &#123;<br>                        driversIterator.next();<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span>(Throwable t) &#123;<br>                    <span class="hljs-comment">// Do nothing</span><br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么，这个文件哪里有呢？我们来看 MySQL 的 jar 包，就是这个文件，文件内容为：<code>com.mysql.cj.jdbc.Driver</code>。</p><p><img src="https://upload-images.jianshu.io/upload_images/13230160-b74e952c0a304f05.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/464/format/webp#crop=0&crop=0&crop=1&crop=1&id=qprPD&originHeight=102&originWidth=464&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>MySQL SPI 文件</p><h4 id="2、创建实例"><a href="#2、创建实例" class="headerlink" title="2、创建实例"></a>2、创建实例</h4><p>上一步已经找到了 MySQL 中的 com.mysql.cj.jdbc.Driver 全限定类名，当调用 next 方法时，就会创建这个类的实例。它就完成了一件事，向 DriverManager 注册自身的实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Driver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">NonRegisteringDriver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.sql.Driver &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//注册</span><br>            <span class="hljs-comment">//调用DriverManager类的注册方法</span><br>            <span class="hljs-comment">//往registeredDrivers集合中加入实例</span><br>            java.sql.DriverManager.registerDriver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Driver</span>());<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException E) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Can&#x27;t register driver!&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Driver</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-comment">// Required for Class.forName().newInstance()</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、创建-Connection"><a href="#3、创建-Connection" class="headerlink" title="3、创建 Connection"></a>3、创建 Connection</h4><p>在 DriverManager.getConnection()方法就是创建连接的地方，它通过循环已注册的数据库驱动程序，调用其 connect 方法，获取连接并返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">(</span><br><span class="hljs-params">        String url, java.util.Properties info, Class&lt;?&gt; caller)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-comment">//registeredDrivers中就包含com.mysql.cj.jdbc.Driver实例</span><br>    <span class="hljs-keyword">for</span>(DriverInfo aDriver : registeredDrivers) &#123;<br>        <span class="hljs-keyword">if</span>(isDriverAllowed(aDriver.driver, callerCL)) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//调用connect方法创建连接</span><br>                <span class="hljs-type">Connection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> aDriver.driver.connect(url, info);<br>                <span class="hljs-keyword">if</span> (con != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">return</span> (con);<br>                &#125;<br>            &#125;<span class="hljs-keyword">catch</span> (SQLException ex) &#123;<br>                <span class="hljs-keyword">if</span> (reason == <span class="hljs-literal">null</span>) &#123;<br>                    reason = ex;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            println(<span class="hljs-string">&quot;    skipping: &quot;</span> + aDriver.getClass().getName());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、再扩展"><a href="#4、再扩展" class="headerlink" title="4、再扩展"></a>4、再扩展</h4><p>既然我们知道 JDBC 是这样创建数据库连接的，我们能不能再扩展一下呢？如果我们自己也创建一个 java.sql.Driver 文件，自定义实现类 MyDriver，那么，在获取连接的前后就可以动态修改一些信息。</p><p>还是先在项目 ClassPath 下创建文件，文件内容为自定义驱动类<code>com.viewscenes.netsupervisor.spi.MyDriver</code></p><p><img src="https://upload-images.jianshu.io/upload_images/13230160-37de0e9488755cb7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/489/format/webp#crop=0&crop=0&crop=1&crop=1&id=K2NzW&originHeight=120&originWidth=489&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p>自定义数据库驱动程序</p><p>我们的 MyDriver 实现类，继承自 MySQL 中的 NonRegisteringDriver，还要实现 java.sql.Driver 接口。这样，在调用 connect 方法的时候，就会调用到此类，但实际创建的过程还靠 MySQL 完成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.viewscenes.netsupervisor.spi<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDriver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">NonRegisteringDriver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Driver</span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            java.sql.DriverManager.registerDriver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDriver</span>());<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException E) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Can&#x27;t register driver!&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyDriver</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> SQLException &#123;&#125;<br><br>    <span class="hljs-keyword">public</span> Connection <span class="hljs-title function_">connect</span><span class="hljs-params">(String url, Properties info)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        System.out.println(<span class="hljs-string">&quot;准备创建数据库连接.url:&quot;</span>+url);<br>        System.out.println(<span class="hljs-string">&quot;JDBC配置信息：&quot;</span>+info);<br>        info.setProperty(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span>  <span class="hljs-built_in">super</span>.connect(url, info);<br>        System.out.println(<span class="hljs-string">&quot;数据库连接创建完成!&quot;</span>+connection.toString());<br>        <span class="hljs-keyword">return</span> connection;<br>    &#125;<br>&#125;<br>--------------------输出结果---------------------<br>准备创建数据库连接.url:jdbc:mysql:<span class="hljs-comment">///consult?serverTimezone=UTC</span><br>JDBC配置信息：&#123;user=root, password=root&#125;<br>数据库连接创建完成!com.mysql.cj.jdbc.ConnectionImpl@7cf10a6f<br></code></pre></td></tr></table></figure><p>作者：清幽之地<br>链接：<a href="https://www.jianshu.com/p/3a3edbcd8f24">https://www.jianshu.com/p/3a3edbcd8f24</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
    <categories>
      
      <category>Java知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SPI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 多线程</title>
    <link href="/2022/04/25/yuque/Java%20%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2022/04/25/yuque/Java%20%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>Java 多线程介绍</p><h2 id="创建新线程"><a href="#创建新线程" class="headerlink" title="创建新线程"></a>创建新线程</h2><p>Java 用<code>Thread</code>对象表示一个线程，通过调用<code>start()</code>启动一个新线程；</p><p>一个线程对象只能调用一次<code>start()</code>方法；</p><p>线程的执行代码写在<code>run()</code>方法中；</p><p>线程调度由操作系统决定，程序本身无法决定调度顺序；</p><p><code>Thread.sleep()</code>可以把当前线程暂停一段时间。</p><h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><p>Java 线程对象<code>Thread</code>的状态包括：<code>New</code>、<code>Runnable</code>、<code>Blocked</code>、<code>Waiting</code>、<code>Timed Waiting</code>和<code>Terminated</code>；</p><p>通过对另一个线程对象调用<code>join()</code>方法可以等待其执行结束；</p><p>可以指定等待时间，超过等待时间线程仍然没有结束就不再等待；</p><p>对已经运行结束的线程调用<code>join()</code>方法会立刻返回。</p><h2 id="中断线程"><a href="#中断线程" class="headerlink" title="中断线程"></a>中断线程</h2><p>对目标线程调用<code>interrupt()</code>方法可以请求中断一个线程，目标线程通过检测<code>isInterrupted()</code>标志获取自身是否已中断。如果目标线程处于等待状态，该线程会捕获到<code>InterruptedException</code>；</p><p>目标线程检测到<code>isInterrupted()</code>为<code>true</code>或者捕获了<code>InterruptedException</code>都应该立刻结束自身线程；</p><p>通过标志位判断需要正确使用<code>volatile</code>关键字；</p><p><code>volatile</code>关键字解决了共享变量在线程间的可见性问题。</p><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p>守护线程是为其他线程服务的线程；</p><p>所有非守护线程都执行完毕后，虚拟机退出；</p><p>守护线程不能持有需要关闭的资源（如打开文件等）。</p><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><p>多线程同时读写共享变量时，会造成逻辑错误，因此需要通过<code>synchronized</code>同步；</p><p>同步的本质就是给指定对象加锁，加锁后才能继续执行后续代码；</p><p>注意加锁对象必须是同一个实例；</p><p>对 JVM 定义的单个原子操作不需要同步。</p><h2 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h2><p>用<code>synchronized</code>修饰方法可以把整个方法变为同步代码块，<code>synchronized</code>方法加锁对象是<code>this</code>；</p><p>通过合理的设计和数据封装可以让一个类变为“线程安全”；</p><p>一个类没有特殊说明，默认不是 thread-safe；</p><p>多线程能否安全访问某个非线程安全的实例，需要具体问题具体分析。</p><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>Java 的<code>synchronized</code>锁是可重入锁；</p><p>死锁产生的条件是多线程各自持有不同的锁，并互相试图获取对方已持有的锁，导致无限等待；</p><p>避免死锁的方法是多线程获取锁的顺序要一致。</p><h2 id="wait-和-notify"><a href="#wait-和-notify" class="headerlink" title="wait 和 notify"></a>wait 和 notify</h2><p><code>wait</code>和<code>notify</code>用于多线程协调运行：</p><ul><li>在<code>synchronized</code>内部可以调用<code>wait()</code>使线程进入等待状态；</li><li>必须在已获得的锁对象上调用<code>wait()</code>方法；</li><li>在<code>synchronized</code>内部可以调用<code>notify()</code>或<code>notifyAll()</code>唤醒其他等待线程；</li><li>必须在已获得的锁对象上调用<code>notify()</code>或<code>notifyAll()</code>方法；</li><li>已唤醒的线程还需要重新获得锁后才能继续执行。</li></ul><h2 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h2><p><code>ReentrantLock</code>可以替代<code>synchronized</code>进行同步；</p><p><code>ReentrantLock</code>获取锁更安全；</p><p>必须先获取到锁，再进入<code>try &#123;...&#125;</code>代码块，最后使用<code>finally</code>保证释放锁；</p><p>可以使用<code>tryLock()</code>尝试获取锁。</p><h2 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h2><p><code>Condition</code>可以替代<code>wait</code>和<code>notify</code>；</p><p><code>Condition</code>对象必须从<code>Lock</code>对象获取。</p><h2 id="ReadWriteLock"><a href="#ReadWriteLock" class="headerlink" title="ReadWriteLock"></a>ReadWriteLock</h2>]]></content>
    
    
    <categories>
      
      <category>Java知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>multithreading</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>整合SpringBoot2.x + SpringFox3</title>
    <link href="/2022/04/25/yuque/%E6%95%B4%E5%90%88SpringBoot2.x%20+%20SpringFox3/"/>
    <url>/2022/04/25/yuque/%E6%95%B4%E5%90%88SpringBoot2.x%20+%20SpringFox3/</url>
    
    <content type="html"><![CDATA[<p>整合 Spring Boot 2.x + SpringFox 3</p><h2 id="所需依赖"><a href="#所需依赖" class="headerlink" title="所需依赖"></a>所需依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--        Swagger UI 访问：http://ip:port/context-path/swagger-ui/--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h2>]]></content>
    
    
    <categories>
      
      <category>中间件整合教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springfox3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>整合SpringBoot2.x + Redis</title>
    <link href="/2022/04/25/yuque/%E6%95%B4%E5%90%88SpringBoot2.x%20+%20Redis/"/>
    <url>/2022/04/25/yuque/%E6%95%B4%E5%90%88SpringBoot2.x%20+%20Redis/</url>
    
    <content type="html"><![CDATA[<p>整合 Spring Boot 2.x + Redis</p><h2 id="所需服务"><a href="#所需服务" class="headerlink" title="所需服务"></a>所需服务</h2><p>本地启动<code>Redis</code></p><p>端口号使用默认端口号<code>6379</code></p><h2 id="Spring-Data-Redis-单机无需配置，即可使用！"><a href="#Spring-Data-Redis-单机无需配置，即可使用！" class="headerlink" title="Spring Data Redis 单机无需配置，即可使用！"></a>Spring Data Redis 单机无需配置，即可使用！</h2><h3 id="所需依赖"><a href="#所需依赖" class="headerlink" title="所需依赖"></a>所需依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="直接开始使用"><a href="#直接开始使用" class="headerlink" title="直接开始使用"></a>直接开始使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> &lt;a href =&#x27;jxh98@foxmail.com&#x27;&gt;Josway&lt;/a&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/8/3</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisTest</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user:1&quot;</span>;<br>        redisTemplate.opsForValue().set(key, <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Josway&quot;</span>, <span class="hljs-number">18</span>));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().get(key);<br>        log.info(<span class="hljs-string">&quot;user:&quot;</span> + o.toString());<br><br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">6680135988818656280L</span>;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Spring-Cache-单机无需配置，即可使用！"><a href="#Spring-Cache-单机无需配置，即可使用！" class="headerlink" title="Spring Cache 单机无需配置，即可使用！"></a>Spring Cache 单机无需配置，即可使用！</h2><h3 id="所需依赖-1"><a href="#所需依赖-1" class="headerlink" title="所需依赖"></a>所需依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><h4 id="EnableCaching"><a href="#EnableCaching" class="headerlink" title="@EnableCaching "></a><a href="/EnableCaching">@EnableCaching </a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cache.annotation.EnableCaching;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> &lt;a href =&#x27;jxh98@foxmail.com&#x27;&gt;Josway&lt;/a&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/6/28</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK 1.8&lt;/a&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableCaching</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DroolsApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(DroolsApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="CacheConfig"><a href="#CacheConfig" class="headerlink" title="@CacheConfig "></a><a href="/CacheConfig">@CacheConfig </a></h4><p><a href="/Cacheable">@Cacheable </a><br><a href="/CachePut">@CachePut </a><br><a href="/CacheEvict">@CacheEvict </a> 可以自动缓存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.visualization.entity.Demo;<br><span class="hljs-keyword">import</span> com.example.visualization.mapper.DemoMapper;<br><span class="hljs-keyword">import</span> com.example.visualization.service.DemoService;<br><span class="hljs-keyword">import</span> org.springframework.cache.annotation.CacheConfig;<br><span class="hljs-keyword">import</span> org.springframework.cache.annotation.CacheEvict;<br><span class="hljs-keyword">import</span> org.springframework.cache.annotation.CachePut;<br><span class="hljs-keyword">import</span> org.springframework.cache.annotation.Cacheable;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> &lt;a href =&#x27;jxh98@foxmail.com&#x27;&gt;Josway&lt;/a&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/8/4</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> JDK 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@CacheConfig(cacheNames = &quot;demo&quot;)</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DemoService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> DemoMapper demoMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">deleteByPrimaryKey</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-keyword">return</span> demoMapper.deleteByPrimaryKey(id);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Demo record)</span> &#123;<br>        <span class="hljs-keyword">return</span> demoMapper.insert(record);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">insertSelective</span><span class="hljs-params">(Demo record)</span> &#123;<br>        <span class="hljs-keyword">return</span> demoMapper.insertSelective(record);<br>    &#125;<br><br>    <span class="hljs-meta">@Cacheable</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Demo <span class="hljs-title function_">selectByPrimaryKey</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-keyword">return</span> demoMapper.selectByPrimaryKey(id);<br>    &#125;<br><br>    <span class="hljs-meta">@CachePut(key = &quot;#record.id&quot;)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateByPrimaryKeySelective</span><span class="hljs-params">(Demo record)</span> &#123;<br>        <span class="hljs-keyword">return</span> demoMapper.updateByPrimaryKeySelective(record);<br>    &#125;<br><br>    <span class="hljs-meta">@CacheEvict</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateByPrimaryKey</span><span class="hljs-params">(Demo record)</span> &#123;<br>        <span class="hljs-keyword">return</span> demoMapper.updateByPrimaryKey(record);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件整合教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA</title>
    <link href="/2022/04/25/yuque/IDEA/"/>
    <url>/2022/04/25/yuque/IDEA/</url>
    
    <content type="html"><![CDATA[<p>IDEA 无限试用</p><blockquote><p><a href="https://zhile.io/2020/11/18/jetbrains-eval-reset-deprecated.html">https://zhile.io/2020/11/18/jetbrains-eval-reset-deprecated.html</a></p></blockquote><p>注：仅支持 2021.2.2 及以下版本</p><h2 id="IDEA-试用插件"><a href="#IDEA-试用插件" class="headerlink" title="IDEA 试用插件"></a>IDEA 试用插件</h2><p><a href="https://www.yuque.com/attachments/yuque/0/2022/zip/28199557/1650900292293-f6de08d4-012c-44ce-9917-10118b90b667.zip?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2022/zip/28199557/1650900292293-f6de08d4-012c-44ce-9917-10118b90b667.zip%22,%22name%22:%22ide-eval-resetter-2.3.5-c80a1d.zip%22,%22size%22:48514,%22type%22:%22application/x-zip-compressed%22,%22ext%22:%22zip%22,%22status%22:%22done%22,%22taskId%22:%22ue16bdc19-ea80-4f47-909b-e376a6198fc%22,%22taskType%22:%22upload%22,%22id%22:%22uc2e923cb%22,%22card%22:%22file%22%7D">ide-eval-resetter-2.3.5-c80a1d.zip</a></p><h2 id="使用本地插件的安装方式进行安装即可"><a href="#使用本地插件的安装方式进行安装即可" class="headerlink" title="使用本地插件的安装方式进行安装即可"></a>使用本地插件的安装方式进行安装即可</h2><h2 id="安装后重启-全部试用-Evaluation-即可"><a href="#安装后重启-全部试用-Evaluation-即可" class="headerlink" title="安装后重启,全部试用(Evaluation)即可."></a>安装后重启,全部试用(Evaluation)即可.</h2>]]></content>
    
    
    <categories>
      
      <category>其他教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hello-world</title>
    <link href="/2022/04/25/yuque/hello-world/"/>
    <url>/2022/04/25/yuque/hello-world/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="title-Hello-World"><a href="#title-Hello-World" class="headerlink" title="title: Hello World"></a>title: Hello World</h2><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Druid 获取连接死循环</title>
    <link href="/2022/04/25/yuque/Druid%20%E8%8E%B7%E5%8F%96%E8%BF%9E%E6%8E%A5%E6%AD%BB%E5%BE%AA%E7%8E%AF/"/>
    <url>/2022/04/25/yuque/Druid%20%E8%8E%B7%E5%8F%96%E8%BF%9E%E6%8E%A5%E6%AD%BB%E5%BE%AA%E7%8E%AF/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (breakAfterAcquireFailure) &#123;<br>    <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (physicalConnection == <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">continue</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p><code>breakAfterAcquireFailur</code>默认为<code>false</code>。</p><p>且配置文件或代码中未设置 <code>breakAfterAcquireFailur</code> 属性和<code>maxWait</code>属性，</p><p>且因为循环为<code>for(;;)</code>，从而导致死循环重试。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>在配置文件或代码中设置 <code>breakAfterAcquireFailur</code> 属性和<code>maxWait</code>属性即可。</p><h2 id="完整源码"><a href="#完整源码" class="headerlink" title="完整源码"></a>完整源码</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CreateConnectionThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CreateConnectionThread</span><span class="hljs-params">(String name)</span></span>&#123;<br>            <span class="hljs-keyword">super</span>(name);<br>            <span class="hljs-keyword">this</span>.setDaemon(<span class="hljs-keyword">true</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>            initedLatch.countDown();<br><br>            <span class="hljs-keyword">long</span> lastDiscardCount = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">int</span> errorCount = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-comment">// addLast</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    lock.lockInterruptibly();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e2) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">long</span> discardCount = DruidDataSource.<span class="hljs-keyword">this</span>.discardCount;<br>                <span class="hljs-keyword">boolean</span> discardChanged = discardCount - lastDiscardCount &gt; <span class="hljs-number">0</span>;<br>                lastDiscardCount = discardCount;<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">boolean</span> emptyWait = <span class="hljs-keyword">true</span>;<br><br>                    <span class="hljs-keyword">if</span> (createError != <span class="hljs-keyword">null</span><br>                            &amp;&amp; poolingCount == <span class="hljs-number">0</span><br>                            &amp;&amp; !discardChanged) &#123;<br>                        emptyWait = <span class="hljs-keyword">false</span>;<br>                    &#125;<br><br>                    <span class="hljs-keyword">if</span> (emptyWait<br>                            &amp;&amp; asyncInit &amp;&amp; createCount &lt; initialSize) &#123;<br>                        emptyWait = <span class="hljs-keyword">false</span>;<br>                    &#125;<br><br>                    <span class="hljs-keyword">if</span> (emptyWait) &#123;<br>                        <span class="hljs-comment">// 必须存在线程等待，才创建连接</span><br>                        <span class="hljs-keyword">if</span> (poolingCount &gt;= notEmptyWaitThreadCount <span class="hljs-comment">//</span><br>                                &amp;&amp; (!(keepAlive &amp;&amp; activeCount + poolingCount &lt; minIdle))<br>                                &amp;&amp; !isFailContinuous()<br>                        ) &#123;<br>                            empty.await();<br>                        &#125;<br><br>                        <span class="hljs-comment">// 防止创建超过maxActive数量的连接</span><br>                        <span class="hljs-keyword">if</span> (activeCount + poolingCount &gt;= maxActive) &#123;<br>                            empty.await();<br>                            <span class="hljs-keyword">continue</span>;<br>                        &#125;<br>                    &#125;<br><br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    lastCreateError = e;<br>                    lastErrorTimeMillis = System.currentTimeMillis();<br><br>                    <span class="hljs-keyword">if</span> (!closing) &#123;<br>                        LOG.<span class="hljs-keyword">error</span>(<span class="hljs-string">&quot;create connection Thread Interrupted, url: &quot;</span> + jdbcUrl, e);<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    lock.unlock();<br>                &#125;<br><br>                PhysicalConnectionInfo connection = <span class="hljs-keyword">null</span>;<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    connection = createPhysicalConnection();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    LOG.<span class="hljs-keyword">error</span>(<span class="hljs-string">&quot;create connection SQLException, url: &quot;</span> + jdbcUrl + <span class="hljs-string">&quot;, errorCode &quot;</span> + e.getErrorCode()<br>                              + <span class="hljs-string">&quot;, state &quot;</span> + e.getSQLState(), e);<br><br>                    errorCount++;<br>                    <span class="hljs-keyword">if</span> (errorCount &gt; connectionErrorRetryAttempts &amp;&amp; timeBetweenConnectErrorMillis &gt; <span class="hljs-number">0</span>) &#123;<br>                        <span class="hljs-comment">// fail over retry attempts</span><br>                        setFailContinuous(<span class="hljs-keyword">true</span>);<br>                        <span class="hljs-keyword">if</span> (failFast) &#123;<br>                            lock.lock();<br>                            <span class="hljs-keyword">try</span> &#123;<br>                                notEmpty.signalAll();<br>                            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                                lock.unlock();<br>                            &#125;<br>                        &#125;<br><br>                        <span class="hljs-keyword">if</span> (breakAfterAcquireFailure) &#123;<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br><br>                        <span class="hljs-keyword">try</span> &#123;<br>                            Thread.sleep(timeBetweenConnectErrorMillis);<br>                        &#125; <span class="hljs-keyword">catch</span> (InterruptedException interruptEx) &#123;<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (RuntimeException e) &#123;<br>                    LOG.<span class="hljs-keyword">error</span>(<span class="hljs-string">&quot;create connection RuntimeException&quot;</span>, e);<br>                    setFailContinuous(<span class="hljs-keyword">true</span>);<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125; <span class="hljs-keyword">catch</span> (Error e) &#123;<br>                    LOG.<span class="hljs-keyword">error</span>(<span class="hljs-string">&quot;create connection Error&quot;</span>, e);<br>                    setFailContinuous(<span class="hljs-keyword">true</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (connection == <span class="hljs-keyword">null</span>) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">boolean</span> result = put(connection);<br>                <span class="hljs-keyword">if</span> (!result) &#123;<br>                    JdbcUtils.close(connection.getPhysicalConnection());<br>                    LOG.info(<span class="hljs-string">&quot;put physical connection to pool failed.&quot;</span>);<br>                &#125;<br><br>                errorCount = <span class="hljs-number">0</span>; <span class="hljs-comment">// reset errorCount</span><br><br>                <span class="hljs-keyword">if</span> (closing || closed) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>问题汇总</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Druid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DroolsKIE</title>
    <link href="/2022/04/25/yuque/DroolsKIE/"/>
    <url>/2022/04/25/yuque/DroolsKIE/</url>
    
    <content type="html"><![CDATA[<p>KIE 会话可以是无状态的，也可以是有状态的。在无状态 KIE 会话中，   来自 KIE 会话的先前调用（先前的会话状态）的数据在会话调用之间被丢弃。在有状态的 KIE 会话中，将保留该数据。您使用的 KIE 会话的类型取决于您的项目要求以及希望如何保留来自不同资产调用的数据。</p><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><p>JDK 1.8</p><p>Drools 7.35.0.Final</p><p>Lombok</p><h2 id="KIE-无状态会话"><a href="#KIE-无状态会话" class="headerlink" title="KIE 无状态会话"></a>KIE 无状态会话</h2><p>无状态 KIE 会话是不使用推断随时间对事实进行迭代更改的会话。在无状态的 KIE 会话中，来自 KIE 会话的先前调用（先前的会话状态）的数据在会话调用之间被丢弃，而在有状态的 KIE 会话中，该数据被保留。无状态 KIE 会话的行为类似于功能，因为它产生的结果由 KIE 基础的内容以及传递到 KIE 会话中以在特定时间点执行的数据确定。KIE 会话不存储先前传递到 KIE 会话中的任何数据。</p><p>无状态 KIE 会话通常用于以下用例：</p><ul><li>验证，例如验证某人有资格获得抵押贷款</li><li>计算，例如计算抵押贷款溢价</li><li>路由和过滤，例如将传入电子邮件分类到文件夹中或将传入电子邮件发送到目的地</li></ul><p>例如，考虑以下驾驶执照数据模型和示例 DRL 规则：</p><p><em>驾驶执照申请的数据模型</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Applicant</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> valid;<br>&#125;<br></code></pre></td></tr></table></figure><p><em>驾驶执照申请的示例 DRL 规则</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">package this.is.your.package<br><br>import this.is.your.Applicant<br><br>rule <span class="hljs-string">&quot;Is of valid age&quot;</span><br>when<br>  <span class="hljs-variable">$a</span> : Applicant(age &lt; 18)<br><span class="hljs-keyword">then</span><br>  <span class="hljs-variable">$a</span>.setValid(<span class="hljs-literal">false</span>);<br>end<br></code></pre></td></tr></table></figure><p>该<code>Is of valid age</code>规则取消了任何未满 18 岁的申请人的资格。将<code>Applicant</code>对象插入 Drools 引擎后，Drools 引擎将评估每个规则的约束并搜索匹配项。<code>&quot;objectType&quot;</code>总是隐含该约束，然后评估任何数量的显式字段约束。该变量<code>$a</code>是在规则结果中引用匹配对象的绑定变量。</p><ul><li>美元符号（<code>$</code>）是可选的，有助于区分变量名和字段名。</li></ul><p><em>创建 KIE 容器</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">KieServices</span> <span class="hljs-variable">kieServices</span> <span class="hljs-operator">=</span> KieServices.Factory.get();<br><span class="hljs-type">KieContainer</span> <span class="hljs-variable">kContainer</span> <span class="hljs-operator">=</span> kieServices.getKieClasspathContainer();<br></code></pre></td></tr></table></figure><p>此代码编译在类路径上找到的所有规则文件，并将此编译的结果（一个<code>KieModule</code>对象）添加到中<code>KieContainer</code>。</p><p>最后，<code>StatelessKieSession</code>从实例化该对象，<code>KieContainer</code>并针对指定的数据执行该对象：</p><p><em>实例化无状态 KIE 会话并输入数据</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StatelessKieSession</span> <span class="hljs-variable">kSession</span> <span class="hljs-operator">=</span> kContainer.newStatelessKieSession();<br><span class="hljs-type">Applicant</span> <span class="hljs-variable">applicant</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Applicant</span>(<span class="hljs-string">&quot;Mr John Smith&quot;</span>, <span class="hljs-number">16</span>, <span class="hljs-literal">true</span>);<br><br>assertTrue(applicant.isValid());<br>kSession.execute(applicant);<br>assertFalse(applicant.isValid());<br></code></pre></td></tr></table></figure><p>在无状态 KIE 会话配置中，<code>execute()</code>调用用作实例化<code>KieSession</code>对象，添加所有用户数据并执行用户命令，调用<code>fireAllRules()</code>然后调用的组合方法<code>dispose()</code>。因此，对于无状态 KIE 会话，不需要像在有状态 KIE 会话中那样在会话调用后调用<code>fireAllRules()</code>或调用<code>dispose()</code>。</p><p>在这种情况下，指定的申请人未满 18 岁，因此申请被拒绝。</p><p>有关更复杂的用例，请参见以下示例。本示例使用无状态 KIE 会话并针对可迭代对象列表（例如集合）执行规则。</p><p>用于驾驶执照申请的扩展数据模型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Applicant</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-keyword">private</span> Date dateApplied;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> valid;<br>&#125;<br></code></pre></td></tr></table></figure><p>扩大了驾驶执照申请的 DRL 规则集</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">package</span> <span class="hljs-title">th</span><span class="hljs-keyword">is</span>.<span class="hljs-keyword">is</span>.your.<span class="hljs-keyword">package</span><br><br><span class="hljs-title">import th</span><span class="hljs-keyword">is</span>.<span class="hljs-keyword">is</span>.your.Applicant<br>import this.<span class="hljs-keyword">is</span>.your.Application<br><br>rule <span class="hljs-string">&quot;Is of valid age&quot;</span><br><span class="hljs-keyword">when</span><br>  Applicant(age &lt; <span class="hljs-number">18</span>)<br>  $a : <span class="hljs-type">Application</span>()<br><span class="hljs-keyword">then</span><br>  $a.setValid(<span class="hljs-literal">false</span>);<br><span class="hljs-keyword">end</span><br><br>rule <span class="hljs-string">&quot;Application was made this year&quot;</span><br><span class="hljs-keyword">when</span><br>  $a : <span class="hljs-type">Application</span>(dateApplied &gt; <span class="hljs-string">&quot;01-jan-2009&quot;</span>)<br><span class="hljs-keyword">then</span><br>  $a.setValid(<span class="hljs-literal">false</span>);<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p><em>在无状态 KIE 会话中可迭代执行的扩展 Java 源代码</em></p><h2 id="KIE-有状态会话"><a href="#KIE-有状态会话" class="headerlink" title="KIE 有状态会话"></a>KIE 有状态会话</h2>]]></content>
    
    
    <categories>
      
      <category>Drools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Drools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Drools和QLExpress 校验速度对比</title>
    <link href="/2022/04/25/yuque/Drools%E5%92%8CQLExpress%20%E6%A0%A1%E9%AA%8C%E9%80%9F%E5%BA%A6%E5%AF%B9%E6%AF%94/"/>
    <url>/2022/04/25/yuque/Drools%E5%92%8CQLExpress%20%E6%A0%A1%E9%AA%8C%E9%80%9F%E5%BA%A6%E5%AF%B9%E6%AF%94/</url>
    
    <content type="html"><![CDATA[<p>Drools 和 QLExpress 校验速度对比</p><h2 id="相关信息"><a href="#相关信息" class="headerlink" title="相关信息"></a>相关信息</h2><ul><li>Drools <a href="https://www.drools.org/">https://www.drools.org/</a></li><li>QLExpress <a href="https://github.com/alibaba/QLExpress">https://github.com/alibaba/QLExpress</a></li></ul><h2 id="相关数据"><a href="#相关数据" class="headerlink" title="相关数据"></a>相关数据</h2><h3 id="配置相关"><a href="#配置相关" class="headerlink" title="配置相关"></a>配置相关</h3><h4 id="程序配置"><a href="#程序配置" class="headerlink" title="程序配置"></a>程序配置</h4><p>实体机<br>CPU: i5 10400 (6c12t)<br>内存: 64G</p><h4 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h4><p>虚拟机<br>Vmware -&gt; Centos 7 -&gt; Docker -&gt; Postgres 13<br>CPU: i5 10400 (3c)<br>内存: 8G</p><h4 id="百万级"><a href="#百万级" class="headerlink" title="百万级"></a>百万级</h4><table><thead><tr><th>校验类型</th><th>检验详细</th><th>总数据量</th><th>异常数据量</th><th>耗时(秒)</th></tr></thead><tbody><tr><td>Drools</td><td>3 以 A 开头的字段(用 Drools 调用 Java 代码)</td><td>1310720</td><td>655360</td><td>362</td></tr><tr><td>Drools</td><td>4 身份证合法性校验(用 Drools 调用 Java 代码)</td><td>1310720</td><td>1</td><td>423</td></tr><tr><td>QLExpress</td><td>5 以 A 开头字段(纯 QLExpress)</td><td>1310720</td><td>655360</td><td>64</td></tr><tr><td>QLExpress</td><td>6 身份证合法性校验(用 QLExpress 调用 Java 代码)</td><td>1310720</td><td>1</td><td>581</td></tr></tbody></table><h4 id="千万级"><a href="#千万级" class="headerlink" title="千万级"></a>千万级</h4><table><thead><tr><th>校验类型</th><th>检验详细</th><th>总数据量</th><th>异常数据量</th><th>耗时(秒)</th></tr></thead><tbody><tr><td>Drools</td><td>3 以 A 开头的字段(用 Drools 调用 Java 代码)</td><td>13107200</td><td>6553600</td><td>3617</td></tr><tr><td>Drools</td><td>4 身份证合法性校验(用 Drools 调用 Java 代码)</td><td>13107200</td><td>3932160</td><td>4480</td></tr><tr><td>QLExpress</td><td>5 以 A 开头字段(纯 QLExpress)</td><td>13107200</td><td>6553600</td><td>5423</td></tr><tr><td>QLExpress</td><td>6 身份证合法性校验(用 QLExpress 调用 Java 代码)</td><td>13107200</td><td>3932160</td><td>6283</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Drools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Drools</tag>
      
      <tag>QLExpress</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 8. 批量导出导入</title>
    <link href="/2022/04/25/yuque/Docker%208.%20%E6%89%B9%E9%87%8F%E5%AF%BC%E5%87%BA%E5%AF%BC%E5%85%A5/"/>
    <url>/2022/04/25/yuque/Docker%208.%20%E6%89%B9%E9%87%8F%E5%AF%BC%E5%87%BA%E5%AF%BC%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>Docker 如何批量导出导入镜像。</p><h2 id="逐个导出镜像"><a href="#逐个导出镜像" class="headerlink" title="逐个导出镜像"></a>逐个导出镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>IMAGES_LIST=($(docker  images   | sed  <span class="hljs-string">&#x27;1d&#x27;</span> | awk  <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>))<br>IMAGES_NM_LIST=($(docker  images   | sed  <span class="hljs-string">&#x27;1d&#x27;</span> | awk  <span class="hljs-string">&#x27;&#123;print $1&quot;-&quot;$2&#125;&#x27;</span>| awk -F/ <span class="hljs-string">&#x27;&#123;print $NF&#125;&#x27;</span>))<br>IMAGES_NUM=<span class="hljs-variable">$&#123;#IMAGES_LIST[*]&#125;</span><br><span class="hljs-keyword">for</span>((i=0;i&lt;<span class="hljs-variable">$IMAGES_NUM</span>;i++))<br><span class="hljs-keyword">do</span><br>  docker save <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;IMAGES_LIST[$i]&#125;</span>&quot;</span>  -o <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;IMAGES_NM_LIST[$i]&#125;</span>&quot;</span>.tar.gz<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>‘#’注意 这个慎用，如果一个镜像有多个版本，容易出现问题，采用下面的批量导入</p><h2 id="批量导入到一个压缩包"><a href="#批量导入到一个压缩包" class="headerlink" title="批量导入到一个压缩包"></a>批量导入到一个压缩包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>IMAGES_LIST=($(docker  images   | sed  <span class="hljs-string">&#x27;1d&#x27;</span> | awk  <span class="hljs-string">&#x27;&#123;print $1&quot;:&quot;$2&#125;&#x27;</span>))<br>docker save <span class="hljs-variable">$&#123;IMAGES_LIST[*]&#125;</span>  -o  all-images.tar.gz<br></code></pre></td></tr></table></figure><h2 id="逐个导入镜像"><a href="#逐个导入镜像" class="headerlink" title="逐个导入镜像"></a>逐个导入镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> <span class="hljs-variable">$DIR</span>/images_file<br><span class="hljs-keyword">for</span> image_name <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">ls</span> ./)<br><span class="hljs-keyword">do</span><br>  docker load &lt; <span class="hljs-variable">$&#123;image_name&#125;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 7. 远程访问</title>
    <link href="/2022/04/25/yuque/Docker%207.%20%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/"/>
    <url>/2022/04/25/yuque/Docker%207.%20%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/</url>
    
    <content type="html"><![CDATA[<p>Docker 如何配置远程访问。</p><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><h3 id="勾选-Settings-General-Expose-daemon-on-tcp-x2F-x2F-localhost-2375-without-TLS"><a href="#勾选-Settings-General-Expose-daemon-on-tcp-x2F-x2F-localhost-2375-without-TLS" class="headerlink" title="勾选 Settings-General-Expose daemon on tcp:&#x2F;&#x2F;localhost:2375 without TLS"></a>勾选 Settings-General-Expose daemon on tcp:&#x2F;&#x2F;localhost:2375 without TLS</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1650900521566-04e48e2f-25b4-4978-8888-ddc6ff292eb6.png#clientId=ub8f9e1f3-af0e-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u52fef0f1&name=Windows%E5%9B%BE%E5%83%8F%E7%95%8C%E9%9D%A2%E5%8B%BE%E9%80%89.png&originHeight=603&originWidth=1606&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=105916&status=done&style=none&taskId=u6cf2109c-03e7-4178-aead-9249bcad892&title=" alt="Windows图像界面勾选.png"></p><h3 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h3><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">netsh<span class="hljs-built_in"> interface </span>portproxy <span class="hljs-built_in">add</span> v4tov4 <span class="hljs-attribute">listenport</span>=2375 <span class="hljs-attribute">connectaddress</span>=127.0.0.1 <span class="hljs-attribute">connectport</span>=2375 <span class="hljs-attribute">listenaddress</span>=&lt;your-public-ip&gt; <span class="hljs-attribute">protocol</span>=tcp<br></code></pre></td></tr></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">netsh<span class="hljs-built_in"> interface </span>portproxy <span class="hljs-built_in">add</span> v4tov4 <span class="hljs-attribute">listenport</span>=2375 <span class="hljs-attribute">connectaddress</span>=127.0.0.1 <span class="hljs-attribute">connectport</span>=2375 <span class="hljs-attribute">listenaddress</span>=192.168.102.105 <span class="hljs-attribute">protocol</span>=tcp<br></code></pre></td></tr></table></figure><h2 id="CentOS-7"><a href="#CentOS-7" class="headerlink" title="CentOS 7"></a>CentOS 7</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nano /usr/lib/systemd/system/docker.service<br></code></pre></td></tr></table></figure><h3 id="在-ExecStart-x3D-中追加-H-tcp-0-0-0-0-2375-H-unix-var-run-docker-sock"><a href="#在-ExecStart-x3D-中追加-H-tcp-0-0-0-0-2375-H-unix-var-run-docker-sock" class="headerlink" title="在 ExecStart&#x3D;中追加-H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock"></a>在 ExecStart&#x3D;中追加<code>-H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock</code></h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1650900526436-dea1c188-d2ad-477d-a8b9-9f8e90b34f10.png#clientId=ub8f9e1f3-af0e-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u841c176f&name=%E8%BF%BD%E5%8A%A0%E5%8F%82%E6%95%B0.png&originHeight=769&originWidth=2088&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=87556&status=done&style=none&taskId=u8d5c26da-e7f4-4caf-92fe-f7fc5cec331&title=" alt="追加参数.png"></p><h3 id="保存-重启-Docker-或-直接重启服务器"><a href="#保存-重启-Docker-或-直接重启服务器" class="headerlink" title="保存 重启 Docker 或 直接重启服务器"></a>保存 重启 Docker 或 直接重启服务器</h3><h3 id="验证-访问-http-ip-2375-version-会有-json-数据响应"><a href="#验证-访问-http-ip-2375-version-会有-json-数据响应" class="headerlink" title="验证 访问 http://ip:2375/version 会有 json 数据响应"></a>验证 访问 <code>http://ip:2375/version</code> 会有 json 数据响应</h3><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>浏览器访问 <a href="http://192.168.102.105:2375/">http://192.168.102.105:2375/</a> 提示</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;page not found&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 6. 公共服务</title>
    <link href="/2022/04/25/yuque/Docker%206.%20%E5%85%AC%E5%85%B1%E6%9C%8D%E5%8A%A1/"/>
    <url>/2022/04/25/yuque/Docker%206.%20%E5%85%AC%E5%85%B1%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p>Docker 公共服务。</p><h2 id="公共服务"><a href="#公共服务" class="headerlink" title="公共服务"></a>公共服务</h2><h3 id="MySQL-5-7-数据库"><a href="#MySQL-5-7-数据库" class="headerlink" title="MySQL 5.7 数据库"></a>MySQL 5.7 数据库</h3><p>链接字符串: jdbc:mysql:&#x2F;&#x2F;192.168.102.115:3306<br>端口: 3306<br>账号: root<br>密码: 123456</p><h3 id="Postgres-12-3-数据库"><a href="#Postgres-12-3-数据库" class="headerlink" title="Postgres 12.3 数据库"></a>Postgres 12.3 数据库</h3><p>链接字符串: jdbc:postgresql:&#x2F;&#x2F;192.168.102.115:5432&#x2F;postgres<br>端口: 5432<br>账号: postgres<br>密码: 123456</p><h3 id="Oracle-11g-数据库"><a href="#Oracle-11g-数据库" class="headerlink" title="Oracle 11g 数据库"></a>Oracle 11g 数据库</h3><p>链接字符串: jdbc:oracle:thin:@192.168.102.115:1521:XE<br>端口: 1521<br>账号: system<br>密码: oracle</p><h3 id="IRIS-2020-2-数据库-ps-总链接数限制-5"><a href="#IRIS-2020-2-数据库-ps-总链接数限制-5" class="headerlink" title="IRIS 2020.2 数据库 ps:总链接数限制:5"></a>IRIS 2020.2 数据库 ps:总链接数限制:5</h3><p>链接字符串: jdbc:IRIS:&#x2F;&#x2F;192.168.102.115:51773&#x2F;USER<br>端口: 51773<br>账号: _SYSTEM<br>密码: 123456<br>web 管理: <a href="http://192.168.102.115:52773/csp/sys/UtilHome.csp">http://192.168.102.115:52773/csp/sys/UtilHome.csp</a></p><h3 id="Cache-2016-2-数据库-ps-总链接数限制-250"><a href="#Cache-2016-2-数据库-ps-总链接数限制-250" class="headerlink" title="Cache 2016.2 数据库 ps:总链接数限制:250"></a>Cache 2016.2 数据库 ps:总链接数限制:250</h3><p>链接字符串: jdbc:Cache:&#x2F;&#x2F;192.168.102.115:1972&#x2F;USER<br>端口: 1972<br>账号: _SYSTEM<br>密码: sys<br>web 管理: <a href="http://192.168.102.115:52772/csp/sys/UtilHome.csp">http://192.168.102.115:52772/csp/sys/UtilHome.csp</a></p><h3 id="Redis-6-0-数据库"><a href="#Redis-6-0-数据库" class="headerlink" title="Redis 6.0 数据库"></a>Redis 6.0 数据库</h3><p>HOST: 192.168.102.115<br>端口: 6379</p><h3 id="Nginx-Web-UI-1-9-3-图形化-Nginx-配置工具"><a href="#Nginx-Web-UI-1-9-3-图形化-Nginx-配置工具" class="headerlink" title="Nginx Web UI 1.9.3 图形化 Nginx 配置工具"></a>Nginx Web UI 1.9.3 图形化 Nginx 配置工具</h3><p>URL: 192.168.102.115:8081<br>账号: josway<br>密码: Aa123456</p>]]></content>
    
    
    <categories>
      
      <category>docker教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 5. 相关文档</title>
    <link href="/2022/04/25/yuque/Docker%205.%20%E7%9B%B8%E5%85%B3%E6%96%87%E6%A1%A3/"/>
    <url>/2022/04/25/yuque/Docker%205.%20%E7%9B%B8%E5%85%B3%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<p>Docker 相关文档。</p><h2 id="各种文档"><a href="#各种文档" class="headerlink" title="各种文档"></a>各种文档</h2><h3 id="Docker-教程相关"><a href="#Docker-教程相关" class="headerlink" title="Docker 教程相关"></a>Docker 教程相关</h3><p><a href="https://www.runoob.com/docker/docker-tutorial.html">https://www.runoob.com/docker/docker-tutorial.html</a></p><p><a href="https://how2j.cn/k/docker/docker-docker/2005.html">https://how2j.cn/k/docker/docker-docker/2005.html</a></p><p><a href="https://yeasy.gitbook.io/docker_practice/">https://yeasy.gitbook.io/docker_practice&#x2F;</a></p><h3 id="Docker-官方文档"><a href="#Docker-官方文档" class="headerlink" title="Docker 官方文档"></a>Docker 官方文档</h3><p><a href="https://docs.docker.com/">https://docs.docker.com/</a></p><h3 id="Docker-镜像官方文档"><a href="#Docker-镜像官方文档" class="headerlink" title="Docker 镜像官方文档"></a>Docker 镜像官方文档</h3><p><a href="https://hub.docker.com/">https://hub.docker.com/</a></p>]]></content>
    
    
    <categories>
      
      <category>docker教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 4. 练习</title>
    <link href="/2022/04/25/yuque/Docker%204.%20%E7%BB%83%E4%B9%A0/"/>
    <url>/2022/04/25/yuque/Docker%204.%20%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>Docker 练习 环境。</p><h2 id="服务器相关"><a href="#服务器相关" class="headerlink" title="服务器相关"></a>服务器相关</h2><h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><ul><li>4 核心+12G 内存+128G 固态+500G 机械</li><li>IP 地址: 192.168.102.115</li><li>账号: josway</li><li>密码: 123456</li><li>ssh 端口: 22</li></ul><p>可直接你喜欢的 ssh 工具直接链接.</p><h3 id="网页端服务器管理工具-Cockpit"><a href="#网页端服务器管理工具-Cockpit" class="headerlink" title="网页端服务器管理工具 Cockpit"></a>网页端服务器管理工具 Cockpit</h3><p><a href="https://192.168.102.115:9090/">https://192.168.102.115:9090/</a><br>账号: josway<br>密码: 123456</p><h3 id="网页端-Docker-管理工具-Portainer"><a href="#网页端-Docker-管理工具-Portainer" class="headerlink" title="网页端 Docker 管理工具 Portainer"></a>网页端 Docker 管理工具 Portainer</h3><p><a href="http://192.168.102.115:9000/">http://192.168.102.115:9000</a><br>账号: josway<br>密码: 12345678</p>]]></content>
    
    
    <categories>
      
      <category>docker教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 3. 示例</title>
    <link href="/2022/04/25/yuque/Docker%203.%20%E7%A4%BA%E4%BE%8B/"/>
    <url>/2022/04/25/yuque/Docker%203.%20%E7%A4%BA%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<p>Docker 实例 部分。</p><h2 id="简单示例-运行一些容器"><a href="#简单示例-运行一些容器" class="headerlink" title="简单示例 运行一些容器"></a>简单示例 运行一些容器</h2><h3 id="注-只是简单示例-生产环境建议把数据库持久化数据映射到容器外部"><a href="#注-只是简单示例-生产环境建议把数据库持久化数据映射到容器外部" class="headerlink" title="注: 只是简单示例,生产环境建议把数据库持久化数据映射到容器外部 !!!"></a>注: 只是简单示例,生产环境建议把数据库持久化数据映射到容器外部 !!!</h3><p>具体可在 <a href="https://hub.docker.com/">https://hub.docker.com/</a> 直接搜索并查看官方文档!</p><h3 id="MySQL-Docker-容器运行"><a href="#MySQL-Docker-容器运行" class="headerlink" title="MySQL Docker 容器运行"></a>MySQL Docker 容器运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -itd --name mysql57 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -itd --name mysql57 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -v mysql57_data:/var/lib/mysql mysql:5.7 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --lower_case_table_names=1<br></code></pre></td></tr></table></figure><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><ul><li>run 运行</li><li>-itd 组合命令:<ul><li>-i 以交互模式运行容器，通常与 -t 同时使用；</li><li>-t 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li><li>-d 后台运行容器，并返回容器 ID；</li></ul></li><li>–name mysql5731 为容器指定一个(独一无二)名字叫 mysql5731</li><li>-p 3306:3306 映射容器服务的 3306 端口到宿主机的 3306 端口。外部可以直接通过 宿主机 ip:3306 访问到 Mysql 的服务。(:左边是宿主机端口 , :右边是容器服务端口)</li><li>-e MYSQL_ROOT_PASSWORD&#x3D;123456   设置 MySQL 服务 root 用户的密码为 123456</li><li>mysql:5.7.31 需要启动的 镜像名称:版本号</li></ul><h3 id="Postgres-Docker-容器运行"><a href="#Postgres-Docker-容器运行" class="headerlink" title="Postgres Docker 容器运行"></a>Postgres Docker 容器运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -itd --name postgres13 -p 5432:5432 -e POSTGRES_PASSWORD=123456 postgres:13<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -itd --name postgres13 -p 5432:5432 -e POSTGRES_PASSWORD=123456 -e PGDATA=/var/lib/postgresql/data/pgdata -v postgres13_data:/var/lib/postgresql/data postgres:13<br></code></pre></td></tr></table></figure><h4 id="解释-1"><a href="#解释-1" class="headerlink" title="解释"></a>解释</h4><ul><li>–name postgres123 为容器指定一个(独一无二)名字叫 postgres123</li><li>-p 5432:5432 映射容器服务的 5432 端口到宿主机的 5432 端口。外部可以直接通过 宿主机 ip:5432 访问到 Postgres 的服务。(:左边是宿主机端口 , :右边是容器服务端口)  (宿主机端口号独一无二)</li><li>-e POSTGRES_PASSWORD&#x3D;123456   设置 Postgres 服务 root 用户的密码为 123456</li><li>postgres:12.3 需要启动的 镜像名称:版本号</li></ul><h3 id="Oracle-Docker-容器运行"><a href="#Oracle-Docker-容器运行" class="headerlink" title="Oracle Docker 容器运行"></a>Oracle Docker 容器运行</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> -itd --name oraclexe11g -p 1521:1521 -e <span class="hljs-attribute">ORACLE_ALLOW_REMOTE</span>=<span class="hljs-literal">true</span> oracleinanutshell/oracle-xe-11g<br></code></pre></td></tr></table></figure><h4 id="解释-2"><a href="#解释-2" class="headerlink" title="解释"></a>解释</h4><ul><li>–name oraclexe11g 为容器指定一个(独一无二)名字叫 oraclexe11g</li><li>-e ORACLE_ALLOW_REMOTE&#x3D;true   开启远程访问</li><li>oracleinanutshell&#x2F;oracle-xe-11g 需要启动的 镜像名称:版本号 注: 无冒号时默认启动 latest 版本!</li></ul><h3 id="Redis-Docker-容器运行"><a href="#Redis-Docker-容器运行" class="headerlink" title="Redis Docker 容器运行"></a>Redis Docker 容器运行</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -itd --name redis6 -p <span class="hljs-number">6379</span>:<span class="hljs-number">6379</span> redis:<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h4 id="解释-3"><a href="#解释-3" class="headerlink" title="解释"></a>解释</h4><ul><li>–name redis606 为容器指定一个(独一无二)名字叫 redis606</li><li>-p 5432:5432 映射容器服务的 6379 端口到宿主机的 6379 端口。外部可以直接通过 宿主机 ip:6379 访问到 Redis 的服务。(:左边是宿主机端口 , :右边是容器服务端口)  (宿主机端口号独一无二)</li><li>redis:6.0.6 需要启动的 镜像名称:版本号</li></ul><h3 id="Cache-x2F-IRIS-Docker-容器运行"><a href="#Cache-x2F-IRIS-Docker-容器运行" class="headerlink" title="Cache &#x2F; IRIS Docker 容器运行"></a>Cache &#x2F; IRIS Docker 容器运行</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -itd --name iriscommunity2020202110 -p <span class="hljs-number">52773</span>:<span class="hljs-number">52773</span> -p <span class="hljs-number">51773</span>:<span class="hljs-number">51773</span>  store/intersystems/iris-community:<span class="hljs-number">2020</span>.<span class="hljs-number">2.0.211.0</span><br></code></pre></td></tr></table></figure><h4 id="解释-4"><a href="#解释-4" class="headerlink" title="解释"></a>解释</h4><ul><li>–name iriscommunity2020202110 为容器指定一个(独一无二)名字叫 iriscommunity2020202110</li><li>-p 52773:52773 映射容器服务的 52773 端口到宿主机的 52773 端口。外部可以直接通过 宿主机 ip:52773 访问到 Cache &#x2F; IRIS 的服务。(:左边是宿主机端口 , :右边是容器服务端口)  (宿主机端口号独一无二)</li><li>-p 51773:51773 映射容器服务的 51773 端口到宿主机的 51773 端口。外部可以直接通过 宿主机 ip:51773 访问到 Cache &#x2F; IRIS 的服务。(:左边是宿主机端口 , :右边是容器服务端口)  (宿主机端口号独一无二)</li><li>store&#x2F;intersystems&#x2F;iris-community:2020.2.0.211.0   需要启动的 镜像名称:版本号</li></ul><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ul><li><a href="http://ip:52773/csp/sys/UtilHome.csp">http://ip:52773/csp/sys/UtilHome.csp</a></li><li>使用_SYSTEM 登录名和密码 SYS。(登录后需要更改密码。)</li></ul><h2 id="两种方式生成-Docker-image"><a href="#两种方式生成-Docker-image" class="headerlink" title="两种方式生成 Docker image"></a>两种方式生成 Docker image</h2><h3 id="1-使用现有的-Docker-Container-进行-Commit-操作获取-image"><a href="#1-使用现有的-Docker-Container-进行-Commit-操作获取-image" class="headerlink" title="1 使用现有的 Docker Container 进行 Commit 操作获取 image"></a>1 使用现有的 Docker Container 进行 Commit 操作获取 image</h3><h3 id="2-使用-Dockerfile"><a href="#2-使用-Dockerfile" class="headerlink" title="2 使用 Dockerfile"></a>2 使用 Dockerfile</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment">#基础镜像</span><br><span class="hljs-keyword">FROM</span> ubuntu:<span class="hljs-number">18.04</span><br><span class="hljs-comment">#维护者</span><br><span class="hljs-keyword">MAINTAINER</span> <span class="hljs-string">&quot;Josway&quot;</span><br><span class="hljs-comment">#复制文件并解压</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> jre/server-jre-8u261-linux-x64.tar.gz /root/jre/</span><br><span class="hljs-comment">#复制文件</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> target/visualization-0.0.1-SNAPSHOT.jar /root/webapps/</span><br><span class="hljs-comment">#环境变量设置</span><br><span class="hljs-keyword">ENV</span> JAVA_HOME=/root/jre/jdk1.<span class="hljs-number">8.0</span>_261<br><span class="hljs-keyword">ENV</span> CLASSPATH=$JAVA_HOME/bin<br><span class="hljs-keyword">ENV</span> PATH=.:$JAVA_HOME/bin:$PATH<br><span class="hljs-comment">#暴露端口</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span><br><span class="hljs-comment">#容器启动命令</span><br><span class="hljs-comment">#CMD [&quot;java&quot;,&quot;-version&quot;]</span><br><span class="hljs-comment">#入口点</span><br><span class="hljs-comment">#ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/root/webapps/drools-0.0.1-SNAPSHOT.jar&quot;,&quot;--spring.config.location=/root/config/application.properties&quot;]</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;java&quot;</span>,<span class="hljs-string">&quot;-jar&quot;</span>,<span class="hljs-string">&quot;/root/webapps/visualization-0.0.1-SNAPSHOT.jar&quot;</span>]</span><br></code></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="部署-ISCP"><a href="#部署-ISCP" class="headerlink" title="部署 ISCP"></a>部署 ISCP</h3><h4 id="方式-1-直接使用-dockerhub-现成的-tomcat-镜像"><a href="#方式-1-直接使用-dockerhub-现成的-tomcat-镜像" class="headerlink" title="方式 1 直接使用 dockerhub 现成的 tomcat 镜像"></a>方式 1 直接使用 dockerhub 现成的 tomcat 镜像</h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">docker run -it --name iscptest1 -p <span class="hljs-number">9091</span><span class="hljs-symbol">:</span><span class="hljs-number">8080</span> -v /home/josway/iscp/<span class="hljs-symbol">:/usr/local/tomcat/webapps/iscp/</span> <span class="hljs-symbol">tomcat:</span><span class="hljs-number">7.0</span>.<span class="hljs-number">105</span>-jdk8-openjdk<br></code></pre></td></tr></table></figure><h4 id="方式-2-自己-build-镜像-通过-Dockerfile"><a href="#方式-2-自己-build-镜像-通过-Dockerfile" class="headerlink" title="方式 2 自己 build 镜像,通过 Dockerfile"></a>方式 2 自己 build 镜像,通过 Dockerfile</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment">#基础镜像</span><br><span class="hljs-keyword">FROM</span> centos:<span class="hljs-number">7</span><br><span class="hljs-comment">#维护者</span><br><span class="hljs-keyword">MAINTAINER</span> <span class="hljs-string">&quot;Josway&quot;</span><br><span class="hljs-comment">#更新索引 安装软件 nano wget</span><br><span class="hljs-comment">#RUN yum update</span><br><span class="hljs-comment">#RUN yum install nano wget -y</span><br><span class="hljs-comment">#添加添加软件</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> server-jre-8u261-linux-x64.tar.gz /root/java/jre/</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> apache-tomcat-7.0.105.tar.gz /root/java/</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> iscp.tar /root/java/apache-tomcat-7.0.105/webapps/</span><br><span class="hljs-comment">#环境变量设置</span><br><span class="hljs-keyword">ENV</span> JAVA_HOME=/root/java/jre/jdk1.<span class="hljs-number">8.0</span>_261<br><span class="hljs-keyword">ENV</span> CLASSPATH=$JAVA_HOME/bin<br><span class="hljs-keyword">ENV</span> PATH=.:$JAVA_HOME/bin:$PATH<br><span class="hljs-comment">#容器启动后执行</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;sh&quot;</span>,<span class="hljs-string">&quot;/root/java/apache-tomcat-7.0.105/bin/catalina.sh&quot;</span>,<span class="hljs-string">&quot;run&quot;</span>]</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build -t iscp:1.0 . &amp;&amp; docker run --name iscptest2 -p 9092:8080 --privileged iscp:1.0<br></code></pre></td></tr></table></figure><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1650900620687-afd49b2f-62f1-4ee4-b781-1051c9e0707e.png#clientId=u6581a453-7659-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u65abb64c&margin=%5Bobject%20Object%5D&name=dockerfile-ensemble.png&originHeight=125&originWidth=337&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=3999&status=done&style=none&taskId=u5c75ef5d-48a5-42de-b082-fb9ff4b4e0b&title=" alt="dockerfile-ensemble.png"></p><blockquote><p>参考<br><a href="https://community.intersystems.com/post/containerization-cach%C3%A9">https://community.intersystems.com/post/containerization-cach%C3%A9</a><br><a href="https://github.com/zrml/ccontainermain">https://github.com/zrml/ccontainermain</a></p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> centos:<span class="hljs-number">7</span><br><br><span class="hljs-keyword">MAINTAINER</span> <span class="hljs-string">&quot;Josway&quot;</span><br><br><span class="hljs-comment"># update OS + dependencies &amp; run Caché silent instal</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> yum -y update \</span><br><span class="language-bash"> &amp;&amp; yum -y install <span class="hljs-built_in">which</span> tar hostname net-tools wget \</span><br><span class="language-bash"> &amp;&amp; yum -y clean all \</span><br><span class="language-bash"> &amp;&amp; <span class="hljs-built_in">ln</span> -sf /etc/locatime /usr/share/zoneinfo/Europe/Prague</span><br><br><span class="hljs-keyword">ARG</span> password=<span class="hljs-string">&quot;sys&quot;</span><br><span class="hljs-keyword">ARG</span> cache=ensemble-<span class="hljs-number">2016.2</span>.<span class="hljs-number">3.904</span>.<span class="hljs-number">11</span>-lnxrhx64<br><br><span class="hljs-keyword">ENV</span> TMP_INSTALL_DIR=/tmp/distrib<br><br><span class="hljs-comment"># vars for Caché silent install</span><br><span class="hljs-keyword">ENV</span> ISC_PACKAGE_INSTANCENAME=<span class="hljs-string">&quot;ENSEMBLE&quot;</span> \<br>    ISC_PACKAGE_INSTALLDIR=<span class="hljs-string">&quot;/opt/ensemble/&quot;</span> \<br>    ISC_PACKAGE_UNICODE=<span class="hljs-string">&quot;Y&quot;</span> \<br>    ISC_PACKAGE_CLIENT_COMPONENTS=<span class="hljs-string">&quot;&quot;</span> \<br>    ISC_PACKAGE_INITIAL_SECURITY=<span class="hljs-string">&quot;Normal&quot;</span> \<br>    ISC_PACKAGE_USER_PASSWORD=$&#123;password&#125;<br><br><span class="hljs-comment"># set-up and install Caché from distrib_tmp dir</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> <span class="hljs-variable">$&#123;TMP_INSTALL_DIR&#125;</span></span><br><br><span class="hljs-keyword">ADD</span><span class="language-bash"> <span class="hljs-variable">$&#123;cache&#125;</span>.tar.gz .</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ccontainermain /</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> cache.key /</span><br><br><span class="hljs-comment"># cache distributive</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> ./<span class="hljs-variable">$&#123;cache&#125;</span>/cinstall_silent \</span><br><span class="language-bash"> &amp;&amp; ccontrol stop <span class="hljs-variable">$ISC_PACKAGE_INSTANCENAME</span> quietly \</span><br><span class="language-bash"> &amp;&amp; <span class="hljs-built_in">rm</span> -rf <span class="hljs-variable">$TMP_INSTALL_DIR</span></span><br><br><span class="hljs-comment"># Caché container main process PID 1 (https://github.com/zrml/ccontainermain)</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> +x /ccontainermain</span><br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> <span class="hljs-variable">$&#123;ISC_PACKAGE_INSTALLDIR&#125;</span></span><br><br><span class="hljs-comment"># TCP sockets that can be accessed if user wants to (see &#x27;docker run -p&#x27; flag)</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">57772</span> <span class="hljs-number">1972</span><br><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;/ccontainermain&quot;</span>, <span class="hljs-string">&quot;-cconsole&quot;</span>, <span class="hljs-string">&quot;-i&quot;</span>, <span class="hljs-string">&quot;ensemble&quot;</span>]</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build -t ensemble:2016.2.3.904.11 . &amp;&amp; docker run -d -p 57772:57772 -p 1972:1972 --privileged ensemble:2016.2.3.904.11<br></code></pre></td></tr></table></figure><p><a href="http://localhost:57772/csp/sys/UtilHome.csp">http://localhost:57772/csp/sys/UtilHome.csp</a></p>]]></content>
    
    
    <categories>
      
      <category>docker教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 2. 基础</title>
    <link href="/2022/04/25/yuque/Docker%202.%20%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/04/25/yuque/Docker%202.%20%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>Docker 基础 部分。</p><h2 id="基本命令-直接翻译"><a href="#基本命令-直接翻译" class="headerlink" title="基本命令 直接翻译"></a>基本命令 直接翻译</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><code class="hljs bash">josway@josway-ThinkPad-E565: ~ $ docker                                     [14:47:51]<br><br>Usage:  docker [OPTIONS] COMMAND<br>用法:   docker [可选] 命令<br><br>A self-sufficient runtime <span class="hljs-keyword">for</span> containers<br>容器的自给自足运行时<br><br>Options:<br>可选:<br>      --config string      Location of client config files (default<br>                           <span class="hljs-string">&quot;/home/josway/.docker&quot;</span>)<br>                           客户端配置文件的位置(默认<br>                           “/home/josway/.docker”)<br>  -c, --context string     Name of the context to use to connect to the daemon<br>                           用于连接守护进程的上下文的名称<br>                           (overrides DOCKER_HOST <span class="hljs-built_in">env</span> var and default context<br>                           <span class="hljs-built_in">set</span> with <span class="hljs-string">&quot;docker context use&quot;</span>)<br>                           (覆盖DOCKER_HOST环境变量和默认上下文 设置为“docker上下文使用”)<br>  -D, --debug              Enable debug mode<br>                           启用调试模式<br>  -H, --host list          Daemon socket(s) to connect to<br>                           要连接到的守护进程套接字<br>  -l, --log-level string   Set the logging level<br>                           设置日志级别<br>                           (<span class="hljs-string">&quot;debug&quot;</span>|<span class="hljs-string">&quot;info&quot;</span>|<span class="hljs-string">&quot;warn&quot;</span>|<span class="hljs-string">&quot;error&quot;</span>|<span class="hljs-string">&quot;fatal&quot;</span>) (default <span class="hljs-string">&quot;info&quot;</span>)<br>                           (“调试”|“信息”|“警告”|“错误”|“致命”)(默认“信息”)<br>      --tls                Use TLS; implied by --tlsverify<br>                           使用TLS; 通过--tlsverify暗示<br>      --tlscacert string   Trust certs signed only by this CA (default<br>                           <span class="hljs-string">&quot;/home/josway/.docker/ca.pem&quot;</span>)<br>                           仅由该CA签名的信任证书（默认<br>                            “ /home/josway/.docker/ca.pem”）<br>      --tlscert string     Path to TLS certificate file (default<br>                           <span class="hljs-string">&quot;/home/josway/.docker/cert.pem&quot;</span>)<br>                           TLS证书文件的路径（默认<br>                            “ /home/josway/.docker/cert.pem”）<br>      --tlskey string      Path to TLS key file (default<br>                           <span class="hljs-string">&quot;/home/josway/.docker/key.pem&quot;</span>)<br>                           TLS密钥文件的路径（默认<br>                            “ /home/josway/.docker/key.pem”）<br>      --tlsverify          Use TLS and verify the remote<br>                           使用TLS并验证远程<br>  -v, --version            Print version information and quit<br>                           打印版本信息并退出<br><br>Management Commands:<br>管理命令：<br><br>  builder     Manage builds<br>              管理构建<br>  config      Manage Docker configs<br>              管理Docker配置<br>  container   Manage containers<br>              管理容器<br>  context     Manage contexts<br>              管理上下文<br>  engine      Manage the docker engine<br>              管理docker引擎<br>  image       Manage images<br>              管理图像<br>  network     Manage networks<br>              管理网络<br>  node        Manage Swarm nodes<br>              管理群节点<br>  plugin      Manage plugins<br>              管理插件<br>  secret      Manage Docker secrets<br>              管理Docker机密<br>  service     Manage services<br>              管理服务<br>  stack       Manage Docker stacks<br>              管理Docker堆栈<br>  swarm       Manage Swarm<br>              管理群<br>  system      Manage Docker<br>              管理Docker<br>  trust       Manage trust on Docker images<br>              管理对Docker映像的信任<br>  volume      Manage volumes<br>              管理卷<br><br>Commands:<br>  attach      Attach <span class="hljs-built_in">local</span> standard input, output, and error streams to a running container<br>              将本地标准输入，输出和错误流附加到正在运行的容器<br>  build       Build an image from a Dockerfile<br>              从Dockerfile构建映像<br>  commit      Create a new image from a container<span class="hljs-string">&#x27;s changes</span><br><span class="hljs-string">              根据容器的更改创建新图像</span><br><span class="hljs-string">  cp          Copy files/folders between a container and the local filesystem</span><br><span class="hljs-string">              在容器和本地文件系统之间复制文件/文件夹</span><br><span class="hljs-string">  create      Create a new container</span><br><span class="hljs-string">              创建一个新的容器</span><br><span class="hljs-string">  diff        Inspect changes to files or directories on a container&#x27;</span>s filesystem<br>              检查容器文件系统上文件或目录的更改<br>  events      Get real time events from the server<br>              从服务器获取实时事件<br>  <span class="hljs-built_in">exec</span>        Run a <span class="hljs-built_in">command</span> <span class="hljs-keyword">in</span> a running container<br>              在正在运行的容器中运行命令<br>  <span class="hljs-built_in">export</span>      Export a container<span class="hljs-string">&#x27;s filesystem as a tar archive</span><br><span class="hljs-string">              将容器的文件系统导出为tar存档</span><br><span class="hljs-string">  history     Show the history of an image</span><br><span class="hljs-string">              显示图像的历史记录</span><br><span class="hljs-string">  images      List images</span><br><span class="hljs-string">              列出图片</span><br><span class="hljs-string">  import      Import the contents from a tarball to create a filesystem image</span><br><span class="hljs-string">              从tarball导入内容以创建文件系统映像</span><br><span class="hljs-string">  info        Display system-wide information</span><br><span class="hljs-string">              显示系统范围的信息</span><br><span class="hljs-string">  inspect     Return low-level information on Docker objects</span><br><span class="hljs-string">              返回有关Docker对象的低级信息</span><br><span class="hljs-string">  kill        Kill one or more running containers</span><br><span class="hljs-string">              杀死一个或多个正在运行的容器</span><br><span class="hljs-string">  load        Load an image from a tar archive or STDIN</span><br><span class="hljs-string">              从tar存档或STDIN加载图像</span><br><span class="hljs-string">  login       Log in to a Docker registry</span><br><span class="hljs-string">              登录Docker注册表</span><br><span class="hljs-string">  logout      Log out from a Docker registry</span><br><span class="hljs-string">              从Docker注册表注销</span><br><span class="hljs-string">  logs        Fetch the logs of a container</span><br><span class="hljs-string">              提取容器的日志</span><br><span class="hljs-string">  pause       Pause all processes within one or more containers</span><br><span class="hljs-string">              暂停一个或多个容器中的所有进程</span><br><span class="hljs-string">  port        List port mappings or a specific mapping for the container</span><br><span class="hljs-string">              列出端口映射或容器的特定映射</span><br><span class="hljs-string">  ps          List containers</span><br><span class="hljs-string">              列出容器</span><br><span class="hljs-string">  pull        Pull an image or a repository from a registry</span><br><span class="hljs-string">              从注册表中提取图像或存储库</span><br><span class="hljs-string">  push        Push an image or a repository to a registry</span><br><span class="hljs-string">              将映像或存储库推送到注册表</span><br><span class="hljs-string">  rename      Rename a container</span><br><span class="hljs-string">              重命名容器</span><br><span class="hljs-string">  restart     Restart one or more containers</span><br><span class="hljs-string">              重新启动一个或多个容器</span><br><span class="hljs-string">  rm          Remove one or more containers</span><br><span class="hljs-string">              取出一个或多个容器</span><br><span class="hljs-string">  rmi         Remove one or more images</span><br><span class="hljs-string">              删除一个或多个图像</span><br><span class="hljs-string">  run         Run a command in a new container</span><br><span class="hljs-string">              在新容器中运行命令</span><br><span class="hljs-string">  save        Save one or more images to a tar archive (streamed to STDOUT by default)</span><br><span class="hljs-string">              将一个或多个图像保存到tar存档（默认情况下流式传输到STDOUT）</span><br><span class="hljs-string">  search      Search the Docker Hub for images</span><br><span class="hljs-string">              在Docker Hub中搜索图像</span><br><span class="hljs-string">  start       Start one or more stopped containers</span><br><span class="hljs-string">              启动一个或多个已停止的容器</span><br><span class="hljs-string">  stats       Display a live stream of container(s) resource usage statistics</span><br><span class="hljs-string">              显示容器资源使用情况统计信息的实时流</span><br><span class="hljs-string">  stop        Stop one or more running containers</span><br><span class="hljs-string">              停止一个或多个运行中的容器</span><br><span class="hljs-string">  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE</span><br><span class="hljs-string">              创建引用了SOURCE_IMAGE的标签TARGET_IMAGE</span><br><span class="hljs-string">  top         Display the running processes of a container</span><br><span class="hljs-string">              显示容器的运行过程</span><br><span class="hljs-string">  unpause     Unpause all processes within one or more containers</span><br><span class="hljs-string">              取消暂停一个或多个容器中的所有进程</span><br><span class="hljs-string">  update      Update configuration of one or more containers</span><br><span class="hljs-string">              更新一个或多个容器的配置</span><br><span class="hljs-string">  version     Show the Docker version information</span><br><span class="hljs-string">              显示Docker版本信息</span><br><span class="hljs-string">  wait        Block until one or more containers stop, then print their exit codes</span><br><span class="hljs-string">              阻塞直到一个或多个容器停止，然后打印其退出代码</span><br><span class="hljs-string"></span><br><span class="hljs-string">Run &#x27;</span>docker COMMAND --<span class="hljs-built_in">help</span><span class="hljs-string">&#x27; for more information on a command.</span><br><span class="hljs-string">运行“ docker COMMAND --help”以获取有关命令的更多信息。</span><br></code></pre></td></tr></table></figure><h3 id="注意-docker-COMMAND-–help"><a href="#注意-docker-COMMAND-–help" class="headerlink" title="注意 docker COMMAND –help"></a>注意 docker COMMAND –help</h3><p>不知道命令该怎么写的时候 , 可以使用 docker COMMAND –help 查看用法 . 或者直接<a href="https://www.baidu.com/">百度</a>.</p><h3 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例:"></a>简单示例:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br>[josway:<span class="hljs-operator">~</span>]$ docker <span class="hljs-keyword">start</span> <span class="hljs-comment">--help</span><br><br>Usage:  docker <span class="hljs-keyword">start</span> [OPTIONS] CONTAINER [CONTAINER...]<br>用法:   docker <span class="hljs-keyword">start</span> [可选] container<br><br><span class="hljs-keyword">Start</span> <span class="hljs-keyword">one</span> <span class="hljs-keyword">or</span> more stopped containers<br><br>Options:<br>可选:<br>  <span class="hljs-operator">-</span>a, <span class="hljs-comment">--attach                  Attach STDOUT/STDERR and forward signals</span><br>      <span class="hljs-comment">--checkpoint string       Restore from this checkpoint</span><br>      <span class="hljs-comment">--checkpoint-dir string   Use a custom checkpoint storage directory</span><br>      <span class="hljs-comment">--detach-keys string      Override the key sequence for detaching a container</span><br>  <span class="hljs-operator">-</span>i, <span class="hljs-comment">--interactive             Attach container&#x27;s STDIN</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 1. 安装</title>
    <link href="/2022/04/25/yuque/Docker%201.%20%E5%AE%89%E8%A3%85/"/>
    <url>/2022/04/25/yuque/Docker%201.%20%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>Docker 在线 和 离线 安装方法。</p><h2 id="Docker-在线安装"><a href="#Docker-在线安装" class="headerlink" title="Docker 在线安装"></a>Docker 在线安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo curl -fsSL https://get.docker.com | sudo bash -s docker --mirror Aliyun<br></code></pre></td></tr></table></figure><h2 id="Docker-离线安装"><a href="#Docker-离线安装" class="headerlink" title="Docker 离线安装"></a>Docker 离线安装</h2><h3 id="Centos-7-完整流程-Root-账户-无-Root-账户自己加sudo"><a href="#Centos-7-完整流程-Root-账户-无-Root-账户自己加sudo" class="headerlink" title="Centos 7 完整流程 (Root 账户 无 Root 账户自己加sudo)"></a>Centos 7 完整流程 (Root 账户 无 Root 账户自己加<code>sudo</code>)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># (可选:如网络正常无需任何配置)网络配置</span><br><span class="hljs-comment">#nmtui</span><br><br><span class="hljs-comment"># (可选:如果有现成的就不用下载了)有网络的机器获取docker安装包</span><br><span class="hljs-comment">#docker run -it --privileged centos:7</span><br><br>yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br>yum makecache fast<br>yum install --downloadonly --downloaddir=/tmp/docker docker-ce<br><br><span class="hljs-comment"># 将/tmp/docker文件夹复制到本机</span><br><span class="hljs-comment">#docker cp CONTAINER:SRC_PATH DEST_PATH</span><br><br><span class="hljs-comment"># 不管用何种方式,只要把上一步或下载好的安装包放到服务器就行.</span><br><span class="hljs-comment"># 将所有的 .rpm 文件进行安装</span><br>yum install *.rpm<br><br><span class="hljs-comment">#(可选:如果提示缺少依赖) 手动下载缺失的依赖</span><br><span class="hljs-comment">#访问 https://mirrors.huaweicloud.com/centos/7/os/x86_64/Packages/</span><br><span class="hljs-comment">#ctrl+f 搜索相应的依赖.下载后放入上一步的文件夹后.再次执行 sudo yum install *.rpm</span><br><br><span class="hljs-comment"># 开启Docker服务</span><br>service docker start<br><br><span class="hljs-comment"># (可选:如果有其他镜像也可以load然后尝试运行) 提示 Hello from Docker! 即安装成功!</span><br><span class="hljs-comment">#docker load -i hello-world.tar.gz</span><br><span class="hljs-comment">#docker run hello-world</span><br></code></pre></td></tr></table></figure><h3 id="可以配置下-Docker-加速"><a href="#可以配置下-Docker-加速" class="headerlink" title="可以配置下 Docker 加速"></a>可以配置下 Docker 加速</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nano /etc/docker/daemon.json<br></code></pre></td></tr></table></figure><p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p>]]></content>
    
    
    <categories>
      
      <category>docker教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dhcc-framework私服崩溃解决方案</title>
    <link href="/2022/04/25/yuque/dhcc-framework%E7%A7%81%E6%9C%8D%E5%B4%A9%E6%BA%83%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2022/04/25/yuque/dhcc-framework%E7%A7%81%E6%9C%8D%E5%B4%A9%E6%BA%83%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p>DHCC-FRAMEWORK 框架的手动安装教程。</p><h2 id="基础条件"><a href="#基础条件" class="headerlink" title="基础条件"></a>基础条件</h2><h2 id="下载相关文件"><a href="#下载相关文件" class="headerlink" title="下载相关文件"></a>下载相关文件</h2><p><a href="https://www.yuque.com/attachments/yuque/0/2022/zip/28199557/1650900672125-8ebcc766-8ee5-4201-842e-96a5829ed1b7.zip?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2022/zip/28199557/1650900672125-8ebcc766-8ee5-4201-842e-96a5829ed1b7.zip%22,%22name%22:%22dhccFrame.zip%22,%22size%22:4177652,%22type%22:%22application/x-zip-compressed%22,%22ext%22:%22zip%22,%22status%22:%22done%22,%22taskId%22:%22u2e8ea8c4-1599-424e-83df-7c8dfa2467f%22,%22taskType%22:%22upload%22,%22id%22:%22uac297617%22,%22card%22:%22file%22%7D">dhccFrame.zip</a><br>Maven</p><ul><li>(建议配置 aliyun-maven 镜像源)</li><li>本地磁盘拥有 <code>D盘</code> PS:无此盘符，或者不想放在此盘符，需自行修改 Maven 的 setting.xml , 和第三步中的命令。</li></ul><h3 id="PS-其他版本-dhcc-framework-也可以"><a href="#PS-其他版本-dhcc-framework-也可以" class="headerlink" title="PS: 其他版本 dhcc-framework 也可以!"></a>PS: 其他版本 dhcc-framework 也可以!</h3><ul><li>自己收集相应版本的 Jar 包.</li><li>照猫画虎,修改第三步中的命令.</li></ul><h2 id="第一步-将文件dhccFrame-zip解压放到-D-盘根目录"><a href="#第一步-将文件dhccFrame-zip解压放到-D-盘根目录" class="headerlink" title="第一步. 将文件dhccFrame.zip解压放到 D 盘根目录"></a>第一步. 将文件<code>dhccFrame.zip</code>解压放到 D 盘根目录</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1650900680487-a78bccc1-1db6-48c9-be77-f6eb69c88316.png#clientId=u56076083-47c5-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u0db3a5ba&name=dhccFrame%E7%9B%B8%E5%85%B31.png&originHeight=743&originWidth=740&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=58045&status=done&style=none&taskId=ufa9ccb88-0647-461f-b5ec-8661fe4f2b9&title=" alt="dhccFrame相关1.png"></p><h2 id="第二步-并切换到相应目录"><a href="#第二步-并切换到相应目录" class="headerlink" title="第二步. 并切换到相应目录"></a>第二步. 并切换到相应目录</h2><p>请确认自己的 Maven 的 Jar 包的下载路径为 <code>D:\.m2\repository\</code>,<br>如果不是需要自行修改 <code>maven/conf/setting.xml</code> 中 的 <code>localRepository</code> .</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!-- 在`setting.xml`找到此位置 --&gt;<br>&lt;!-- localRepository<br> | The path to the <span class="hljs-built_in">local</span> repository maven will use to store artifacts.<br> |<br> | Default: <span class="hljs-variable">$&#123;user.home&#125;</span>/.m2/repository<br>&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;<br>--&gt;<br>&lt;!-- 增加下面这行 --&gt;<br>&lt;localRepository&gt;填写自己的Maven的Jar包的下载路径.&lt;/localRepository&gt;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1650900786271-2ee6465b-0bae-4d00-b5fb-fcecd117c4e8.png#clientId=u56076083-47c5-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=uabe04600&name=maven%E7%9B%B8%E5%85%B31.png&originHeight=608&originWidth=1227&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=63131&status=done&style=none&taskId=u329c66cc-ed7a-446d-b5f5-05e8f1e7d76&title=" alt="maven相关1.png"></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn install:install-file -Dfile=your-artifact-1.0.jar \<br>                         [-DpomFile=your-pom.xml] \<br>                         [-Dsources=src.jar] \<br>                         [-Djavadoc=apidocs.jar] \<br>                         [-DgroupId=org.some.group] \<br>                         [-DartifactId=your-artifact] \<br>                         [-Dversion=1.0] \<br>                         [-Dpackaging=jar] \<br>                         [-Dclassifier=sources] \<br>                         [-DgeneratePom=<span class="hljs-literal">true</span>] \<br>                         [-DcreateChecksum=<span class="hljs-literal">true</span>]<br></code></pre></td></tr></table></figure><ul><li>-Dfile：jar 包所在本地的具体路径</li><li>-DgroupId：项目组织唯一的标识符，实际对应 JAVA 的包的结构</li><li>-DartifactId：项目的唯一的标识符，实际对应项目的名称，就是项目根目录的名称</li><li>-Dversion：版本号</li><li>-Dpackaging：打包的类型</li><li>-DpomFile：POM 文件</li></ul><h3 id="第三步：在-maven-x2F-bin-下-运行以下命令"><a href="#第三步：在-maven-x2F-bin-下-运行以下命令" class="headerlink" title="第三步：在 maven&#x2F;bin 下, 运行以下命令"></a>第三步：在 maven&#x2F;bin 下, 运行以下命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn install:install-file -Dfile=D:\dhccFrame\dhcc-core-parent-4.7.0.pom  -DgroupId=com.dhcc.framework  -DartifactId=dhcc-core-parent  -Dversion=4.7.0  -Dpackaging=pom<br>mvn install:install-file -Dfile=D:\dhccFrame\dhcc-core-4.7.0.jar  -DgroupId=com.dhcc.framework  -DartifactId=dhcc-core  -Dversion=4.7.0  -Dpackaging=jar -DpomFile=D:\dhccFrame\dhcc-core-4.7.0.pom<br>mvn install:install-file -Dfile=D:\dhccFrame\dhcc-core-log-4.7.0.jar  -DgroupId=com.dhcc.framework  -DartifactId=dhcc-core-log  -Dversion=4.7.0  -Dpackaging=jar  -DpomFile=D:\dhccFrame\dhcc-core-log-4.7.0.pom<br>mvn install:install-file -Dfile=D:\dhccFrame\dhcc-core-mybatis-4.7.0.jar  -DgroupId=com.dhcc.framework  -DartifactId=dhcc-core-mybatis  -Dversion=4.7.0  -Dpackaging=jar  -DpomFile=D:\dhccFrame\dhcc-core-mybatis-4.7.0.pom<br>mvn install:install-file -Dfile=D:\dhccFrame\mybatis-plus-generator-ext-4.7.0.jar  -DgroupId=com.baomidou  -DartifactId=mybatis-plus-generator-ext  -Dversion=4.7.0  -Dpackaging=jar<br>mvn install:install-file -Dfile=D:\dhccFrame\dhcc-core-um-4.7.0.jar  -DgroupId=com.dhcc.framework  -DartifactId=dhcc-core-um  -Dversion=4.7.0  -Dpackaging=jar  -DpomFile=D:\dhccFrame\dhcc-core-um-4.7.0.pom<br>mvn install:install-file -Dfile=D:\dhccFrame\dhcc-core-cxf-webservice-4.7.0.jar  -DgroupId=com.dhcc.framework  -DartifactId=dhcc-core-cxf-webservice  -Dversion=4.7.0  -Dpackaging=jar  -DpomFile=D:\dhccFrame\dhcc-core-cxf-webservice-4.7.0.pom<br>mvn install:install-file -Dfile=D:\dhccFrame\ojdbc7-12.1.0.2.jar  -DgroupId=com.oracle  -DartifactId=ojdbc7  -Dversion=12.1.0.2  -Dpackaging=jar<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">mvn install:install-file <span class="hljs-attribute">-Dfile</span>=D:\dhccFrame\spire.office.free-3.9.0.jar  <span class="hljs-attribute">-DgroupId</span>=e-iceblue  <span class="hljs-attribute">-DartifactId</span>=spire.office.free  <span class="hljs-attribute">-Dversion</span>=3.9.0  <span class="hljs-attribute">-Dpackaging</span>=jar <span class="hljs-attribute">-DpomFile</span>=D:\dhccFrame4.7\spire.office.free-3.9.0.pom<br></code></pre></td></tr></table></figure><h3 id="第四步：运行完成提示-8-个-则为成功"><a href="#第四步：运行完成提示-8-个-则为成功" class="headerlink" title="第四步：运行完成提示 8 个,则为成功!"></a>第四步：运行完成提示 8 个,则为成功!</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1650900721521-721b2887-9312-4a03-bbdd-7846fe688f87.png#clientId=u56076083-47c5-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=Mi4Tb&name=maven%E7%9B%B8%E5%85%B32.png&originHeight=208&originWidth=1269&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=23057&status=done&style=none&taskId=u10b2bde3-9ef8-4811-ae82-2acfdf5cd97&title=" alt="maven相关2.png"></p><h2 id="其他版本示例-3-5"><a href="#其他版本示例-3-5" class="headerlink" title="其他版本示例 3.5"></a>其他版本示例 3.5</h2><h3 id="dhcc-framework-3-5-示例文件"><a href="#dhcc-framework-3-5-示例文件" class="headerlink" title="dhcc-framework 3.5 示例文件"></a>dhcc-framework 3.5 示例文件</h3><p>暂无</p><h3 id="dhcc-framework-3-5-示例命令"><a href="#dhcc-framework-3-5-示例命令" class="headerlink" title="dhcc-framework 3.5 示例命令"></a>dhcc-framework 3.5 示例命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn install:install-file -Dfile=D:\dhccFrame3.5\dhcc-core-parent-3.5.0.pom  -DgroupId=com.dhcc.framework  -DartifactId=dhcc-core-parent  -Dversion=3.5.0  -Dpackaging=pom<br>mvn install:install-file -Dfile=D:\dhccFrame3.5\dhcc-core-3.5.0.jar  -DgroupId=com.dhcc.framework  -DartifactId=dhcc-core  -Dversion=3.5.0  -Dpackaging=jar -Dpomfile=D:\dhccFrame3.5\dhcc-core-3.5.0.pom<br></code></pre></td></tr></table></figure><h3 id="第五步：一切准备就绪"><a href="#第五步：一切准备就绪" class="headerlink" title="第五步：一切准备就绪"></a>第五步：一切准备就绪</h3><h4 id="在-IDEA-中打开相关项目"><a href="#在-IDEA-中打开相关项目" class="headerlink" title="在 IDEA 中打开相关项目"></a>在 IDEA 中打开相关项目</h4><h5 id="双击-package-PS-红色波浪线部分-貌似不影响使用"><a href="#双击-package-PS-红色波浪线部分-貌似不影响使用" class="headerlink" title="双击 package  PS: (红色波浪线部分 貌似不影响使用)"></a>双击 <code>package</code>  PS: (红色波浪线部分 貌似不影响使用)</h5><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1650900716287-76173ac7-33bf-4c07-b750-ff0f7f237118.png#clientId=u56076083-47c5-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u5c2f9a49&name=IDEA%E7%9B%B8%E5%85%B31.png&originHeight=1237&originWidth=906&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=94586&status=done&style=none&taskId=u2cc17202-cbcb-4b84-9d74-998c108b00c&title=" alt="IDEA相关1.png"></p><h5 id="出现以下提示即为成功"><a href="#出现以下提示即为成功" class="headerlink" title="出现以下提示即为成功!"></a>出现以下提示即为成功!</h5><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28199557/1650900758464-a0c42272-a96a-4b49-b46a-ef9d67ea82f6.png#clientId=u56076083-47c5-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u092eb344&name=IDEA%E7%9B%B8%E5%85%B32.png&originHeight=431&originWidth=1848&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=70304&status=done&style=none&taskId=u5c641ef4-495e-4b1e-a4ee-e3046ea5631&title=" alt="IDEA相关2.png"></p>]]></content>
    
    
    <categories>
      
      <category>问题汇总</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dhcc-framework</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>哔哩哔哩倍速播放</title>
    <link href="/2022/04/25/yuque/%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9%E5%80%8D%E9%80%9F%E6%92%AD%E6%94%BE/"/>
    <url>/2022/04/25/yuque/%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9%E5%80%8D%E9%80%9F%E6%92%AD%E6%94%BE/</url>
    
    <content type="html"><![CDATA[<p>哔哩哔哩网页端倍速播放<br><code>F12</code> 打开哔哩哔哩网页控制台，<br>在 <code>Console</code> 输入下列代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">document.querySelector(<span class="hljs-string">&#x27;video&#x27;</span>).playbackRate = 4//将下面的4改为你想改变的倍速<br></code></pre></td></tr></table></figure><h2 id="Chrome-插件推荐"><a href="#Chrome-插件推荐" class="headerlink" title="Chrome 插件推荐"></a>Chrome 插件推荐</h2><p><a href="https://chrome.google.com/webstore/detail/global-speed/jpbjcnkcffbooppibceonlgknpkniiff">https://chrome.google.com/webstore/detail/global-speed/jpbjcnkcffbooppibceonlgknpkniiff</a></p>]]></content>
    
    
    <categories>
      
      <category>其他教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bilibili</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Arthas 基础教程</title>
    <link href="/2022/04/25/yuque/Arthas%20%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
    <url>/2022/04/25/yuque/Arthas%20%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p><code>Arthas</code> 是 Alibaba 开源的 Java 诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪 Java 代码；实时监控 JVM 状态。</p><p><code>Arthas</code> 支持 JDK 6+，支持 Linux&#x2F;Mac&#x2F;Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p><ul><li>Github: <a href="https://github.com/alibaba/arthas">https://github.com/alibaba/arthas</a></li><li>文档: <a href="https://arthas.aliyun.com/doc/">https://arthas.aliyun.com/doc/</a></li></ul><h2 id="启动-arthas-demo"><a href="#启动-arthas-demo" class="headerlink" title="启动 arthas-demo"></a>启动 arthas-demo</h2><p>下载<code>arthas-demo.jar</code>，再用<code>java -jar</code>命令启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://arthas.aliyun.com/arthas-demo.jar;java -jar arthas-demo.jar<br></code></pre></td></tr></table></figure><p><code>arthas-demo</code>是一个很简单的程序，它随机生成整数，再执行因式分解，把结果打印出来。如果生成的随机数是负数，则会打印提示信息。</p><h2 id="启动-arthas-boot"><a href="#启动-arthas-boot" class="headerlink" title="启动 arthas-boot"></a>启动 arthas-boot</h2><p>在新的<code>Terminal 2</code>里，下载<code>arthas-boot.jar</code>，再用<code>java -jar</code>命令启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://arthas.aliyun.com/arthas-boot.jar;java -jar arthas-boot.jar<br></code></pre></td></tr></table></figure><p><code>arthas-boot</code>是<code>Arthas</code>的启动程序，它启动后，会列出所有的 Java 进程，用户可以选择需要诊断的目标进程。</p><p>选择第一个进程，输入 <code>1</code> ，再<code>Enter/回车</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1<br></code></pre></td></tr></table></figure><p>Attach 成功之后，会打印 Arthas LOGO。输入 <code>help</code> 可以获取到更多的帮助信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><p><img src="https://img.alicdn.com/imgextra/i3/O1CN01HzatXZ1RgccrlT90M_!!6000000002141-2-tps-529-244.png#crop=0&crop=0&crop=1&crop=1&id=aEoJA&originHeight=244&originWidth=529&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="Dashboard"><a href="#Dashboard" class="headerlink" title="Dashboard"></a>Dashboard</h2><p><code>dashboard</code> 命令可以查看当前系统的实时数据面板。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dashboard<br></code></pre></td></tr></table></figure><p>输入 <code>q</code> 或者 <code>Ctrl+C</code> 可以退出 dashboard 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">q<br></code></pre></td></tr></table></figure><h2 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h2><p><code>thread 1</code> 命令会打印线程 ID 1 的栈。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">thread 1<br></code></pre></td></tr></table></figure><p>Ctrl+C Arthas 支持管道，可以用 <code>thread 1 | grep &#39;main(&#39;</code> 查找到<code>main class</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">thread 1 | grep <span class="hljs-string">&#x27;main(&#x27;</span><br></code></pre></td></tr></table></figure><p>可以看到<code>main class</code>是<code>demo.MathGame</code>：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ thread <span class="hljs-number">1</span> | <span class="hljs-keyword">grep</span> <span class="hljs-string">&#x27;main(&#x27;</span><br>    at demo.MathGame.main(MathGame.jav<span class="hljs-variable">a:17</span>)<br></code></pre></td></tr></table></figure><h2 id="Sc"><a href="#Sc" class="headerlink" title="Sc"></a>Sc</h2><p>可以通过 <code>sc</code> 命令来查找 JVM 里已加载的类：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sc -d *MathGame<br></code></pre></td></tr></table></figure><h2 id="Jad"><a href="#Jad" class="headerlink" title="Jad"></a>Jad</h2><p>可以通过 <code>jad</code> 命令来反编译代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jad demo.MathGame<br></code></pre></td></tr></table></figure><h2 id="Watch"><a href="#Watch" class="headerlink" title="Watch"></a>Watch</h2><p>通过<code>watch</code>命令可以查看函数的参数&#x2F;返回值&#x2F;异常信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">watch demo.MathGame primeFactors returnObj<br></code></pre></td></tr></table></figure><p>输入 <code>q</code> 或者 <code>Ctrl+C</code> 退出 watch 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">q<br></code></pre></td></tr></table></figure><h2 id="Exit-x2F-Stop"><a href="#Exit-x2F-Stop" class="headerlink" title="Exit&#x2F;Stop"></a>Exit&#x2F;Stop</h2><h3 id="退出-Arthas"><a href="#退出-Arthas" class="headerlink" title="退出 Arthas"></a>退出 Arthas</h3><p>用 <code>exit</code> 或者 <code>quit</code> 命令可以退出 Arthas。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><p>退出 Arthas 之后，还可以再次用 <code>java -jar arthas-boot.jar</code> 来连接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar arthas-boot.jar<br></code></pre></td></tr></table></figure><h3 id="彻底退出-Arthas"><a href="#彻底退出-Arthas" class="headerlink" title="彻底退出 Arthas"></a>彻底退出 Arthas</h3><p><code>exit/quit</code>命令只是退出当前 session，arthas server 还在目标进程中运行。</p><p>想完全退出 Arthas，可以执行 <code>stop</code> 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">stop<br></code></pre></td></tr></table></figure><p><a href="https://start.aliyun.com/handson/arthas/arthas-basics-cn">https://start.aliyun.com/handson/arthas/arthas-basics-cn</a></p>]]></content>
    
    
    <categories>
      
      <category>Java工具教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Arthas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACK 机制</title>
    <link href="/2022/04/25/yuque/ACK%20%E6%9C%BA%E5%88%B6/"/>
    <url>/2022/04/25/yuque/ACK%20%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p>由于通信过程的不可靠性，传输的数据不可避免的会出现丢失、延迟、错误、重复等各种状况，TCP 协议为解决这些问题设计了一系列机制。这个机制的核心，就是发送方向接收方发送数据后，接收方要向发送方发送 ACK（回执）。如果发送方没接收到正确的 ACK，就会重新发送数据直到接收到 ACK 为止。比如：发送方发送的数据序号是 seq，那么接收方会发送 seq + 1 作为 ACK，这样发送方就知道接下来要发送序号为 seq + 1 的数据给接收方了。</p><p><img src="https://img-blog.csdnimg.cn/20190724214859428.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5MDY2MzI5,size_16,color_FFFFFF,t_70#crop=0&crop=0&crop=1&crop=1&id=oOND1&originHeight=539&originWidth=435&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="></p><ul><li><strong>数据丢失或延迟。</strong>发送方发送数据 seq 时会起一个定时器，如果在指定时间内没有接收到 ACK seq + 1，就把数据 seq 再发一次。</li><li><strong>数据乱序。</strong>接收方上一个收到的正确数据是 seq + 4，它返回 seq + 5 作为 ACK。这时候它收到了 seq + 7，因为顺序错了，所以接收方会再次返回 seq + 5 给发送方。</li><li><strong>数据错误。</strong>每一个 TCP 数据都会带着数据的校验和。接收方收到数据 seq + 3 以后会先对校验和进行验证。如果结果不对，则发送 ACK seq + 3，让发送方重新发送数据。</li><li><strong>数据重复。</strong>接收方直接丢弃重复的数据即可。</li></ul>]]></content>
    
    
    <categories>
      
      <category>通用知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>frpc + zfile 使用指南</title>
    <link href="/2022/04/25/yuque/frpc%20+%20zfile%20%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <url>/2022/04/25/yuque/frpc%20+%20zfile%20%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="启动-frpc（frp-客户端）"><a href="#启动-frpc（frp-客户端）" class="headerlink" title="启动 frpc（frp 客户端）"></a>启动 frpc（frp 客户端）</h1><p>下载地址：<a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a></p><h2 id="配置文件-frpc-ini"><a href="#配置文件-frpc-ini" class="headerlink" title="配置文件 frpc.ini"></a>配置文件 <code>frpc.ini</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[common]<br>server_addr = josway.cc<br>server_port = 7000<br>token = josway<br><br>[twk1]<br>local_port = 8080 ;本地服务端口号<br>remote_port = 61234 ;远程访问端口号<br></code></pre></td></tr></table></figure><p>访问地址 &#x3D; server_addr:remote_port<br>Example：josway.cc:61234</p><h2 id="启动方法"><a href="#启动方法" class="headerlink" title="启动方法"></a>启动方法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">frpc.exe -c frpc.ini<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28164736/1650809320410-242aeb08-18d6-4d46-aa06-bd5af769fe24.png#clientId=u254b75a4-f933-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=260&id=u3899a93c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=634&originWidth=822&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=169384&status=done&style=none&taskId=ua7deee44-f37a-4bd1-8a45-01a37cbaa9c&title=&width=337.6000061035156#crop=0&crop=0&crop=1&crop=1&id=tLA17&originHeight=634&originWidth=822&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title=" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/28164736/1650809337192-9aa6096d-2f30-4892-9f15-bf022fe72406.png#clientId=u254b75a4-f933-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=136&id=u051a8b59&margin=%5Bobject%20Object%5D&name=image.png&originHeight=181&originWidth=865&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=60199&status=done&style=none&taskId=uff12587b-936a-4ec6-babc-91d2399497f&title=&width=651#crop=0&crop=0&crop=1&crop=1&id=CvXIJ&originHeight=181&originWidth=865&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title=" alt="image.png"></p><h1 id="启动-zFile"><a href="#启动-zFile" class="headerlink" title="启动 zFile"></a>启动 zFile</h1><p>下载地址：<a href="https://github.com/zhaojun1998/zfile">https://github.com/zhaojun1998/zfile</a></p><p>1、配置 Java 环境变量（重装系统配置一次）参考 baidu</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar zfile-3.2.2.jar<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28164736/1650809377597-3e903eaf-3c18-4f40-9b07-1f5eca989e54.png#clientId=u254b75a4-f933-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=507&id=ue904b56c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1031&originWidth=865&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=268915&status=done&style=none&taskId=u1300338a-e9ca-44d0-98da-68ff089cf29&title=&width=425#crop=0&crop=0&crop=1&crop=1&id=aVnTh&originHeight=1031&originWidth=865&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title=" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/28164736/1650809390954-68e40acd-5853-4361-92d4-f30baf046424.png#clientId=u254b75a4-f933-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=731&id=u49557164&margin=%5Bobject%20Object%5D&name=image.png&originHeight=914&originWidth=865&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=406401&status=done&style=none&taskId=u2b54a597-7a41-4a9d-bc85-3484f029ba1&title=&width=692#crop=0&crop=0&crop=1&crop=1&id=v5iDW&originHeight=914&originWidth=865&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title=" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>frp教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>frpc</tag>
      
      <tag>zfile</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
